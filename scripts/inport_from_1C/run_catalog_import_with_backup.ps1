param(
    [string]$ComposeFile = "docker-compose.test.yml",
    [string]$DataDir = "/app/data/import_1c",
    [int]$ChunkSize = 500,
    [switch]$SkipMigrate,
    [switch]$SkipBackup,
    [switch]$SkipImport,
    [string]$BackupOutput,
    [string[]]$ImportArgs = @()
)

$ErrorActionPreference = "Stop"

# –§—É–Ω–∫—Ü–∏—è-–æ–±—ë—Ä—Ç–∫–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è docker-–∫–æ–º–∞–Ω–¥ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∫–æ–¥–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞
function Invoke-DockerCommand {
    param(
        [string]$Message,
        [string]$ErrorMessage,
        [string[]]$Command
    )

    Write-Host $Message

    if (-not $Command -or $Command.Length -eq 0) {
        throw "–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–µ –∑–∞–¥–∞–Ω–∞"
    }

    $executable = $Command[0]
    $arguments = @()
    if ($Command.Length -gt 1) {
        $arguments = $Command[1..($Command.Length - 1)]
    }

    & $executable @arguments

    if ($LASTEXITCODE -ne 0) {
        throw $ErrorMessage
    }
}

try {
    Write-Host "‚öôÔ∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º compose-—Ñ–∞–π–ª: $ComposeFile"
    Invoke-DockerCommand `
        -Message "üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤ (PostgreSQL, Redis)..." `
        -ErrorMessage "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–∏—Å—ã docker-compose." `
        -Command @("docker", "compose", "-f", $ComposeFile, "up", "-d", "--wait", "--remove-orphans")

    if (-not $SkipMigrate) {
        Invoke-DockerCommand `
            -Message "üì¶ –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π Django..." `
            -ErrorMessage "–ú–∏–≥—Ä–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å —Å –æ—à–∏–±–∫–æ–π." `
            -Command @("docker", "compose", "-f", $ComposeFile, "run", "--rm", "backend", "python", "manage.py", "migrate")
    }
    else {
        Write-Host "‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–π (—Ñ–ª–∞–≥ --SkipMigrate)."
    }

    if (-not $SkipBackup) {
        $backupCommand = @("docker", "compose", "-f", $ComposeFile, "run", "--rm", "backend", "python", "manage.py", "backup_db")
        if ($BackupOutput) {
            $backupCommand += @("--output", $BackupOutput)
        }

        Invoke-DockerCommand `
            -Message "üíæ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö..." `
            -ErrorMessage "–†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å —Å –æ—à–∏–±–∫–æ–π." `
            -Command $backupCommand
    }
    else {
        Write-Host "‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è (—Ñ–ª–∞–≥ --SkipBackup)."
    }

    if (-not $SkipImport) {
        $importCommand = @(
            "docker", "compose", "-f", $ComposeFile, "run", "--rm", "backend",
            "python", "manage.py", "import_catalog_from_1c",
            "--data-dir", $DataDir,
            "--chunk-size", $ChunkSize,
            "--skip-backup"
        )

        if ($ImportArgs -and $ImportArgs.Length -gt 0) {
            $importCommand += $ImportArgs
        }

        Invoke-DockerCommand `
            -Message "‚¨áÔ∏è –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞ –∫–∞—Ç–∞–ª–æ–≥–∞ –∏–∑ 1–°..." `
            -ErrorMessage "–ò–º–ø–æ—Ä—Ç –∫–∞—Ç–∞–ª–æ–≥–∞ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π." `
            -Command $importCommand
    }
    else {
        Write-Host "‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫ –∏–º–ø–æ—Ä—Ç–∞ (—Ñ–ª–∞–≥ --SkipImport)."
    }

    Write-Host "‚úÖ –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à—ë–Ω."
}
catch {
    Write-Error "‚ùå $($_.Exception.Message)"
    exit 1
}
