param(
    [string]$ComposeFile = "docker-compose.test.yml",
    [string]$LocalDataPath,
    [string]$DataDir = "/app/data/import_1c",
    [int]$BatchSize = 1000,
    [string]$RestsFile = "rests.xml",
    [switch]$SkipMigrate,
    [switch]$SkipBackup,
    [switch]$SkipImport,
    [string[]]$ImportArgs = @()
)

$ErrorActionPreference = "Stop"

function Invoke-DockerCommand {
    param(
        [string]$Message,
        [string]$ErrorMessage,
        [string[]]$Command
    )

    Write-Host $Message

    if (-not $Command -or $Command.Length -eq 0) {
        throw "–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–µ –∑–∞–¥–∞–Ω–∞"
    }

    $executable = $Command[0]
    $arguments = @()
    if ($Command.Length -gt 1) {
        $arguments = $Command[1..($Command.Length - 1)]
    }

    & $executable @arguments

    if ($LASTEXITCODE -ne 0) {
        throw $ErrorMessage
    }
}

try {
    $scriptDir = Split-Path $MyInvocation.MyCommand.Path -Parent
    $projectRoot = Split-Path (Split-Path $scriptDir -Parent) -Parent

    if (-not $env:FREESPORT_PROJECT_ROOT -or [string]::IsNullOrWhiteSpace($env:FREESPORT_PROJECT_ROOT)) {
        $env:FREESPORT_PROJECT_ROOT = $projectRoot
    }

    if ([string]::IsNullOrWhiteSpace($LocalDataPath)) {
        $LocalDataPath = Join-Path $projectRoot "data\import_1c"
    }
    else {
        $LocalDataPath = (Resolve-Path $LocalDataPath).Path
    }

    if (-not (Test-Path $LocalDataPath)) {
        throw "‚ùå –õ–æ–∫–∞–ª—å–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: $LocalDataPath"
    }

    Write-Host "üìÅ –õ–æ–∫–∞–ª—å–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–∞–Ω–Ω—ã—Ö: $LocalDataPath" -ForegroundColor Gray
    Write-Host "üñ•Ô∏è  –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ: $DataDir" -ForegroundColor Gray

    Invoke-DockerCommand `
        -Message "üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤ (PostgreSQL, Redis)..." `
        -ErrorMessage "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–∏—Å—ã docker-compose." `
        -Command @("docker", "compose", "-f", $ComposeFile, "up", "-d", "--wait", "--remove-orphans")

    if (-not $SkipMigrate) {
        Invoke-DockerCommand `
            -Message "üì¶ –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π Django..." `
            -ErrorMessage "–ú–∏–≥—Ä–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å —Å –æ—à–∏–±–∫–æ–π." `
            -Command @("docker", "compose", "-f", $ComposeFile, "run", "--rm", "backend", "python", "manage.py", "migrate")
    }
    else {
        Write-Host "‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–π (—Ñ–ª–∞–≥ -SkipMigrate)."
    }

    if (-not $SkipBackup) {
        $backupCommand = @("docker", "compose", "-f", $ComposeFile, "run", "--rm", "backend", "python", "manage.py", "backup_db")

        Invoke-DockerCommand `
            -Message "üíæ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö..." `
            -ErrorMessage "–†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å —Å –æ—à–∏–±–∫–æ–π." `
            -Command $backupCommand
    }
    else {
        Write-Host "‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è (—Ñ–ª–∞–≥ -SkipBackup)."
    }

    if ($SkipImport) {
        Write-Host "‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫ –∏–º–ø–æ—Ä—Ç–∞ –æ—Å—Ç–∞—Ç–∫–æ–≤ (—Ñ–ª–∞–≥ -SkipImport)."
        return
    }

    $restsPath = Join-Path $DataDir (Join-Path "rests" $RestsFile)

    $importCommand = @(
        "docker", "compose", "-f", $ComposeFile, "run", "--rm", "backend",
        "python", "manage.py", "load_product_stocks",
        "--file", $restsPath,
        "--batch-size", $BatchSize
    )

    if ($ImportArgs -and $ImportArgs.Length -gt 0) {
        $importCommand += $ImportArgs
    }

    Invoke-DockerCommand `
        -Message "üìä –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–æ–≤ —Ç–æ–≤–∞—Ä–æ–≤..." `
        -ErrorMessage "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–æ–≤ –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å —Å –æ—à–∏–±–∫–æ–π." `
        -Command $importCommand

    Write-Host "‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ."
}
catch {
    Write-Error "‚ùå $($_.Exception.Message)"
    exit 1
}
