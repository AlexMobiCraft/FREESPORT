# –°–∫—Ä–∏–ø—Ç –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ XML-—Ñ–∞–π–ª–æ–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –Ω–∞–ø—Ä—è–º—É—é –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ

param(
    [string]$ServerIP = "5.35.124.149",
    [string]$User = "root",
    [string]$RemoteDataPath = "/home/freesport/freesport/data/import_1c",
    [string]$RemoteProjectPath = "/home/freesport/freesport",
    [string]$SshKeyPath = "C:\\Users\\38670\\.ssh\\id_ed25519",
    [int]$ChunkSize = 500,
    [switch]$SkipBackup = $false,
    [switch]$SkipMigrate = $false,
    [switch]$DryRun = $false,
    [string]$BackupPath = ""
)

$ErrorActionPreference = "Stop"

# –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞–µ—Ç ssh-agent –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á
function Start-SshAgentIfNeeded {
    param(
        [string]$KeyPath
    )

    if (-not (Test-Path -Path $KeyPath)) {
        throw "SSH-–∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω: $KeyPath"
    }

    Start-Service ssh-agent -ErrorAction SilentlyContinue | Out-Null
    ssh-add $KeyPath | Out-Null
}

# –§—É–Ω–∫—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã –Ω–∞ —É–¥–∞–ª—ë–Ω–Ω–æ–º —Å–µ—Ä–≤–µ—Ä–µ
function Invoke-RemoteCommand {
    param(
        [string]$ConnectionUser,
        [string]$ConnectionHost,
        [string]$Command,
        [string]$ErrorMessage
    )

    Write-Host "üîß –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ: $Command" -ForegroundColor Gray
    
    $result = ssh "$ConnectionUser@$ConnectionHost" $Command 2>&1
    
    if ($LASTEXITCODE -ne 0) {
        throw "$ErrorMessage. –†–µ–∑—É–ª—å—Ç–∞—Ç: $result"
    }
    
    return $result
}

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
function Test-RemoteFiles {
    param(
        [string]$ConnectionUser,
        [string]$ConnectionHost,
        [string]$RemotePath
    )
    
    Write-Host "üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è XML-—Ñ–∞–π–ª–æ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ..." -ForegroundColor Yellow
    
    $command = "find '$RemotePath' -name '*.xml' -type f | wc -l"
    $fileCount = Invoke-RemoteCommand -ConnectionUser $ConnectionUser -ConnectionHost $ConnectionHost -Command $command -ErrorMessage "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ñ–∞–π–ª—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ"
    
    $fileCount = [int]$fileCount.Trim()
    Write-Host "  –ù–∞–π–¥–µ–Ω–æ XML-—Ñ–∞–π–ª–æ–≤: $fileCount" -ForegroundColor Gray
    
    if ($fileCount -eq 0) {
        throw "‚ùå –í –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ $RemotePath –Ω–µ –Ω–∞–π–¥–µ–Ω–æ XML-—Ñ–∞–π–ª–æ–≤"
    }
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–∏–º–µ—Ä–æ–≤ —Ñ–∞–π–ª–æ–≤
    $command = "find '$RemotePath' -name '*.xml' -type f | head -5"
    $sampleFiles = Invoke-RemoteCommand -ConnectionUser $ConnectionUser -ConnectionHost $ConnectionHost -Command $command -ErrorMessage "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–º–µ—Ä—ã —Ñ–∞–π–ª–æ–≤"
    
    Write-Host "  –ü—Ä–∏–º–µ—Ä—ã —Ñ–∞–π–ª–æ–≤:" -ForegroundColor Gray
    foreach ($file in $sampleFiles -split "`n") {
        if ($file.Trim()) {
            Write-Host "    - $file" -ForegroundColor Gray
        }
    }
    
    return $fileCount
}

# –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
function Backup-RemoteDatabase {
    param(
        [string]$ConnectionUser,
        [string]$ConnectionHost,
        [string]$ProjectPath,
        [string]$CustomBackupPath
    )
    
    Write-Host "üíæ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ..." -ForegroundColor Yellow
    
    $backupCommand = "cd '$ProjectPath' && python manage.py backup_db"
    
    if ($CustomBackupPath) {
        $backupCommand += " --output '$CustomBackupPath'"
    }
    
    $result = Invoke-RemoteCommand -ConnectionUser $ConnectionUser -ConnectionHost $ConnectionHost -Command $backupCommand -ErrorMessage "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é"
    
    Write-Host "  ‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞: $result" -ForegroundColor Green
}

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–π –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
function Invoke-RemoteMigrations {
    param(
        [string]$ConnectionUser,
        [string]$ConnectionHost,
        [string]$ProjectPath
    )
    
    Write-Host "üì¶ –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ..." -ForegroundColor Yellow
    
    $migrateCommand = "cd '$ProjectPath' && python manage.py migrate"
    Invoke-RemoteCommand -ConnectionUser $ConnectionUser -ConnectionHost $ConnectionHost -Command $migrateCommand -ErrorMessage "–ú–∏–≥—Ä–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å —Å –æ—à–∏–±–∫–æ–π"
    
    Write-Host "  ‚úÖ –ú–∏–≥—Ä–∞—Ü–∏–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã" -ForegroundColor Green
}

# –§—É–Ω–∫—Ü–∏—è –∏–º–ø–æ—Ä—Ç–∞ –∫–∞—Ç–∞–ª–æ–≥–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
function Import-RemoteCatalog {
    param(
        [string]$ConnectionUser,
        [string]$ConnectionHost,
        [string]$ProjectPath,
        [string]$DataPath,
        [int]$ChunkSize,
        [bool]$DryRun
    )
    
    Write-Host "‚¨áÔ∏è –ó–∞–ø—É—Å–∫ –∏–º–ø–æ—Ä—Ç–∞ –∫–∞—Ç–∞–ª–æ–≥–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ..." -ForegroundColor Yellow
    
    $importCommand = "cd '$ProjectPath' && python manage.py import_catalog_from_1c --data-dir '$DataPath' --chunk-size $ChunkSize"
    
    if ($DryRun) {
        $importCommand += " --dry-run"
        Write-Host "  üß™ –†–µ–∂–∏–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –±–∞–∑–µ)" -ForegroundColor Cyan
    }
    
    $importCommand += " --skip-backup"  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –±—ç–∫–∞–ø, —Ç–∞–∫ –∫–∞–∫ –¥–µ–ª–∞–µ–º –µ–≥–æ –æ—Ç–¥–µ–ª—å–Ω–æ
    
    try {
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∏–º–ø–æ—Ä—Ç —Å –≤—ã–≤–æ–¥–æ–º –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        $fullCommand = "echo '–ù–∞—á–∞–ª–æ –∏–º–ø–æ—Ä—Ç–∞...' && $importCommand && echo '–ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à—ë–Ω.'"
        $result = Invoke-RemoteCommand -ConnectionUser $ConnectionUser -ConnectionHost $ConnectionHost -Command $fullCommand -ErrorMessage "–ò–º–ø–æ—Ä—Ç –∫–∞—Ç–∞–ª–æ–≥–∞ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π"
        
        Write-Host "  ‚úÖ –ò–º–ø–æ—Ä—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à—ë–Ω" -ForegroundColor Green
        return $result
    }
    catch {
        Write-Host "  ‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: $($_.Exception.Message)" -ForegroundColor Red
        throw
    }
}

try {
    Write-Host "üöÄ –ò–º–ø–æ—Ä—Ç –∫–∞—Ç–∞–ª–æ–≥–∞ –Ω–∞–ø—Ä—è–º—É—é –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ $ServerIP" -ForegroundColor Cyan
    Write-Host "üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–∞–Ω–Ω—ã—Ö: $RemoteDataPath" -ForegroundColor Gray
    Write-Host "üìÇ –ü—Ä–æ–µ–∫—Ç: $RemoteProjectPath" -ForegroundColor Gray
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º SSH –∞–≥–µ–Ω—Ç
    Start-SshAgentIfNeeded -KeyPath $SshKeyPath
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–æ–º
    Write-Host "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º..." -ForegroundColor Yellow
    Invoke-RemoteCommand -ConnectionUser $User -ConnectionHost $ServerIP -Command "echo '–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ'" -ErrorMessage "–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–æ–º"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–æ–≤
    $fileCount = Test-RemoteFiles -ConnectionUser $User -ConnectionHost $ServerIP -RemotePath $RemoteDataPath
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
    Write-Host "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø—Ä–æ–µ–∫—Ç–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ..." -ForegroundColor Yellow
    Invoke-RemoteCommand -ConnectionUser $User -ConnectionHost $ServerIP -Command "test -d '$RemoteProjectPath'" -ErrorMessage "–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ: $RemoteProjectPath"
    
    # –°–æ–∑–¥–∞—ë–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é (–µ—Å–ª–∏ –Ω–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ)
    if (-not $SkipBackup) {
        Backup-RemoteDatabase -ConnectionUser $User -ConnectionHost $ServerIP -ProjectPath $RemoteProjectPath -CustomBackupPath $BackupPath
    } else {
        Write-Host "‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è (—Ñ–ª–∞–≥ -SkipBackup)" -ForegroundColor Yellow
    }
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏ (–µ—Å–ª–∏ –Ω–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ)
    if (-not $SkipMigrate) {
        Invoke-RemoteMigrations -ConnectionUser $User -ConnectionHost $ServerIP -ProjectPath $RemoteProjectPath
    } else {
        Write-Host "‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–π (—Ñ–ª–∞–≥ -SkipMigrate)" -ForegroundColor Yellow
    }
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –∏–º–ø–æ—Ä—Ç
    $importResult = Import-RemoteCatalog -ConnectionUser $User -ConnectionHost $ServerIP -ProjectPath $RemoteProjectPath -DataPath $RemoteDataPath -ChunkSize $ChunkSize -DryRun $DryRun
    
    Write-Host "üéâ –û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!" -ForegroundColor Green
    Write-Host "üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: $fileCount" -ForegroundColor Gray
}
catch {
    Write-Host "‚ùå –û—à–∏–±–∫–∞: $($_.Exception.Message)" -ForegroundColor Red
    exit 1
}