#!/usr/bin/env python3
"""
–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è FREESPORT - —Å–∫—Ä–∏–ø—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏ –ø–æ–∏—Å–∫–∞ –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python scripts/docs_validator.py [–∫–æ–º–∞–Ω–¥–∞]

–ö–æ–º–∞–Ω–¥—ã:
    validate       - –ø–æ–ª–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
    obsolete       - –ø–æ–∏—Å–∫ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤
    cross-links    - –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–æ—Å—Å-—Å—Å—ã–ª–æ–∫
    api-coverage   - –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–∫—Ä—ã—Ç–∏—è API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–µ–π
"""

import os
import re
import sys
from pathlib import Path
from typing import Dict, List, Set, Tuple


class DocsValidator:
    """–í–∞–ª–∏–¥–∞—Ç–æ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ FREESPORT"""

    def __init__(self, docs_root: str = "docs"):
        self.docs_root = Path(docs_root)
        self.project_root = Path(__file__).parent.parent

        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø—Ä–æ–±–ª–µ–º
        self.obsolete_patterns = [
            r"\b–∑–∞–≥–ª—É—à–∫–∞\b",
            r"\b–≤—Ä–µ–º–µ–Ω–Ω–æ\b",
            r"\bTODO.*[–û–æ]—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç\b",
            r"\b–±—É–¥–µ—Ç\s+—Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ\b",
            r"\b–ø–ª–∞–Ω–∏—Ä—É–µ—Ç—Å—è\b",
        ]

        # –ö–ª—é—á–µ–≤—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        self.key_docs = [
            "index.md",
            "PRD.md",
            "api-spec.yaml",
            "api-views-documentation.md",
            "architecture.md",
        ]

    def validate_all(self) -> Dict[str, List[str]]:
        """–ü–æ–ª–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏"""
        results = {
            "errors": [],
            "warnings": [],
            "obsolete_terms": [],
            "broken_links": [],
        }

        print("üîç –ù–∞—á–∏–Ω–∞–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ FREESPORT...")

        # 1. –ü–æ–∏—Å–∫ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤
        print("üìù –ü–æ–∏—Å–∫ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤...")
        obsolete = self.find_obsolete_terms()
        results["obsolete_terms"] = obsolete

        # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–æ—Å—Å-—Å—Å—ã–ª–æ–∫
        print("üîó –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–æ—Å—Å-—Å—Å—ã–ª–æ–∫...")
        broken_links = self.check_cross_references()
        results["broken_links"] = broken_links

        # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
        print("üìÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã...")
        structure_issues = self.validate_structure()
        results["warnings"].extend(structure_issues)

        # 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–∫—Ä—ã—Ç–∏—è API
        print("üîå –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–∫—Ä—ã—Ç–∏—è API...")
        api_issues = self.check_api_coverage()
        results["warnings"].extend(api_issues)

        return results

    def find_obsolete_terms(self) -> List[str]:
        """–ü–æ–∏—Å–∫ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏"""
        obsolete_terms = []

        # –ò—Å–∫–ª—é—á–∞–µ–º —Ñ–∞–π–ª—ã, –≥–¥–µ —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ —Ç–µ—Ä–º–∏–Ω—ã –¥–æ–ø—É—Å—Ç–∏–º—ã
        exclude_patterns = [
            "TODO_TEMPORARY_FIXES.md",  # –≠—Ç–æ—Ç —Ñ–∞–π–ª —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è TODO
            "implementation/",  # –ó–¥–µ—Å—å –º–æ–≥—É—Ç –±—ã—Ç—å —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        ]

        for md_file in self.docs_root.rglob("*.md"):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤ –∏—Å–∫–ª—é—á–µ–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ª–∏ —Ñ–∞–π–ª
            if any(excl in str(md_file) for excl in exclude_patterns):
                continue

            try:
                content = md_file.read_text(encoding="utf-8")
                lines = content.split("\n")

                for line_num, line in enumerate(lines, 1):
                    for pattern in self.obsolete_patterns:
                        if re.search(pattern, line, re.IGNORECASE):
                            obsolete_terms.append(
                                f"{md_file.relative_to(self.docs_root)}:{line_num}: {line.strip()}"
                            )

            except Exception as e:
                obsolete_terms.append(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {md_file}: {e}")

        return obsolete_terms

    def check_cross_references(self) -> List[str]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–æ—Å—Å-—Å—Å—ã–ª–æ–∫ –º–µ–∂–¥—É –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏"""
        broken_links = []
        all_files = set()

        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
        for md_file in self.docs_root.rglob("*.md"):
            rel_path = md_file.relative_to(self.docs_root)
            all_files.add(str(rel_path))

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Å—ã–ª–∫–∏ –≤ –∫–∞–∂–¥–æ–º —Ñ–∞–π–ª–µ
        for md_file in self.docs_root.rglob("*.md"):
            try:
                content = md_file.read_text(encoding="utf-8")

                # –ò—â–µ–º markdown —Å—Å—ã–ª–∫–∏ –≤–∏–¥–∞ [text](./path.md)
                link_pattern = r"\[([^\]]+)\]\(([^)]+)\.md\)"
                matches = re.findall(link_pattern, content)

                for text, link_path in matches:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª
                    if link_path not in all_files and not link_path.startswith("http"):
                        broken_links.append(
                            f"{md_file.relative_to(self.docs_root)}: "
                            f"—Å–ª–æ–º–∞–Ω–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ {link_path}.md"
                        )

            except Exception as e:
                broken_links.append(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {md_file}: {e}")

        return broken_links

    def validate_structure(self) -> List[str]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
        issues = []

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö —Ä–∞–∑–¥–µ–ª–æ–≤ –≤ index.md
        index_path = self.docs_root / "index.md"
        if index_path.exists():
            try:
                content = index_path.read_text(encoding="utf-8")
                required_sections = [
                    "## –ö–æ—Ä–Ω–µ–≤—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã",
                    "## Architecture",
                    "## Database",
                    "## Decisions",
                ]

                for section in required_sections:
                    if section not in content:
                        issues.append(f"index.md: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ä–∞–∑–¥–µ–ª '{section}'")

            except Exception as e:
                issues.append(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è index.md: {e}")

        return issues

    def check_api_coverage(self) -> List[str]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–∫—Ä—ã—Ç–∏—è API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–µ–π"""
        issues = []

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º API spec –∏ views documentation
        api_spec = self.docs_root / "api-spec.yaml"
        api_views = self.docs_root / "api-views-documentation.md"

        if not api_spec.exists():
            issues.append("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç api-spec.yaml")
        if not api_views.exists():
            issues.append("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç api-views-documentation.md")

        return issues

    def generate_report(self, results: Dict[str, List[str]]) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ –≤–∞–ª–∏–¥–∞—Ü–∏–∏"""
        report = []
        report.append("üìä –û–¢–ß–ï–¢ –í–ê–õ–ò–î–ê–¶–ò–ò –î–û–ö–£–ú–ï–ù–¢–ê–¶–ò–ò")
        report.append("=" * 50)

        total_issues = sum(len(issues) for issues in results.values())

        if total_issues == 0:
            report.append("‚úÖ –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –≤–∞–ª–∏–¥–Ω–∞! –ü—Ä–æ–±–ª–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return "\n".join(report)

        # –û—à–∏–±–∫–∏
        if results["errors"]:
            report.append(f"\n‚ùå –û–®–ò–ë–ö–ò ({len(results['errors'])}):")
            for error in results["errors"]:
                report.append(f"  ‚Ä¢ {error}")

        # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
        if results["warnings"]:
            report.append(f"\n‚ö†Ô∏è  –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø ({len(results['warnings'])}):")
            for warning in results["warnings"]:
                report.append(f"  ‚Ä¢ {warning}")

        # –£—Å—Ç–∞—Ä–µ–≤—à–∏–µ —Ç–µ—Ä–º–∏–Ω—ã
        if results["obsolete_terms"]:
            report.append(f"\nüìù –£–°–¢–ê–†–ï–í–®–ò–ï –¢–ï–†–ú–ò–ù–´ ({len(results['obsolete_terms'])}):")
            for term in results["obsolete_terms"][:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
                report.append(f"  ‚Ä¢ {term}")
            if len(results["obsolete_terms"]) > 10:
                report.append(
                    f"  ... –∏ –µ—â—ë {len(results['obsolete_terms']) - 10} —É–ø–æ–º–∏–Ω–∞–Ω–∏–π"
                )

        # –°–ª–æ–º–∞–Ω–Ω—ã–µ —Å—Å—ã–ª–∫–∏
        if results["broken_links"]:
            report.append(f"\nüîó –°–õ–û–ú–ê–ù–ù–´–ï –°–°–´–õ–ö–ò ({len(results['broken_links'])}):")
            for link in results["broken_links"][:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                report.append(f"  ‚Ä¢ {link}")
            if len(results["broken_links"]) > 5:
                report.append(f"  ... –∏ –µ—â—ë {len(results['broken_links']) - 5} —Å—Å—ã–ª–æ–∫")

        report.append(f"\nüìà –ò–¢–û–ì–û –ü–†–û–ë–õ–ï–ú: {total_issues}")

        return "\n".join(report)


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    if len(sys.argv) > 1:
        command = sys.argv[1]
    else:
        command = "validate"

    validator = DocsValidator()

    if command == "validate":
        results = validator.validate_all()
        report = validator.generate_report(results)
        print(report)

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–¥ –≤—ã—Ö–æ–¥–∞
        total_issues = sum(len(issues) for issues in results.values())
        sys.exit(0 if total_issues == 0 else 1)

    elif command == "obsolete":
        obsolete = validator.find_obsolete_terms()
        if obsolete:
            print("üìù –ù–∞–π–¥–µ–Ω–Ω—ã–µ —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ —Ç–µ—Ä–º–∏–Ω—ã:")
            for term in obsolete:
                print(f"  ‚Ä¢ {term}")
            sys.exit(1)
        else:
            print("‚úÖ –£—Å—Ç–∞—Ä–µ–≤—à–∏—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            sys.exit(0)

    elif command == "cross-links":
        broken_links = validator.check_cross_references()
        if broken_links:
            print("üîó –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Å–ª–æ–º–∞–Ω–Ω—ã–µ —Å—Å—ã–ª–∫–∏:")
            for link in broken_links:
                print(f"  ‚Ä¢ {link}")
            sys.exit(1)
        else:
            print("‚úÖ –í—Å–µ —Å—Å—ã–ª–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã")
            sys.exit(0)

    elif command == "api-coverage":
        issues = validator.check_api_coverage()
        if issues:
            print("üîå –ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–∫—Ä—ã—Ç–∏–µ–º API:")
            for issue in issues:
                print(f"  ‚Ä¢ {issue}")
            sys.exit(1)
        else:
            print("‚úÖ API –ø–æ–ª–Ω–æ—Å—Ç—å—é –¥–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω")
            sys.exit(0)

    else:
        print(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {command}")
        print("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: validate, obsolete, cross-links, api-coverage")
        sys.exit(1)


if __name__ == "__main__":
    main()
