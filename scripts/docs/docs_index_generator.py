#!/usr/bin/env python3
"""
–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∏–Ω–¥–µ–∫—Å–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ FREESPORT Platform.

–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫–∞–Ω–∏—Ä—É–µ—Ç docs/ –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç:
- docs/index.md - –≥–ª–∞–≤–Ω—ã–π –∏–Ω–¥–µ–∫—Å
- README.md –≤ –∫–∞–∂–¥–æ–π –ø–æ–¥–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python scripts/docs_index_generator.py              # –û–±–Ω–æ–≤–∏—Ç—å –≤—Å–µ –∏–Ω–¥–µ–∫—Å—ã
    python scripts/docs_index_generator.py --dry-run    # –ü–æ–∫–∞–∑–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –±–µ–∑ –∑–∞–ø–∏—Å–∏
    python scripts/docs_index_generator.py --stats      # –¢–æ–ª—å–∫–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
"""

import re
import sys
from pathlib import Path
from typing import List, Dict, Tuple, Iterator
import argparse
from datetime import datetime

from exclude_utils import load_exclude_patterns


class Colors:
    """ANSI —Ü–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞."""
    RED = '\033[91m'
    GREEN = '\033[92m'
    YELLOW = '\033[93m'
    BLUE = '\033[94m'
    CYAN = '\033[96m'
    RESET = '\033[0m'
    BOLD = '\033[1m'


class DocsIndexGenerator:
    """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∏–Ω–¥–µ–∫—Å–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏."""

    def __init__(self, docs_dir: Path, dry_run: bool = False, exclude_patterns: List[str] | None = None):
        self.docs_dir = docs_dir
        self.project_root = docs_dir.parent
        self.dry_run = dry_run
        self.total_files = 0
        self.total_size = 0
        self.stats_by_category: Dict[str, int] = {}
        self.last_updated = datetime.now().strftime('%d.%m.%Y')
        self.exclude_patterns = list(exclude_patterns or [])

    def print_header(self, text: str):
        """–ü–µ—á–∞—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∞."""
        print(f"\n{Colors.BOLD}{Colors.CYAN}{'=' * 80}{Colors.RESET}")
        print(f"{Colors.BOLD}{Colors.CYAN}{text}{Colors.RESET}")
        print(f"{Colors.BOLD}{Colors.CYAN}{'=' * 80}{Colors.RESET}\n")

    def extract_title(self, md_file: Path) -> str:
        """–ò–∑–≤–ª–µ—á—å –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏–∑ markdown —Ñ–∞–π–ª–∞."""
        try:
            content = md_file.read_text(encoding='utf-8')

            # –ò—â–µ–º –ø–µ—Ä–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ H1
            match = re.search(r'^#\s+(.+)$', content, re.MULTILINE)
            if match:
                return match.group(1).strip()

            # –ï—Å–ª–∏ –Ω–µ—Ç H1, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞
            return md_file.stem.replace('-', ' ').replace('_', ' ').title()

        except Exception:
            return md_file.stem

    def extract_description(self, md_file: Path, max_length: int = 200) -> str:
        """–ò–∑–≤–ª–µ—á—å –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑ —Ñ–∞–π–ª–∞."""
        try:
            content = md_file.read_text(encoding='utf-8')

            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
            lines = content.split('\n')
            description_lines = []

            skip_metadata = False
            found_content = False

            for line in lines:
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º frontmatter
                if line.strip() == '---':
                    skip_metadata = not skip_metadata
                    continue

                if skip_metadata:
                    continue

                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
                if line.startswith('#'):
                    found_content = True
                    continue

                # –°–æ–±–∏—Ä–∞–µ–º —Ç–µ–∫—Å—Ç
                if found_content and line.strip():
                    description_lines.append(line.strip())

                    if len(' '.join(description_lines)) > max_length:
                        break

            description = ' '.join(description_lines)

            # –û–±—Ä–µ–∑–∞–µ–º –¥–æ max_length
            if len(description) > max_length:
                description = description[:max_length].rsplit(' ', 1)[0] + '...'

            return description

        except Exception:
            return ""

    def scan_directory(self, directory: Path) -> List[Dict]:
        """–°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –∏ —Å–æ–±—Ä–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–∞—Ö."""
        files_info = []

        md_files = sorted(self._iter_markdown_files(directory))

        for md_file in md_files:
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ —Ñ–∞–π–ª—ã
            if md_file.name in ['README.md', 'index.md', 'SUMMARY.md']:
                continue

            title = self.extract_title(md_file)
            description = self.extract_description(md_file)
            size = md_file.stat().st_size

            files_info.append({
                'file': md_file,
                'name': md_file.name,
                'title': title,
                'description': description,
                'size': size,
                'relative_path': md_file.relative_to(self.docs_dir)
            })

            self.total_files += 1
            self.total_size += size

        return files_info

    def _is_excluded(self, path: Path) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø—É—Ç—å –≤ —Å–ø–∏—Å–∫–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–π."""
        try:
            rel_path = path.relative_to(self.project_root).as_posix()
        except ValueError:
            return False
        return any(self._match_pattern(rel_path, pattern) for pattern in self.exclude_patterns)

    def _match_pattern(self, path: str, pattern: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø—É—Ç–∏ —Å —à–∞–±–ª–æ–Ω–æ–º –∏—Å–∫–ª—é—á–µ–Ω–∏—è."""
        if pattern.endswith('/**'):
            prefix = pattern[:-3]
            return path.startswith(prefix)
        if pattern.endswith('/*'):
            prefix = pattern[:-2]
            if not path.startswith(prefix):
                return False
            remainder = path[len(prefix):]
            return remainder.startswith('/') and remainder.count('/') <= 1
        return path == pattern

    def _iter_markdown_files(self, directory: Path) -> Iterator[Path]:
        """–ò—Ç–µ—Ä–∞—Ü–∏—è –ø–æ Markdown —Ñ–∞–π–ª–∞–º –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å —É—á–µ—Ç–æ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–π."""
        for md_file in directory.glob("*.md"):
            if self._is_excluded(md_file):
                continue
            yield md_file

    def generate_category_index(self, category_dir: Path, files: List[Dict]) -> str:
        """–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–Ω–¥–µ–∫—Å –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏."""
        category_name = category_dir.name.replace('-', ' ').replace('_', ' ').title()

        lines = [
            f"# {category_name}",
            "",
            f"–î–æ–∫—É–º–µ–Ω—Ç—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ `{category_dir.name}/`",
            "",
            f"**–í—Å–µ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:** {len(files)}",
            "",
            "---",
            ""
        ]

        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã –ø–æ –ø—Ä–µ—Ñ–∏–∫—Å–∞–º (–¥–ª—è stories)
        if category_dir.name.startswith('epic-'):
            grouped = self._group_by_prefix(files)

            for prefix, group_files in grouped.items():
                if prefix:
                    lines.append(f"## {prefix}")
                    lines.append("")

                for file_info in group_files:
                    lines.append(f"### [{file_info['title']}](./{file_info['name']})")
                    lines.append("")
                    if file_info['description']:
                        lines.append(file_info['description'])
                        lines.append("")

        else:
            # –û–±—ã—á–Ω—ã–π —Å–ø–∏—Å–æ–∫
            for file_info in files:
                lines.append(f"## [{file_info['title']}](./{file_info['name']})")
                lines.append("")
                if file_info['description']:
                    lines.append(file_info['description'])
                    lines.append("")

        lines.append("---")
        lines.append("")
        lines.append(f"**–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ:** {self.last_updated}")

        return '\n'.join(lines)

    def _group_by_prefix(self, files: List[Dict]) -> Dict[str, List[Dict]]:
        """–ì—Ä—É–ø–ø–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª—ã –ø–æ –ø—Ä–µ—Ñ–∏–∫—Å–∞–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, 3.1, 3.2)."""
        groups = {}

        for file_info in files:
            # –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω —Ç–∏–ø–∞ "3.1.1" –∏–ª–∏ "2.3"
            match = re.match(r'^(\d+\.\d+)', file_info['name'])

            if match:
                prefix = match.group(1)
                if prefix not in groups:
                    groups[prefix] = []
                groups[prefix].append(file_info)
            else:
                if '' not in groups:
                    groups[''] = []
                groups[''].append(file_info)

        return dict(sorted(groups.items()))

    def update_main_index(self):
        """–û–±–Ω–æ–≤–∏—Ç—å –≥–ª–∞–≤–Ω—ã–π –∏–Ω–¥–µ–∫—Å docs/index.md."""
        self.print_header("üìù –û–ë–ù–û–í–õ–ï–ù–ò–ï –ì–õ–ê–í–ù–û–ì–û –ò–ù–î–ï–ö–°–ê")

        categories = {
            'architecture': '–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞',
            'decisions': '–†–µ—à–µ–Ω–∏—è',
            'stories': '–ò—Å—Ç–æ—Ä–∏–∏',
            'prd': 'PRD',
            'database': '–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö',
            'qa': 'QA',
            'epics': '–≠–ø–∏–∫–∏',
            'implementation': '–ò–º–ø–ª–µ–º–µ–Ω—Ç–∞—Ü–∏—è',
            'releases': '–†–µ–ª–∏–∑—ã'
        }

        category_stats: Dict[str, Dict[str, object]] = {}
        self.stats_by_category = {}

        for category_dir_name, category_title in categories.items():
            category_path = self.docs_dir / category_dir_name

            if not category_path.exists() or not category_path.is_dir():
                continue

            files = self.scan_directory(category_path)

            subdirs_count = sum(
                1
                for file_path in category_path.rglob("*.md")
                if not self._is_excluded(file_path)
            )

            category_stats[category_dir_name] = {
                'title': category_title,
                'count': subdirs_count,
                'files': files
            }

            self.stats_by_category[category_dir_name] = subdirs_count

        index_file = self.docs_dir / "index.md"

        if not index_file.exists():
            print(f"{Colors.YELLOW}‚ö†Ô∏è  –§–∞–π–ª index.md –Ω–µ –Ω–∞–π–¥–µ–Ω{Colors.RESET}")
            return

        content = index_file.read_text(encoding='utf-8')
        stats_section = self._generate_stats_section(category_stats)

        stats_pattern = r'## –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏.*?(?=##|\Z)'
        if re.search(stats_pattern, content, re.DOTALL):
            content = re.sub(stats_pattern, stats_section, content, flags=re.DOTALL)
        else:
            if not content.endswith("\n"):
                content += "\n"
            content += f"\n{stats_section}"

        date_pattern = r'\*\*–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ:\*\* \d{2}\.\d{2}\.\d{4}'
        content = re.sub(
            date_pattern,
            f"**–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ:** {self.last_updated}",
            content
        )

        if not self.dry_run:
            index_file.write_text(content, encoding='utf-8')
            print(f"{Colors.GREEN}‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω: {index_file.relative_to(self.project_root)}{Colors.RESET}")
        else:
            print(f"{Colors.YELLOW}[DRY RUN] –ë—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω: {index_file.relative_to(self.project_root)}{Colors.RESET}")

    def _generate_stats_section(self, category_stats: Dict[str, Dict[str, object]]) -> str:
        """–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–µ–∫—Ü–∏—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."""
        lines = [
            "## –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏",
            ""
        ]

        for category, info in sorted(category_stats.items()):
            lines.append(f"- **{info['title']}:** {info['count']} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")

        lines.append("")
        lines.append("## –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –ø—Ä–æ–µ–∫—Ç—É")

        return '\n'.join(lines)

    def update_category_readmes(self):
        """–û–±–Ω–æ–≤–∏—Ç—å README.md –≤ –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏."""
        self.print_header("üìö –û–ë–ù–û–í–õ–ï–ù–ò–ï README –í –ö–ê–¢–ï–ì–û–†–ò–Ø–•")

        categories = ['architecture', 'decisions', 'stories', 'prd', 'epics']

        for category_name in categories:
            category_dir = self.docs_dir / category_name

            if not category_dir.exists():
                continue

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–¥–∫–∞—Ç–∞–ª–æ–≥–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, epic-1, epic-2)
            for subdir in category_dir.iterdir():
                if subdir.is_dir():
                    if self._is_excluded(subdir):
                        continue
                    files = self.scan_directory(subdir)

                    if files:
                        readme_content = self.generate_category_index(subdir, files)
                        readme_file = subdir / "README.md"

                        if not self.dry_run:
                            readme_file.write_text(readme_content, encoding='utf-8')
                            print(f"{Colors.GREEN}‚úÖ –°–æ–∑–¥–∞–Ω/–æ–±–Ω–æ–≤–ª–µ–Ω: {readme_file.relative_to(self.docs_dir)}{Colors.RESET}")
                        else:
                            print(f"{Colors.YELLOW}[DRY RUN] –ë—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω: {readme_file.relative_to(self.docs_dir)}{Colors.RESET}")

    def print_statistics(self):
        """–í—ã–≤–µ—Å—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏."""
        self.print_header("üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –î–û–ö–£–ú–ï–ù–¢–ê–¶–ò–ò")

        print(f"{Colors.BOLD}–û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:{Colors.RESET}")
        print(f"  –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: {self.total_files}")
        print(f"  –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: {self.total_size / 1024:.1f} KB")
        print(f"  –î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {self.last_updated}")

        if self.stats_by_category:
            print(f"\n{Colors.BOLD}–ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:{Colors.RESET}")
            for category, count in sorted(self.stats_by_category.items()):
                print(f"  {category}: {count} —Ñ–∞–π–ª–æ–≤")

    def run(self, stats_only: bool = False):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–Ω–¥–µ–∫—Å–æ–≤."""
        if stats_only:
            # –¢–æ–ª—å–∫–æ —Å–∫–∞–Ω–∏—Ä—É–µ–º –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            for category_dir in self.docs_dir.iterdir():
                if category_dir.is_dir():
                    if self._is_excluded(category_dir):
                        continue
                    self.scan_directory(category_dir)
            self.print_statistics()
        else:
            # –ü–æ–ª–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
            self.update_main_index()
            self.update_category_readmes()
            self.print_statistics()

            if not self.dry_run:
                print(f"\n{Colors.GREEN}{Colors.BOLD}‚úÖ –ò–ù–î–ï–ö–°–´ –£–°–ü–ï–®–ù–û –û–ë–ù–û–í–õ–ï–ù–´{Colors.RESET}\n")
            else:
                print(f"\n{Colors.YELLOW}{Colors.BOLD}[DRY RUN] –ò–∑–º–µ–Ω–µ–Ω–∏—è –Ω–µ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã{Colors.RESET}\n")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    parser = argparse.ArgumentParser(
        description='–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∏–Ω–¥–µ–∫—Å–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ FREESPORT'
    )
    parser.add_argument(
        '--dry-run',
        action='store_true',
        help='–ü–æ–∫–∞–∑–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –±–µ–∑ –∑–∞–ø–∏—Å–∏ –≤ —Ñ–∞–π–ª—ã'
    )
    parser.add_argument(
        '--stats',
        action='store_true',
        help='–ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É'
    )
    parser.add_argument(
        '--exclude',
        nargs='*',
        default=[],
        help='–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è (–æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞)'
    )

    args = parser.parse_args()

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç–∏
    script_dir = Path(__file__).parent
    project_root = script_dir.parent
    docs_dir = project_root / "docs"

    if not docs_dir.exists():
        print(f"{Colors.RED}–û—à–∏–±–∫–∞: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è docs –Ω–µ –Ω–∞–π–¥–µ–Ω–∞{Colors.RESET}")
        sys.exit(1)

    # –°–æ–∑–¥–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∏ –∑–∞–ø—É—Å–∫–∞–µ–º
    exclude_patterns = load_exclude_patterns(project_root, args.exclude)

    generator = DocsIndexGenerator(docs_dir, dry_run=args.dry_run, exclude_patterns=exclude_patterns)
    generator.run(stats_only=args.stats)

    sys.exit(0)


if __name__ == '__main__':
    main()
