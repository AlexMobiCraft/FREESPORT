#!/usr/bin/env python3
"""
–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ FREESPORT Platform.

–§—É–Ω–∫—Ü–∏–∏:
- sync_api_spec_with_views()  ‚Äî —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ API (ViewSet/APIView) –≤ –∫–æ–¥–µ —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–µ–π
- sync_decisions_with_code()  ‚Äî —Å–≤–µ—Ä–∫–∞ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π —Å –∫–æ–¥–æ–≤–æ–π –±–∞–∑–æ–π
- update_index()              ‚Äî –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ docs_index_generator

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python scripts/docs_sync.py api-sync           # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è API ‚Üî Views (–æ—Ç—á–µ—Ç)
    python scripts/docs_sync.py decisions-sync     # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Ä–µ—à–µ–Ω–∏–π
    python scripts/docs_sync.py update-index       # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
    python scripts/docs_sync.py all                # –í—ã–ø–æ–ª–Ω–∏—Ç—å –≤—Å–µ —à–∞–≥–∏

–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
    --apply   ‚Äî –ø—Ä–∏–º–µ–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è, –≥–¥–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ç–æ–ª—å–∫–æ –æ—Ç—á–µ—Ç)
    --exclude ‚Äî –ø—É—Ç–∏-–∏—Å–∫–ª—é—á–µ–Ω–∏—è (–æ—Ç –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞), –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç /** –∏ /*
"""

from __future__ import annotations

import argparse
import importlib.util
import os
import re
import sys
from pathlib import Path
from typing import Dict, List, Set, Tuple

from exclude_utils import load_exclude_patterns


class Colors:
    """ANSI —Ü–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞."""

    RED = "\033[91m"
    GREEN = "\033[92m"
    YELLOW = "\033[93m"
    BLUE = "\033[94m"
    CYAN = "\033[96m"
    RESET = "\033[0m"
    BOLD = "\033[1m"


def _print_header(text: str) -> None:
    """–ü–µ—á–∞—Ç–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü–∏–∏ –≤ –∫–æ–Ω—Å–æ–ª—å."""
    print(f"\n{Colors.BOLD}{Colors.CYAN}{'=' * 80}{Colors.RESET}")
    print(f"{Colors.BOLD}{Colors.CYAN}{text}{Colors.RESET}")
    print(f"{Colors.BOLD}{Colors.CYAN}{'=' * 80}{Colors.RESET}\n")


def _is_excluded(project_root: Path, path: Path, patterns: List[str]) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∏—Å–∫–ª—é—á–µ–Ω –ª–∏ –ø—É—Ç—å –Ω–∞ –æ—Å–Ω–æ–≤–∞–Ω–∏–∏ —à–∞–±–ª–æ–Ω–æ–≤ –∏—Å–∫–ª—é—á–µ–Ω–∏–π."""
    try:
        rel = path.relative_to(project_root).as_posix()
    except ValueError:
        return False

    def match(p: str, pat: str) -> bool:
        if pat.endswith("/**"):
            prefix = pat[:-3]
            return p.startswith(prefix)
        if pat.endswith("/*"):
            prefix = pat[:-2]
            if not p.startswith(prefix):
                return False
            remainder = p[len(prefix) :]
            return remainder.startswith("/") and remainder.count("/") <= 1
        return p == pat

    return any(match(rel, pat) for pat in patterns)


def _collect_api_endpoints(
    backend_dir: Path, project_root: Path, exclude_patterns: List[str]
) -> Set[str]:
    """–°–∫–∞–Ω–∏—Ä—É–µ—Ç backend –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–æ –∏–º–µ–Ω –∫–ª–∞—Å—Å–æ–≤ ViewSet/APIView.

    –ò—â–µ—Ç –≤ –º–æ–¥—É–ª—è—Ö `views.py`, –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è—Ö `views/`, –∞ —Ç–∞–∫–∂–µ –≤ `urls.py` —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ DRF router –∏ as_view.
    """
    endpoints: Set[str] = set()
    excluded_dirs = {"venv", "htmlcov", ".mypy_cache", "__pycache__"}

    if not backend_dir.exists():
        return endpoints

    for py in backend_dir.rglob("*.py"):
        if py.name == "__init__.py":
            continue
        parts = None
        try:
            parts = py.relative_to(backend_dir).parts
        except Exception:
            continue
        if any(part in excluded_dirs for part in parts):
            continue
        if "apps" not in parts:
            continue
        if _is_excluded(project_root, py, exclude_patterns):
            continue

        try:
            content = py.read_text(encoding="utf-8")
        except Exception:
            continue

        is_views_module = any(p == "views" for p in parts[:-1]) or py.name == "views.py"
        if is_views_module:
            class_pattern = r"class\s+(\w+)\s*\(([^)]*)\)"
            for m in re.finditer(class_pattern, content):
                class_name = m.group(1)
                base_classes = m.group(2)
                if any(b in base_classes for b in ("ViewSet", "APIView")):
                    endpoints.add(class_name)

        if py.name == "urls.py":
            router_pattern = (
                r"router\.register\(\s*r?['\"]([^'\"]+)['\"]\s*,\s*([\w\.]+)"
            )
            for m in re.finditer(router_pattern, content):
                view_ref = m.group(2)
                class_name = view_ref.split(".")[-1]
                if class_name:
                    endpoints.add(class_name)

            path_pattern = (
                r"(?:path|re_path)\(\s*['\"][^'\"]+['\"]\s*,\s*([\w\.]+)\.as_view"
            )
            for m in re.finditer(path_pattern, content):
                view_ref = m.group(1)
                class_name = view_ref.split(".")[-1]
                if class_name:
                    endpoints.add(class_name)

    return endpoints


def _collect_doc_endpoints(docs_dir: Path) -> Set[str]:
    """–°–∫–∞–Ω–∏—Ä—É–µ—Ç –∫–ª—é—á–µ–≤—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã API –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞–±–æ—Ä —É–ø–æ–º—è–Ω—É—Ç—ã—Ö –∫–ª–∞—Å—Å–æ–≤ ViewSet/APIView."""
    documented: Set[str] = set()
    candidates = [docs_dir / "api-views-documentation.md", docs_dir / "api-spec.yaml"]
    for f in candidates:
        if not f.exists():
            continue
        try:
            content = f.read_text(encoding="utf-8")
        except Exception:
            continue
        for m in re.finditer(r"(\w+(?:ViewSet|APIView|View))", content):
            documented.add(m.group(1))
    return documented


def sync_api_spec_with_views(
    project_root: Path, apply: bool, exclude_patterns: List[str]
) -> Tuple[Set[str], Set[str]]:
    """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç API —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—é —Å –∫–æ–¥–æ–º –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–π.

    - –°–æ–±–∏—Ä–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ –∏–∑ –∫–æ–¥–∞ (`backend/`).
    - –°–æ–±–∏—Ä–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–¥–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ –∏–∑ `docs/`.
    - –ü–µ—á–∞—Ç–∞–µ—Ç —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏—è. –ü—Ä–∏ `apply=True` –º–æ–∂–µ—Ç –¥–æ–ø–∏—Å—ã–≤–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏ –≤ `docs/api-views-documentation.md`.
    """
    _print_header("üîÑ –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø API SPEC ‚Üî VIEWS")

    backend_dir = project_root / "backend"
    docs_dir = project_root / "docs"

    code_eps = _collect_api_endpoints(backend_dir, project_root, exclude_patterns)
    doc_eps = _collect_doc_endpoints(docs_dir)

    undocumented = sorted(code_eps - doc_eps)
    stale = sorted(doc_eps - code_eps)

    print(f"–ù–∞–π–¥–µ–Ω–æ –≤ –∫–æ–¥–µ: {len(code_eps)}; –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏: {len(doc_eps)}")
    if undocumented:
        print(
            f"{Colors.YELLOW}–ù–µ–¥–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–ª–∞—Å—Å—ã ({len(undocumented)}):{Colors.RESET}"
        )
        for name in undocumented[:25]:
            print(f"  - {name}")
        if len(undocumented) > 25:
            print(f"  ... –∏ –µ—â–µ {len(undocumented) - 25}")
    else:
        print(f"{Colors.GREEN}–í—Å–µ –∫–ª–∞—Å—Å—ã –ø–æ–∫—Ä—ã—Ç—ã –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–µ–π{Colors.RESET}")

    if stale:
        print(
            f"{Colors.YELLOW}–ï—Å—Ç—å –∫–ª–∞—Å—Å—ã –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏, –Ω–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –≤ –∫–æ–¥–µ ({len(stale)}):{Colors.RESET}"
        )
        for name in stale[:25]:
            print(f"  - {name}")
        if len(stale) > 25:
            print(f"  ... –∏ –µ—â–µ {len(stale) - 25}")

    # –ü—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ ‚Äî –¥–æ–ø–∏—Å—ã–≤–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–æ—á–Ω—É—é —Å–µ–∫—Ü–∏—é –≤ –∫–æ–Ω–µ—Ü api-views-documentation.md
    if apply and undocumented:
        target = docs_dir / "api-views-documentation.md"
        if target.exists():
            try:
                with target.open("a", encoding="utf-8") as f:
                    f.write("\n\n---\n\n")
                    f.write("## –°–ø–∏—Å–æ–∫ —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤, —Ç—Ä–µ–±—É—é—â–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è\n\n")
                    for name in undocumented:
                        f.write(f"- [ ] {name}\n")
                print(
                    f"{Colors.GREEN}–î–æ–±–∞–≤–ª–µ–Ω—ã –ø—É–Ω–∫—Ç—ã –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ {target.relative_to(project_root)}{Colors.RESET}"
                )
            except Exception as e:
                print(
                    f"{Colors.RED}–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ {target.name}: {e}{Colors.RESET}"
                )
        else:
            print(
                f"{Colors.YELLOW}–§–∞–π–ª {target.relative_to(project_root)} –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫ –∞–≤—Ç–æ–¥–æ–±–∞–≤–ª–µ–Ω–∏—è{Colors.RESET}"
            )

    return set(undocumented), set(stale)


def _extract_decision_ids(decisions_dir: Path) -> Set[str]:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã —Ä–µ—à–µ–Ω–∏–π (–ø–æ —Å—Ö–µ–º–µ —Ñ–∞–π–ª–æ–≤, –Ω–∞–ø—Ä–∏–º–µ—Ä story-2.1-*, decision-*)."""
    ids: Set[str] = set()
    if not decisions_dir.exists():
        return ids
    for md in decisions_dir.glob("*.md"):
        stem = md.stem
        # –ü—Ä–∏–º–µ—Ä—ã: story-2.1-api-documentation-decisions, decision-2024-10-db-user
        m = re.match(r"([a-z]+[-\d\.]+).*", stem)
        if m:
            ids.add(m.group(1))
    return ids


def _scan_code_for_decision_refs(
    project_root: Path, exclude_patterns: List[str]
) -> Set[str]:
    """–ì—Ä—É–±—ã–π –ø–æ–∏—Å–∫ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤ —Ä–µ—à–µ–Ω–∏–π –≤ –∫–æ–¥–µ (–ø–æ —Å—Ç—Ä–æ–∫–æ–≤—ã–º –≤—Ö–æ–∂–¥–µ–Ω–∏—è–º)."""
    refs: Set[str] = set()
    for py in (project_root / "backend").rglob("*.py"):
        if _is_excluded(project_root, py, exclude_patterns):
            continue
        try:
            content = py.read_text(encoding="utf-8")
        except Exception:
            continue
        for m in re.finditer(
            r"(story-\d+\.\d+|decision-\d{4}-\d{2}-[\w-]+)", content, re.IGNORECASE
        ):
            refs.add(m.group(1))
    return refs


def sync_decisions_with_code(
    project_root: Path, apply: bool, exclude_patterns: List[str]
) -> Tuple[Set[str], Set[str]]:
    """–°–≤–µ—Ä—è–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏–∑ `docs/decisions/` —Å —É–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏ –≤ –∫–æ–¥–µ.

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ—Ä—Ç–µ–∂ (unreferenced, missing_in_docs):
    - unreferenced ‚Äî —Ä–µ—à–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å –≤ docs, –Ω–æ –Ω–µ —É–ø–æ–º–∏–Ω–∞—é—Ç—Å—è –≤ –∫–æ–¥–µ;
    - missing_in_docs ‚Äî –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã, —É–ø–æ–º—è–Ω—É—Ç—ã–µ –≤ –∫–æ–¥–µ, –Ω–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞.

    –ü—Ä–∏ `apply=True` –¥–æ–±–∞–≤–ª—è–µ—Ç —á–µ–∫-–ª–∏—Å—Ç –≤ `docs/decisions/README.md` –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –∫–∞—Ç–∞–ª–æ–≥–∞.
    """
    _print_header("üß≠ –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –†–ï–®–ï–ù–ò–ô ‚Üî –ö–û–î")

    decisions_dir = project_root / "docs" / "decisions"

    doc_ids = _extract_decision_ids(decisions_dir)
    code_refs = _scan_code_for_decision_refs(project_root, exclude_patterns)

    unreferenced = sorted(doc_ids - code_refs)
    missing_in_docs = sorted(code_refs - doc_ids)

    print(f"–í –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö —Ä–µ—à–µ–Ω–∏–π: {len(doc_ids)}; —É–ø–æ–º–∏–Ω–∞–Ω–∏–π –≤ –∫–æ–¥–µ: {len(code_refs)}")
    if unreferenced:
        print(
            f"{Colors.YELLOW}–†–µ—à–µ–Ω–∏—è –±–µ–∑ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π –≤ –∫–æ–¥–µ ({len(unreferenced)}):{Colors.RESET}"
        )
        for i in unreferenced[:20]:
            print(f"  - {i}")
        if len(unreferenced) > 20:
            print(f"  ... –∏ –µ—â–µ {len(unreferenced) - 20}")
    else:
        print(
            f"{Colors.GREEN}–í—Å–µ —Ä–µ—à–µ–Ω–∏—è –∏–º–µ—é—Ç —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ –∫–æ–¥–µ –∏–ª–∏ –Ω–µ —Ç—Ä–µ–±—É—é—Ç –∏—Ö{Colors.RESET}"
        )

    if missing_in_docs:
        print(
            f"{Colors.YELLOW}–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã, —É–ø–æ–º—è–Ω—É—Ç—ã–µ –≤ –∫–æ–¥–µ, –Ω–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –≤ docs ({len(missing_in_docs)}):{Colors.RESET}"
        )
        for i in missing_in_docs[:20]:
            print(f"  - {i}")
        if len(missing_in_docs) > 20:
            print(f"  ... –∏ –µ—â–µ {len(missing_in_docs) - 20}")

    if apply and missing_in_docs:
        readme = decisions_dir / "README.md"
        if decisions_dir.exists() and readme.exists():
            try:
                with readme.open("a", encoding="utf-8") as f:
                    f.write("\n\n---\n\n")
                    f.write("## –¢—Ä–µ–±—É—é—Ç –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤\n\n")
                    for i in missing_in_docs:
                        f.write(f"- [ ] {i}\n")
                print(
                    f"{Colors.GREEN}–î–æ–±–∞–≤–ª–µ–Ω—ã —á–µ–∫-–ª–∏—Å—Ç—ã –≤ {readme.relative_to(project_root)}{Colors.RESET}"
                )
            except Exception as e:
                print(f"{Colors.RED}–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ README: {e}{Colors.RESET}")
        else:
            print(
                f"{Colors.YELLOW}–ö–∞—Ç–∞–ª–æ–≥ –∏–ª–∏ README –¥–ª—è —Ä–µ—à–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω ‚Äî –ø—Ä–æ–ø—É—Å–∫ –∞–≤—Ç–æ–¥–æ–±–∞–≤–ª–µ–Ω–∏—è{Colors.RESET}"
            )

    return set(unreferenced), set(missing_in_docs)


def _load_docs_index_generator(project_root: Path):
    """–î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –∑–∞–≥—Ä—É–∂–∞–µ—Ç –º–æ–¥—É–ª—å `docs_index_generator.py` –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞—Å—Å DocsIndexGenerator.

    –≠—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—É—é –ª–æ–≥–∏–∫—É –±–µ–∑ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–¥–∞ –∏ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è PYTHONPATH.
    """
    script_path = project_root / "scripts" / "docs_index_generator.py"
    spec = importlib.util.spec_from_file_location("docs_index_generator", script_path)
    if spec is None or spec.loader is None:
        raise RuntimeError("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å docs_index_generator.py")
    module = importlib.util.module_from_spec(spec)
    spec.loader.exec_module(module)  # type: ignore[attr-defined]
    if not hasattr(module, "DocsIndexGenerator"):
        raise RuntimeError("–í docs_index_generator.py –Ω–µ –Ω–∞–π–¥–µ–Ω DocsIndexGenerator")
    return module.DocsIndexGenerator


def update_index(
    project_root: Path, dry_run: bool, exclude_patterns: List[str]
) -> None:
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –∏–Ω–¥–µ–∫—Å—ã –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏, –∏—Å–ø–æ–ª—å–∑—É—è `DocsIndexGenerator` –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞.

    –í—ã–ø–æ–ª–Ω—è–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞, README –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –∏ –ø–µ—á–∞—Ç–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.
    """
    _print_header("üìù –û–ë–ù–û–í–õ–ï–ù–ò–ï –ò–ù–î–ï–ö–°–û–í –î–û–ö–£–ú–ï–ù–¢–ê–¶–ò–ò")
    docs_dir = project_root / "docs"
    if not docs_dir.exists():
        print(f"{Colors.RED}–û—à–∏–±–∫–∞: –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è docs –Ω–µ –Ω–∞–π–¥–µ–Ω–∞{Colors.RESET}")
        sys.exit(1)

    DocsIndexGenerator = _load_docs_index_generator(project_root)
    generator = DocsIndexGenerator(
        docs_dir, dry_run=dry_run, exclude_patterns=exclude_patterns
    )
    generator.run(stats_only=False)


def main() -> None:
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ CLI –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏."""
    parser = argparse.ArgumentParser(description="–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ FREESPORT")
    parser.add_argument(
        "command",
        choices=["api-sync", "decisions-sync", "update-index", "all"],
        help="–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è",
    )
    parser.add_argument(
        "--apply", action="store_true", help="–ü—Ä–∏–º–µ–Ω—è—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è (–≥–¥–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è)"
    )
    parser.add_argument(
        "--exclude",
        nargs="*",
        default=[],
        help="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è (–æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞)",
    )

    args = parser.parse_args()

    script_dir = Path(__file__).parent
    project_root = script_dir.parent

    exclude_patterns = load_exclude_patterns(project_root, args.exclude)

    if args.command in ("api-sync", "all"):
        sync_api_spec_with_views(
            project_root, apply=args.apply, exclude_patterns=exclude_patterns
        )
    if args.command in ("decisions-sync", "all"):
        sync_decisions_with_code(
            project_root, apply=args.apply, exclude_patterns=exclude_patterns
        )
    if args.command in ("update-index", "all"):
        # –î–ª—è update-index –∏—Å–ø–æ–ª—å–∑—É–µ–º apply –∫–∞–∫ –æ–±—Ä–∞—Ç–Ω—ã–π dry_run
        update_index(
            project_root, dry_run=not args.apply, exclude_patterns=exclude_patterns
        )


if __name__ == "__main__":
    main()
