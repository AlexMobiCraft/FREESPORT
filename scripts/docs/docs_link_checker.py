#!/usr/bin/env python3
"""
–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–æ—Å—Å-—Å—Å—ã–ª–æ–∫ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ FREESPORT Platform.

–ü—Ä–æ–≤–µ—Ä—è–µ—Ç:
- Markdown —Å—Å—ã–ª–∫–∏ –Ω–∞ –ª–æ–∫–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã
- –Ø–∫–æ—Ä—è (anchors) –≤ —Å—Å—ã–ª–∫–∞—Ö
- –í–Ω–µ—à–Ω–∏–µ URL (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
- –¶–∏–∫–ª–∏—á–µ—Å–∫–∏–µ —Å—Å—ã–ª–∫–∏

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python scripts/docs_link_checker.py                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö —Å—Å—ã–ª–æ–∫
    python scripts/docs_link_checker.py --external     # –í–∫–ª—é—á–∞—è –≤–Ω–µ—à–Ω–∏–µ URL
    python scripts/docs_link_checker.py --fix          # –ê–≤—Ç–æ–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ (–≥–¥–µ –≤–æ–∑–º–æ–∂–Ω–æ)
"""

import re
import sys
from pathlib import Path
from typing import List, Dict, Set, Tuple, Optional
import argparse

from exclude_utils import load_exclude_patterns


class Colors:
    """ANSI —Ü–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞."""
    RED = '\033[91m'
    GREEN = '\033[92m'
    YELLOW = '\033[93m'
    BLUE = '\033[94m'
    CYAN = '\033[96m'
    RESET = '\033[0m'
    BOLD = '\033[1m'


class LinkChecker:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Å—ã–ª–æ–∫ –≤ markdown –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö."""

    def __init__(self, docs_dir: Path, check_external: bool = False, exclude_patterns: List[str] | None = None):
        self.docs_dir = docs_dir
        self.project_root = docs_dir.parent
        self.check_external = check_external
        self.errors: List[Dict] = []
        self.warnings: List[Dict] = []
        self.checked_files = 0
        self.total_links = 0
        self.exclude_patterns = list(exclude_patterns or [])

    def print_header(self, text: str):
        """–ü–µ—á–∞—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∞."""
        print(f"\n{Colors.BOLD}{Colors.CYAN}{'=' * 80}{Colors.RESET}")
        print(f"{Colors.BOLD}{Colors.CYAN}{text}{Colors.RESET}")
        print(f"{Colors.BOLD}{Colors.CYAN}{'=' * 80}{Colors.RESET}\n")

    def extract_links(self, content: str, file_path: Path) -> List[Dict]:
        """–ò–∑–≤–ª–µ—á—å –≤—Å–µ —Å—Å—ã–ª–∫–∏ –∏–∑ markdown —Ñ–∞–π–ª–∞."""
        links = []

        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å—Å—ã–ª–æ–∫
        patterns = [
            # [text](url)
            (r'\[([^\]]+)\]\(([^)]+)\)', 'inline'),
            # [text][ref] –∏ [ref]: url
            (r'\[([^\]]+)\]\[([^\]]+)\]', 'reference'),
            # ![alt](image)
            (r'!\[([^\]]*)\]\(([^)]+)\)', 'image'),
        ]

        for pattern, link_type in patterns:
            for match in re.finditer(pattern, content, re.MULTILINE):
                text = match.group(1)
                url = match.group(2)

                # –ù–∞—Ö–æ–¥–∏–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏
                line_num = content[:match.start()].count('\n') + 1

                links.append({
                    'text': text,
                    'url': url,
                    'type': link_type,
                    'line': line_num,
                    'file': file_path
                })

        return links

    def is_external_url(self, url: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ URL –≤–Ω–µ—à–Ω–∏–º."""
        return url.startswith(('http://', 'https://', 'mailto:', 'ftp://'))

    def _is_excluded(self, path: Path) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –≤—Ö–æ–¥–∏—Ç –ª–∏ –ø—É—Ç—å –≤ —Å–ø–∏—Å–æ–∫ –∏—Å–∫–ª—é—á–µ–Ω–∏–π."""
        try:
            rel_path = path.relative_to(self.project_root).as_posix()
        except ValueError:
            return False
        return any(self._match_pattern(rel_path, pattern) for pattern in self.exclude_patterns)

    def _match_pattern(self, path: str, pattern: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø—É—Ç–∏ —Å —à–∞–±–ª–æ–Ω–æ–º –∏—Å–∫–ª—é—á–µ–Ω–∏—è."""
        if pattern.endswith('/**'):
            prefix = pattern[:-3]
            return path.startswith(prefix)
        if pattern.endswith('/*'):
            prefix = pattern[:-2]
            if not path.startswith(prefix):
                return False
            remainder = path[len(prefix):]
            return remainder.startswith('/') and remainder.count('/') <= 1
        return path == pattern

    def resolve_link_path(self, link_url: str, source_file: Path) -> Optional[Path]:
        """–†–∞–∑—Ä–µ—à–∏—Ç—å –ø—É—Ç—å —Å—Å—ã–ª–∫–∏ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞."""
        # –£–±–∏—Ä–∞–µ–º —è–∫–æ—Ä—å
        clean_url = link_url.split('#')[0]

        if not clean_url:  # –¢–æ–ª—å–∫–æ —è–∫–æ—Ä—å
            return source_file

        # –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å
        if clean_url.startswith('./') or clean_url.startswith('../'):
            target = (source_file.parent / clean_url).resolve()
        # –ê–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –æ—Ç docs/
        elif clean_url.startswith('/'):
            target = (self.docs_dir / clean_url.lstrip('/')).resolve()
        # –ü—É—Ç—å –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ docs/
        else:
            target = (self.docs_dir / clean_url).resolve()

        return target

    def extract_anchors(self, content: str) -> Set[str]:
        """–ò–∑–≤–ª–µ—á—å –≤—Å–µ —è–∫–æ—Ä—è (–∑–∞–≥–æ–ª–æ–≤–∫–∏) –∏–∑ markdown —Ñ–∞–π–ª–∞."""
        anchors = set()

        # –ó–∞–≥–æ–ª–æ–≤–∫–∏ markdown
        header_pattern = r'^#+\s+(.+)$'
        for match in re.finditer(header_pattern, content, re.MULTILINE):
            header_text = match.group(1).strip()

            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≤ —è–∫–æ—Ä—å (–∫–∞–∫ —ç—Ç–æ –¥–µ–ª–∞–µ—Ç GitHub/GitLab)
            anchor = header_text.lower()
            anchor = re.sub(r'[^\w\s-]', '', anchor)  # –£–±–∏—Ä–∞–µ–º —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã
            anchor = re.sub(r'[\s]+', '-', anchor)  # –ü—Ä–æ–±–µ–ª—ã –≤ –¥–µ—Ñ–∏—Å—ã
            anchor = anchor.strip('-')

            anchors.add(anchor)

        return anchors

    def check_link(self, link: Dict) -> Optional[Dict]:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–¥–Ω—É —Å—Å—ã–ª–∫—É."""
        url = link['url']

        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤–Ω–µ—à–Ω–∏–µ URL –µ—Å–ª–∏ –Ω–µ –≤–∫–ª—é—á–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞
        if self.is_external_url(url):
            if not self.check_external:
                return None
            # TODO: –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –≤–Ω–µ—à–Ω–∏—Ö URL —á–µ—Ä–µ–∑ requests
            return None

        # –†–∞–∑—Ä–µ—à–∞–µ–º –ø—É—Ç—å
        target_path = self.resolve_link_path(url, link['file'])

        if not target_path:
            return {
                'type': 'error',
                'message': f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑—Ä–µ—à–∏—Ç—å –ø—É—Ç—å: {url}",
                'link': link
            }

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
        if not target_path.exists():
            return {
                'type': 'error',
                'message': f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {target_path.relative_to(self.project_root)}",
                'link': link
            }

        if self._is_excluded(target_path):
            return None

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —è–∫–æ—Ä—å, –µ—Å–ª–∏ –µ—Å—Ç—å
        if '#' in url:
            anchor = url.split('#')[1]

            try:
                target_content = target_path.read_text(encoding='utf-8')
                available_anchors = self.extract_anchors(target_content)

                if anchor not in available_anchors:
                    return {
                        'type': 'warning',
                        'message': f"–Ø–∫–æ—Ä—å '#{anchor}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ {target_path.name}",
                        'link': link,
                        'available_anchors': list(available_anchors)[:5]
                    }
            except Exception as e:
                return {
                    'type': 'warning',
                    'message': f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —è–∫–æ—Ä—è: {e}",
                    'link': link
                }

        return None  # –°—Å—ã–ª–∫–∞ –≤–∞–ª–∏–¥–Ω–∞

    def check_all_links(self) -> Tuple[int, int]:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Å–µ —Å—Å—ã–ª–∫–∏ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏."""
        self.print_header("üîó –ü–†–û–í–ï–†–ö–ê –ö–†–û–°–°-–°–°–´–õ–û–ö –í –î–û–ö–£–ú–ï–ù–¢–ê–¶–ò–ò")

        md_files = [f for f in self.docs_dir.rglob("*.md") if not self._is_excluded(f)]
        self.checked_files = len(md_files)

        print(f"–ù–∞–π–¥–µ–Ω–æ {len(md_files)} markdown —Ñ–∞–π–ª–æ–≤\n")

        for md_file in md_files:
            try:
                content = md_file.read_text(encoding='utf-8')
                links = self.extract_links(content, md_file)
                self.total_links += len(links)

                for link in links:
                    if self._is_excluded(link['file']):
                        continue

                    issue = self.check_link(link)

                    if issue:
                        if issue['type'] == 'error':
                            self.errors.append(issue)
                        else:
                            self.warnings.append(issue)

            except Exception as e:
                self.warnings.append({
                    'type': 'warning',
                    'message': f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {e}",
                    'link': {'file': md_file, 'line': 0}
                })

        return len(self.errors), len(self.warnings)

    def print_results(self):
        """–í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø—Ä–æ–≤–µ—Ä–∫–∏."""
        print(f"\n{Colors.BOLD}üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–†–û–í–ï–†–ö–ò{Colors.RESET}\n")

        print(f"–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {self.checked_files}")
        print(f"–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ —Å—Å—ã–ª–æ–∫: {self.total_links}")
        print(f"{Colors.RED}–û—à–∏–±–æ–∫: {len(self.errors)}{Colors.RESET}")
        print(f"{Colors.YELLOW}–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: {len(self.warnings)}{Colors.RESET}")

        # –í—ã–≤–æ–¥ –æ—à–∏–±–æ–∫
        if self.errors:
            print(f"\n{Colors.RED}{Colors.BOLD}‚ùå –û–®–ò–ë–ö–ò:{Colors.RESET}\n")

            for i, error in enumerate(self.errors[:20], 1):
                link = error['link']
                relative_path = link['file'].relative_to(self.docs_dir)

                print(f"{i}. {Colors.BOLD}{relative_path}:{link['line']}{Colors.RESET}")
                print(f"   –°—Å—ã–ª–∫–∞: [{link['text']}]({link['url']})")
                print(f"   {Colors.RED}–û—à–∏–±–∫–∞: {error['message']}{Colors.RESET}\n")

            if len(self.errors) > 20:
                print(f"... –∏ –µ—â–µ {len(self.errors) - 20} –æ—à–∏–±–æ–∫\n")

        # –í—ã–≤–æ–¥ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π
        if self.warnings:
            print(f"\n{Colors.YELLOW}{Colors.BOLD}‚ö†Ô∏è  –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø:{Colors.RESET}\n")

            for i, warning in enumerate(self.warnings[:10], 1):
                link = warning['link']
                relative_path = link['file'].relative_to(self.docs_dir)

                print(f"{i}. {Colors.BOLD}{relative_path}:{link['line']}{Colors.RESET}")
                print(f"   –°—Å—ã–ª–∫–∞: [{link['text']}]({link['url']})")
                print(f"   {Colors.YELLOW}{warning['message']}{Colors.RESET}")

                if 'available_anchors' in warning:
                    print(f"   –î–æ—Å—Ç—É–ø–Ω—ã–µ —è–∫–æ—Ä—è: {', '.join(warning['available_anchors'])}")

                print()

            if len(self.warnings) > 10:
                print(f"... –∏ –µ—â–µ {len(self.warnings) - 10} –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π\n")

        # –ò—Ç–æ–≥
        if not self.errors and not self.warnings:
            print(f"\n{Colors.GREEN}{Colors.BOLD}‚úÖ –í–°–ï –°–°–´–õ–ö–ò –í–ê–õ–ò–î–ù–´!{Colors.RESET}\n")
            return True
        elif self.errors:
            print(f"\n{Colors.RED}{Colors.BOLD}‚ùå –ù–ê–ô–î–ï–ù–´ –ö–†–ò–¢–ò–ß–ù–´–ï –û–®–ò–ë–ö–ò{Colors.RESET}\n")
            return False
        else:
            print(f"\n{Colors.YELLOW}{Colors.BOLD}‚ö†Ô∏è  –ü–†–û–í–ï–†–ö–ê –ü–†–û–ô–î–ï–ù–ê –° –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø–ú–ò{Colors.RESET}\n")
            return True

    def generate_report(self, output_file: Path):
        """–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç –≤ markdown —Ñ–æ—Ä–º–∞—Ç–µ."""
        report_lines = [
            "# –û—Ç—á–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Å—ã–ª–æ–∫ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏",
            "",
            f"**–î–∞—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏:** {Path(__file__).stat().st_mtime}",
            f"**–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ —Ñ–∞–π–ª–æ–≤:** {self.checked_files}",
            f"**–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ —Å—Å—ã–ª–æ–∫:** {self.total_links}",
            f"**–û—à–∏–±–æ–∫:** {len(self.errors)}",
            f"**–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π:** {len(self.warnings)}",
            "",
        ]

        if self.errors:
            report_lines.append("## ‚ùå –û—à–∏–±–∫–∏")
            report_lines.append("")

            for error in self.errors:
                link = error['link']
                relative_path = link['file'].relative_to(self.docs_dir)
                report_lines.append(f"### {relative_path}:{link['line']}")
                report_lines.append(f"- **–°—Å—ã–ª–∫–∞:** `[{link['text']}]({link['url']})`")
                report_lines.append(f"- **–û—à–∏–±–∫–∞:** {error['message']}")
                report_lines.append("")

        if self.warnings:
            report_lines.append("## ‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è")
            report_lines.append("")

            for warning in self.warnings:
                link = warning['link']
                relative_path = link['file'].relative_to(self.docs_dir)
                report_lines.append(f"### {relative_path}:{link['line']}")
                report_lines.append(f"- **–°—Å—ã–ª–∫–∞:** `[{link['text']}]({link['url']})`")
                report_lines.append(f"- **–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ:** {warning['message']}")
                report_lines.append("")

        output_file.write_text('\n'.join(report_lines), encoding='utf-8')
        print(f"\n{Colors.GREEN}–û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {output_file}{Colors.RESET}")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    parser = argparse.ArgumentParser(
        description='–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–æ—Å—Å-—Å—Å—ã–ª–æ–∫ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ FREESPORT'
    )
    parser.add_argument(
        '--external',
        action='store_true',
        help='–ü—Ä–æ–≤–µ—Ä—è—Ç—å –≤–Ω–µ—à–Ω–∏–µ URL (–º–µ–¥–ª–µ–Ω–Ω–æ)'
    )
    parser.add_argument(
        '--report',
        type=str,
        help='–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç—á–µ—Ç –≤ —Ñ–∞–π–ª'
    )

    parser.add_argument(
        '--exclude',
        nargs='*',
        default=[],
        help='–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è (–æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞)'
    )

    args = parser.parse_args()

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç–∏
    script_dir = Path(__file__).parent
    project_root = script_dir.parent
    docs_dir = project_root / "docs"

    if not docs_dir.exists():
        print(f"{Colors.RED}–û—à–∏–±–∫–∞: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è docs –Ω–µ –Ω–∞–π–¥–µ–Ω–∞{Colors.RESET}")
        sys.exit(1)

    # –°–æ–∑–¥–∞–µ–º checker –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
    exclude_patterns = load_exclude_patterns(project_root, args.exclude)

    checker = LinkChecker(docs_dir, check_external=args.external, exclude_patterns=exclude_patterns)
    checker.check_all_links()

    # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    success = checker.print_results()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if args.report:
        report_path = Path(args.report)
        checker.generate_report(report_path)

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–¥ –≤—ã—Ö–æ–¥–∞
    sys.exit(0 if success else 1)


if __name__ == '__main__':
    main()
