"""
–®–∞–±–ª–æ–Ω Django –º–æ–¥–µ–ª–∏ –¥–ª—è FREESPORT
–°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∏ –∞–¥–∞–ø—Ç–∏—Ä—É–π—Ç–µ –ø–æ–¥ —Å–≤–æ—é —Å—É—â–Ω–æ—Å—Ç—å
"""
from django.db import models
from django.core.validators import MinValueValidator
from django.utils.text import slugify


class YourModel(models.Model):
    """
    –û–ø–∏—Å–∞–Ω–∏–µ –≤–∞—à–µ–π –º–æ–¥–µ–ª–∏

    TODO: –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≥–æ, —á—Ç–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —ç—Ç–∞ –º–æ–¥–µ–ª—å
    """

    # ===== –û–°–ù–û–í–ù–´–ï –ü–û–õ–Ø =====
    name = models.CharField("–ù–∞–∑–≤–∞–Ω–∏–µ", max_length=255)
    slug = models.SlugField("Slug", max_length=255, unique=True, blank=True)
    description = models.TextField("–û–ø–∏—Å–∞–Ω–∏–µ", blank=True)

    # TODO: –î–æ–±–∞–≤—å—Ç–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –ø–æ–ª—è –≤–∞—à–µ–π –º–æ–¥–µ–ª–∏ –∑–¥–µ—Å—å
    # –ü—Ä–∏–º–µ—Ä—ã —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –ø–æ–ª–µ–π:

    # –¢–µ–∫—Å—Ç–æ–≤—ã–µ –ø–æ–ª—è
    # short_text = models.CharField("–ö–æ—Ä–æ—Ç–∫–∏–π —Ç–µ–∫—Å—Ç", max_length=100, blank=True)
    # long_text = models.TextField("–î–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç", blank=True)

    # –ß–∏—Å–ª–æ–≤—ã–µ –ø–æ–ª—è
    # price = models.DecimalField("–¶–µ–Ω–∞", max_digits=10, decimal_places=2, validators=[MinValueValidator(0)])
    # quantity = models.PositiveIntegerField("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", default=0)
    # rating = models.FloatField("–†–µ–π—Ç–∏–Ω–≥", null=True, blank=True)

    # –ë—É–ª–µ–≤—ã –ø–æ–ª—è
    # is_featured = models.BooleanField("–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π", default=False)
    # is_available = models.BooleanField("–î–æ—Å—Ç—É–ø–µ–Ω", default=True)

    # –î–∞—Ç—ã
    # publish_date = models.DateField("–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏", null=True, blank=True)
    # event_datetime = models.DateTimeField("–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è —Å–æ–±—ã—Ç–∏—è", null=True, blank=True)

    # –§–∞–π–ª—ã –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    # image = models.ImageField("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", upload_to="your_model/", blank=True)
    # document = models.FileField("–î–æ–∫—É–º–µ–Ω—Ç", upload_to="documents/", blank=True)

    # JSON –ø–æ–ª—è (PostgreSQL)
    # specifications = models.JSONField("–°–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏", default=dict, blank=True)
    # metadata = models.JSONField("–ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ", default=list, blank=True)

    # –°–≤—è–∑–∏ —Å –¥—Ä—É–≥–∏–º–∏ –º–æ–¥–µ–ª—è–º–∏
    # category = models.ForeignKey(Category, on_delete=models.CASCADE, related_name="items", verbose_name="–ö–∞—Ç–µ–≥–æ—Ä–∏—è")
    # tags = models.ManyToManyField(Tag, blank=True, verbose_name="–¢–µ–≥–∏")
    # parent = models.ForeignKey("self", on_delete=models.CASCADE, null=True, blank=True, related_name="children")

    # ===== SEO –ü–û–õ–Ø (–µ—Å–ª–∏ –Ω—É–∂–Ω—ã) =====
    seo_title = models.CharField("SEO –∑–∞–≥–æ–ª–æ–≤–æ–∫", max_length=200, blank=True)
    seo_description = models.TextField("SEO –æ–ø–∏—Å–∞–Ω–∏–µ", blank=True)
    seo_keywords = models.CharField("SEO –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞", max_length=500, blank=True)

    # ===== –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–ï –ü–û–õ–Ø (–¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤–æ –í–°–ï–• –º–æ–¥–µ–ª—è—Ö) =====
    is_active = models.BooleanField("–ê–∫—Ç–∏–≤–Ω—ã–π", default=True)
    created_at = models.DateTimeField("–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è", auto_now_add=True)
    updated_at = models.DateTimeField("–î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è", auto_now=True)

    # ===== –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –° 1–° (–µ—Å–ª–∏ –Ω—É–∂–Ω–∞) =====
    onec_id = models.CharField("ID –≤ 1–°", max_length=100, blank=True, null=True)

    # ===== –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ü–û–õ–Ø –ê–£–î–ò–¢–ê (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) =====
    # created_by = models.ForeignKey(User, on_delete=models.SET_NULL, null=True, related_name="created_%(class)s", verbose_name="–°–æ–∑–¥–∞–ª")
    # updated_by = models.ForeignKey(User, on_delete=models.SET_NULL, null=True, related_name="updated_%(class)s", verbose_name="–û–±–Ω–æ–≤–∏–ª")

    class Meta:
        verbose_name = "–í–∞—à–∞ —Å—É—â–Ω–æ—Å—Ç—å"
        verbose_name_plural = "–í–∞—à–∏ —Å—É—â–Ω–æ—Å—Ç–∏"
        db_table = "your_table_name"  # üî• –í–ê–ñ–ù–û: –ö–∞—Å—Ç–æ–º–Ω–æ–µ –∏–º—è —Ç–∞–±–ª–∏—Ü—ã
        ordering = ["-created_at"]  # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

        # –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        indexes = [
            models.Index(fields=["is_active"]),
            models.Index(fields=["created_at"]),
            models.Index(fields=["slug"]),
            # TODO: –î–æ–±–∞–≤—å—Ç–µ –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –ø–æ–ª–µ–π –ø–æ –∫–æ—Ç–æ—Ä—ã–º —á–∞—Å—Ç–æ —Ñ–∏–ª—å—Ç—Ä—É–µ—Ç–µ/—Å–æ—Ä—Ç–∏—Ä—É–µ—Ç–µ
            # models.Index(fields=['category', 'is_active']),
            # models.Index(fields=['price']),
        ]

        # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ (–µ—Å–ª–∏ –Ω—É–∂–Ω—ã)
        # constraints = [
        #     models.UniqueConstraint(fields=['name', 'category'], name='unique_name_per_category'),
        #     models.CheckConstraint(check=Q(price__gte=0), name='price_non_negative'),
        # ]

    def save(self, *args, **kwargs):
        """
        –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–µ—Ç–æ–¥–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –ª–æ–≥–∏–∫–∏
        """
        # –ê–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è slug –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è
        if not self.slug:
            self.slug = slugify(self.name)

        # TODO: –î–æ–±–∞–≤—å—Ç–µ —Å–≤–æ—é –ª–æ–≥–∏–∫—É –∑–¥–µ—Å—å
        # –ù–∞–ø—Ä–∏–º–µ—Ä:
        # - –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
        # - –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        # - –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
        # - –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π

        super().save(*args, **kwargs)

    def __str__(self):
        """–°—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞"""
        return self.name

        # TODO: –ú–æ–∂–µ—Ç–µ —Å–¥–µ–ª–∞—Ç—å –±–æ–ª–µ–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–º:
        # return f"{self.name} ({self.category})" –µ—Å–ª–∏ –µ—Å—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—è
        # return f"{self.name} - {self.price}‚ÇΩ" –µ—Å–ª–∏ –µ—Å—Ç—å —Ü–µ–Ω–∞

    def clean(self):
        """
        –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞ —É—Ä–æ–≤–Ω–µ –º–æ–¥–µ–ª–∏
        –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ .full_clean() –∏ –≤ Django Admin
        """
        from django.core.exceptions import ValidationError

        # TODO: –î–æ–±–∞–≤—å—Ç–µ —Å–≤–æ—é –≤–∞–ª–∏–¥–∞—Ü–∏—é
        # –ü—Ä–∏–º–µ—Ä—ã:

        # if self.price and self.price < 0:
        #     raise ValidationError({'price': '–¶–µ–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π'})

        # if self.start_date and self.end_date and self.start_date > self.end_date:
        #     raise ValidationError({'end_date': '–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–Ω—å—à–µ –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞'})

        super().clean()

    # ===== COMPUTED PROPERTIES (–≤—ã—á–∏—Å–ª—è–µ–º—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞) =====

    @property
    def display_name(self):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–ª—è UI)"""
        return self.name or f"ID: {self.id}"

    # TODO: –î–æ–±–∞–≤—å—Ç–µ —Å–≤–æ–∏ computed properties
    # –ü—Ä–∏–º–µ—Ä—ã:

    # @property
    # def is_new(self):
    #     """–ù–æ–≤—ã–π –ª–∏ –æ–±—ä–µ–∫—Ç (—Å–æ–∑–¥–∞–Ω –º–µ–Ω–µ–µ –Ω–µ–¥–µ–ª–∏ –Ω–∞–∑–∞–¥)"""
    #     from datetime import timedelta
    #     from django.utils import timezone
    #     return self.created_at > timezone.now() - timedelta(days=7)

    # @property
    # def formatted_price(self):
    #     """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ü–µ–Ω–∞"""
    #     return f"{self.price:,.2f}‚ÇΩ" if self.price else "–¶–µ–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞"

    # ===== BUSINESS LOGIC METHODS (–±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∞) =====

    def get_absolute_url(self):
        """URL –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ–±—ä–µ–∫—Ç–∞"""
        from django.urls import reverse

        return reverse("your_model_detail", kwargs={"slug": self.slug})

    # TODO: –î–æ–±–∞–≤—å—Ç–µ –º–µ—Ç–æ–¥—ã –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∏
    # –ü—Ä–∏–º–µ—Ä—ã:

    # def can_be_deleted(self):
    #     """–ú–æ–∂–Ω–æ –ª–∏ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –æ–±—ä–µ–∫—Ç"""
    #     return not hasattr(self, 'orders') or not self.orders.exists()

    # def get_related_items(self):
    #     """–ü–æ–ª—É—á–∏—Ç—å —Å–≤—è–∑–∞–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã"""
    #     return YourModel.objects.filter(category=self.category).exclude(id=self.id)[:5]

    # def calculate_total(self):
    #     """–í—ã—á–∏—Å–ª–∏—Ç—å –æ–±—â—É—é —Å—É–º–º—É"""
    #     return sum(item.price for item in self.items.all())

    # ===== –ö–õ–ê–°–°–û–í–´–ï –ú–ï–¢–û–î–´ =====

    @classmethod
    def get_active(cls):
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã"""
        return cls.objects.filter(is_active=True)

    @classmethod
    def get_popular(cls, limit=10):
        """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã"""
        # TODO: –†–µ–∞–ª–∏–∑—É–π—Ç–µ –ª–æ–≥–∏–∫—É –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏
        return cls.get_active().order_by("-created_at")[:limit]


# ===== –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ú–û–î–ï–õ–ò (–µ—Å–ª–∏ –Ω—É–∂–Ω—ã) =====


class YourModelImage(models.Model):
    """
    –ú–æ–¥–µ–ª—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤–∞—à–µ–π –æ—Å–Ω–æ–≤–Ω–æ–π –º–æ–¥–µ–ª–∏
    –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    """

    your_model = models.ForeignKey(
        YourModel,
        on_delete=models.CASCADE,
        related_name="images",
        verbose_name="–û—Å–Ω–æ–≤–Ω–æ–π –æ–±—ä–µ–∫—Ç",
    )
    image = models.ImageField("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", upload_to="your_model_images/")
    alt_text = models.CharField("–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Ç–µ–∫—Å—Ç", max_length=255, blank=True)
    is_main = models.BooleanField("–û—Å–Ω–æ–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", default=False)
    sort_order = models.PositiveIntegerField("–ü–æ—Ä—è–¥–æ–∫ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏", default=0)

    created_at = models.DateTimeField("–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è", auto_now_add=True)

    class Meta:
        verbose_name = "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"
        verbose_name_plural = "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"
        db_table = "your_model_images"
        ordering = ["sort_order", "created_at"]
        indexes = [
            models.Index(fields=["your_model", "is_main"]),
        ]

    def save(self, *args, **kwargs):
        # –ï—Å–ª–∏ —ç—Ç–æ –æ—Å–Ω–æ–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, —É–±–∏—Ä–∞–µ–º —Ñ–ª–∞–≥ —É –¥—Ä—É–≥–∏—Ö
        if self.is_main:
            YourModelImage.objects.filter(
                your_model=self.your_model, is_main=True
            ).exclude(pk=self.pk).update(is_main=False)

        super().save(*args, **kwargs)

    def __str__(self):
        return f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {self.your_model.name}"


# ===== –ü–†–ò–ú–ï–† –ú–û–î–ï–õ–ò –°–û –°–í–Ø–ó–Ø–ú–ò =====


class YourModelCategory(models.Model):
    """–ö–∞—Ç–µ–≥–æ—Ä–∏—è –¥–ª—è –≤–∞—à–µ–π –º–æ–¥–µ–ª–∏ (–µ—Å–ª–∏ –Ω—É–∂–Ω–∞ –∏–µ—Ä–∞—Ä—Ö–∏—è)"""

    name = models.CharField("–ù–∞–∑–≤–∞–Ω–∏–µ", max_length=200)
    slug = models.SlugField("Slug", max_length=255, unique=True)
    parent = models.ForeignKey(
        "self",
        on_delete=models.CASCADE,
        null=True,
        blank=True,
        related_name="children",
        verbose_name="–†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è",
    )
    description = models.TextField("–û–ø–∏—Å–∞–Ω–∏–µ", blank=True)
    image = models.ImageField("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", upload_to="categories/", blank=True)
    sort_order = models.PositiveIntegerField("–ü–æ—Ä—è–¥–æ–∫ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏", default=0)

    is_active = models.BooleanField("–ê–∫—Ç–∏–≤–Ω–∞—è", default=True)
    created_at = models.DateTimeField("–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è", auto_now_add=True)
    updated_at = models.DateTimeField("–î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è", auto_now=True)

    class Meta:
        verbose_name = "–ö–∞—Ç–µ–≥–æ—Ä–∏—è"
        verbose_name_plural = "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏"
        db_table = "your_model_categories"
        ordering = ["sort_order", "name"]

    def save(self, *args, **kwargs):
        if not self.slug:
            self.slug = slugify(self.name)
        super().save(*args, **kwargs)

    def __str__(self):
        if self.parent:
            return f"{self.parent.name} > {self.name}"
        return self.name

    @property
    def full_name(self):
        """–ü–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å —É—á–µ—Ç–æ–º –∏–µ—Ä–∞—Ä—Ö–∏–∏"""
        if self.parent:
            return f"{self.parent.full_name} > {self.name}"
        return self.name
