"""
–®–∞–±–ª–æ–Ω —Ç–µ—Å—Ç–æ–≤ –¥–ª—è FREESPORT
–°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∏ –∞–¥–∞–ø—Ç–∏—Ä—É–π—Ç–µ –ø–æ–¥ –≤–∞—à–∏ —Ç–µ—Å—Ç—ã
"""
import pytest
from decimal import Decimal
from django.contrib.auth import get_user_model
from rest_framework.test import APIClient
from rest_framework import status

# TODO: –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à–∏ –º–æ–¥–µ–ª–∏ –∏ —Ñ–∞–±—Ä–∏–∫–∏
from your_app.models import YourModel, YourRelatedModel
from tests.factories import YourModelFactory, UserFactory

User = get_user_model()


# ===== –°–ò–°–¢–ï–ú–ê –£–ù–ò–ö–ê–õ–¨–ù–´–• –î–ê–ù–ù–´–• (–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û!) =====

import uuid
import time

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å—á–µ—Ç—á–∏–∫ –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
_unique_counter = 0

def get_unique_suffix():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∞–±—Å–æ–ª—é—Ç–Ω–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Å—É—Ñ—Ñ–∏–∫—Å –ø–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º FREESPORT"""
    global _unique_counter
    _unique_counter += 1
    return f"{int(time.time() * 1000)}-{_unique_counter}-{uuid.uuid4().hex[:6]}"


# ===== –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–ï –§–ò–ö–°–¢–£–†–´ –ò–ó–û–õ–Ø–¶–ò–ò FREESPORT =====

@pytest.fixture(autouse=True)
def enable_db_access_for_all_tests(db):
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–∫–ª—é—á–∞–µ—Ç –¥–æ—Å—Ç—É–ø –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
    pass

@pytest.fixture(autouse=True) 
def clear_db_before_test(transactional_db):
    """
    üî• –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –ü–æ–ª–Ω–∞—è –∏–∑–æ–ª—è—Ü–∏—è —Ç–µ—Å—Ç–æ–≤ –ø–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º FREESPORT
    –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç constraint violations –∏ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –∏–∑–æ–ª—è—Ü–∏—é —Ç–µ—Å—Ç–æ–≤
    
    –°–û–û–¢–í–ï–¢–°–¢–í–£–ï–¢ docs/architecture/10-testing-strategy.md —Å–µ–∫—Ü–∏—è 10.4
    """
    from django.core.cache import cache
    from django.db import connection
    from django.apps import apps
    from django.db import transaction
    
    # –û—á–∏—â–∞–µ–º –∫—ç—à–∏ Django
    cache.clear()
    
    # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü –ø–µ—Ä–µ–¥ —Ç–µ—Å—Ç–æ–º
    with connection.cursor() as cursor:
        models = apps.get_models()
        for model in models:
            table_name = model._meta.db_table
            try:
                cursor.execute(f'TRUNCATE TABLE "{table_name}" RESTART IDENTITY CASCADE')
            except Exception:
                pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –¥–ª—è —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–æ–Ω–Ω—É—é –∏–∑–æ–ª—è—Ü–∏—é
    with transaction.atomic():
        yield


# ===== UNIT –¢–ï–°–¢–´ –ú–û–î–ï–õ–ò =====

class TestYourModel:
    """
    Unit —Ç–µ—Å—Ç—ã –¥–ª—è –º–æ–¥–µ–ª–∏ YourModel
    –¢–µ—Å—Ç–∏—Ä—É—é—Ç –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫—É, –≤–∞–ª–∏–¥–∞—Ü–∏—é, computed properties
    """
    
    @pytest.mark.integration  # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –¢–µ—Å—Ç—ã —Å Factory = integration
    @pytest.mark.django_db
    def test_model_creation(self):
        """–ë–∞–∑–æ–≤—ã–π —Ç–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –º–æ–¥–µ–ª–∏"""
        obj = YourModelFactory(name=f"–¢–µ—Å—Ç-{get_unique_suffix()}")  # ‚úÖ –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è
        assert obj.name == "–¢–µ—Å—Ç –æ–±—ä–µ–∫—Ç"
        assert obj.is_active is True
        assert obj.created_at is not None
        assert obj.updated_at is not None
        
        # TODO: –î–æ–±–∞–≤—å—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö –¥–ª—è –≤–∞—à–µ–π –º–æ–¥–µ–ª–∏ –ø–æ–ª–µ–π

    @pytest.mark.integration  # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û
    @pytest.mark.django_db
    def test_str_representation(self):
        """–¢–µ—Å—Ç —Å—Ç—Ä–æ–∫–æ–≤–æ–≥–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –º–æ–¥–µ–ª–∏"""
        obj = YourModelFactory(name="–¢–µ—Å—Ç–æ–≤—ã–π –æ–±—ä–µ–∫—Ç")
        assert str(obj) == "–¢–µ—Å—Ç–æ–≤—ã–π –æ–±—ä–µ–∫—Ç"

    @pytest.mark.integration  # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û 
    @pytest.mark.django_db
    def test_slug_auto_generation(self):
        """–¢–µ—Å—Ç –∞–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ slug"""
        obj = YourModel.objects.create(
            name="–ù–∞–∑–≤–∞–Ω–∏–µ —Å –ü—Ä–æ–±–µ–ª–∞–º–∏ –∏ –ó–ê–ì–õ–ê–í–ù–´–ú–ò"
        )
        
        assert obj.slug == "nazvanie-s-probelami-i-zaglavnymi"

    @pytest.mark.integration  # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û
    @pytest.mark.django_db
    def test_model_validation(self):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –º–æ–¥–µ–ª–∏"""
        # TODO: –¢–µ—Å—Ç–∏—Ä—É–π—Ç–µ –≤–∞—à—É –≤–∞–ª–∏–¥–∞—Ü–∏—é
        
        # –ü—Ä–∏–º–µ—Ä –≤–∞–ª–∏–¥–∞—Ü–∏–∏ required –ø–æ–ª–µ–π
        with pytest.raises(Exception):  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
            YourModel.objects.create(name="")  # –ï—Å–ª–∏ name –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ
        
        # –ü—Ä–∏–º–µ—Ä –≤–∞–ª–∏–¥–∞—Ü–∏–∏ unique –ø–æ–ª–µ–π
        YourModelFactory(name="–£–Ω–∏–∫–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ")
        with pytest.raises(Exception):
            YourModelFactory(name="–£–Ω–∏–∫–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ")

    @pytest.mark.integration  # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û
    @pytest.mark.django_db
    def test_computed_properties(self):
        """–¢–µ—Å—Ç computed properties"""
        obj = YourModelFactory()
        
        # TODO: –¢–µ—Å—Ç–∏—Ä—É–π—Ç–µ –≤–∞—à–∏ computed properties
        # –ü—Ä–∏–º–µ—Ä—ã:
        # assert obj.display_name == expected_value
        # assert obj.is_new is True/False
        # assert obj.formatted_price == "1,000.00‚ÇΩ"

    @pytest.mark.integration  # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û
    @pytest.mark.django_db
    def test_business_logic_methods(self):
        """–¢–µ—Å—Ç –º–µ—Ç–æ–¥–æ–≤ –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∏"""
        obj = YourModelFactory()
        
        # TODO: –¢–µ—Å—Ç–∏—Ä—É–π—Ç–µ –≤–∞—à–∏ –º–µ—Ç–æ–¥—ã
        # –ü—Ä–∏–º–µ—Ä—ã:
        # assert obj.can_be_deleted() is True/False
        # related = obj.get_related_items()
        # assert len(related) <= 5
        # total = obj.calculate_total()
        # assert total == expected_value

    @pytest.mark.integration  # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û
    @pytest.mark.django_db
    def test_model_relationships(self):
        """–¢–µ—Å—Ç —Å–≤—è–∑–µ–π —Å –¥—Ä—É–≥–∏–º–∏ –º–æ–¥–µ–ª—è–º–∏"""
        # TODO: –¢–µ—Å—Ç–∏—Ä—É–π—Ç–µ ForeignKey, ManyToMany —Å–≤—è–∑–∏
        
        # –ü—Ä–∏–º–µ—Ä ForeignKey
        # parent = YourModelFactory()
        # child = YourModelFactory(parent=parent)
        # assert child.parent == parent
        # assert parent.children.count() == 1

        # –ü—Ä–∏–º–µ—Ä ManyToMany
        # obj = YourModelFactory()
        # tags = TagFactory.create_batch(3)
        # obj.tags.set(tags)
        # assert obj.tags.count() == 3

    @pytest.mark.integration  # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û
    @pytest.mark.django_db
    def test_model_constraints(self):
        """–¢–µ—Å—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –º–æ–¥–µ–ª–∏"""
        # TODO: –¢–µ—Å—Ç–∏—Ä—É–π—Ç–µ unique_together, check constraints
        
        # –ü—Ä–∏–º–µ—Ä unique_together
        # obj1 = YourModelFactory(field1="test", field2="value")
        # with pytest.raises(IntegrityError):
        #     YourModelFactory(field1="test", field2="value")

    # TODO: –î–æ–±–∞–≤—å—Ç–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–ª—è –≤–∞—à–µ–π –º–æ–¥–µ–ª–∏ —Ç–µ—Å—Ç—ã
    # –ü—Ä–∏–º–µ—Ä—ã —Ç–µ—Å—Ç–æ–≤ –¥–ª—è FREESPORT –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤:
    
    # @pytest.mark.unit
    # def test_role_based_pricing(self):
    #     """–¢–µ—Å—Ç —Ä–æ–ª–µ–≤–æ–≥–æ —Ü–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è (–µ—Å–ª–∏ –ø—Ä–∏–º–µ–Ω–∏–º–æ)"""
    #     user_retail = UserFactory(role='retail')
    #     user_wholesale = UserFactory(role='wholesale_level1')
    #     
    #     product = YourModelFactory(
    #         retail_price=Decimal('1000.00'),
    #         wholesale_price=Decimal('800.00')
    #     )
    #     
    #     assert product.get_price_for_user(user_retail) == Decimal('1000.00')
    #     assert product.get_price_for_user(user_wholesale) == Decimal('800.00')


# ===== –ò–ù–¢–ï–ì–†–ê–¶–ò–û–ù–ù–´–ï –¢–ï–°–¢–´ API =====

class TestYourModelAPI:
    """
    –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã API
    –¢–µ—Å—Ç–∏—Ä—É—é—Ç —Ä–µ–∞–ª—å–Ω—ã–µ HTTP –∑–∞–ø—Ä–æ—Å—ã —á–µ—Ä–µ–∑ APIClient
    """
    
    @pytest.fixture
    def api_client(self):
        """APIClient –¥–ª—è —Ç–µ—Å—Ç–æ–≤"""
        return APIClient()

    @pytest.fixture
    def authenticated_user(self):
        """–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"""
        return UserFactory(role='retail')

    @pytest.fixture
    def admin_user(self):
        """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"""
        return UserFactory(role='admin', is_staff=True, is_superuser=True)

    @pytest.fixture
    def sample_data(self):
        """–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ"""
        return YourModelFactory.create_batch(3, is_active=True)

    @pytest.mark.integration
    def test_list_endpoint_anonymous(self, api_client, sample_data):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –¥–ª—è –∞–Ω–æ–Ω–∏–º–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        response = api_client.get('/api/your-endpoint/')
        
        assert response.status_code == status.HTTP_200_OK
        
        data = response.json()
        assert 'results' in data  # –ü–∞–≥–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
        assert len(data['results']) == 3
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞
        item = data['results'][0]
        required_fields = ['id', 'name', 'created_at']  # TODO: –û–±–Ω–æ–≤–∏—Ç–µ –ø–æ–ª—è
        for field in required_fields:
            assert field in item

    @pytest.mark.integration
    def test_list_endpoint_authenticated(self, api_client, authenticated_user, sample_data):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        api_client.force_authenticate(user=authenticated_user)
        
        response = api_client.get('/api/your-endpoint/')
        
        assert response.status_code == status.HTTP_200_OK
        
        # TODO: –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–∑–ª–∏—á–∏—è –≤ –æ—Ç–≤–µ—Ç–µ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        # –ù–∞–ø—Ä–∏–º–µ—Ä, –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è, —Ü–µ–Ω—ã —Å —É—á–µ—Ç–æ–º —Ä–æ–ª–∏ –∏ —Ç.–¥.

    @pytest.mark.integration
    def test_detail_endpoint(self, api_client, sample_data):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –æ–±—ä–µ–∫—Ç–∞"""
        obj = sample_data[0]
        response = api_client.get(f'/api/your-endpoint/{obj.id}/')
        
        assert response.status_code == status.HTTP_200_OK
        
        data = response.json()
        assert data['id'] == obj.id
        assert data['name'] == obj.name
        
        # TODO: –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤—Å–µ –ø–æ–ª—è detail serializer

    @pytest.mark.integration
    def test_create_endpoint_anonymous(self, api_client):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞ –∞–Ω–æ–Ω–∏–º–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∑–∞–ø—Ä–µ—â–µ–Ω–æ)"""
        create_data = {
            'name': '–ù–æ–≤—ã–π –æ–±—ä–µ–∫—Ç',
            # TODO: –î–æ–±–∞–≤—å—Ç–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        }
        
        response = api_client.post('/api/your-endpoint/', create_data)
        
        # TODO: –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        # –û–±—ã—á–Ω–æ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–µ–±—É–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        assert response.status_code in [status.HTTP_401_UNAUTHORIZED, status.HTTP_403_FORBIDDEN]

    @pytest.mark.integration
    def test_create_endpoint_authenticated(self, api_client, authenticated_user):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"""
        api_client.force_authenticate(user=authenticated_user)
        
        create_data = {
            'name': '–ù–æ–≤—ã–π –æ–±—ä–µ–∫—Ç',
            'description': '–û–ø–∏—Å–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞',
            # TODO: –î–æ–±–∞–≤—å—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        }
        
        response = api_client.post('/api/your-endpoint/', create_data)
        
        # TODO: –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è
        if response.status_code == status.HTTP_201_CREATED:
            data = response.json()
            assert data['name'] == create_data['name']
            assert YourModel.objects.filter(name=create_data['name']).exists()
        else:
            # –ï—Å–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø—Ä–µ—â–µ–Ω–æ, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞—Ç—É—Å
            assert response.status_code == status.HTTP_403_FORBIDDEN

    @pytest.mark.integration
    def test_update_endpoint(self, api_client, authenticated_user, sample_data):
        """–¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞"""
        api_client.force_authenticate(user=authenticated_user)
        
        obj = sample_data[0]
        update_data = {
            'name': '–û–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ',
            'description': '–û–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ',
        }
        
        response = api_client.patch(f'/api/your-endpoint/{obj.id}/', update_data)
        
        # TODO: –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        if response.status_code == status.HTTP_200_OK:
            data = response.json()
            assert data['name'] == update_data['name']
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏—Å—å –≤ –ë–î
            obj.refresh_from_db()
            assert obj.name == update_data['name']
        else:
            assert response.status_code == status.HTTP_403_FORBIDDEN

    @pytest.mark.integration
    def test_delete_endpoint(self, api_client, admin_user, sample_data):
        """–¢–µ—Å—Ç —É–¥–∞–ª–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞"""
        api_client.force_authenticate(user=admin_user)
        
        obj = sample_data[0]
        response = api_client.delete(f'/api/your-endpoint/{obj.id}/')
        
        # TODO: –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        if response.status_code == status.HTTP_204_NO_CONTENT:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ–±—ä–µ–∫—Ç —É–¥–∞–ª–µ–Ω
            assert not YourModel.objects.filter(id=obj.id).exists()
        else:
            assert response.status_code == status.HTTP_403_FORBIDDEN

    @pytest.mark.integration
    def test_filtering(self, api_client, sample_data):
        """–¢–µ—Å—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ API"""
        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç—ã —Å —Ä–∞–∑–Ω—ã–º–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏
        active_obj = YourModelFactory(is_active=True, name="–ê–∫—Ç–∏–≤–Ω—ã–π")
        inactive_obj = YourModelFactory(is_active=False, name="–ù–µ–∞–∫—Ç–∏–≤–Ω—ã–π")
        
        # –§–∏–ª—å—Ç—Ä –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        response = api_client.get('/api/your-endpoint/?is_active=true')
        data = response.json()
        
        # –î–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–π –æ–±—ä–µ–∫—Ç
        names = [item['name'] for item in data['results']]
        assert "–ê–∫—Ç–∏–≤–Ω—ã–π" in names
        assert "–ù–µ–∞–∫—Ç–∏–≤–Ω—ã–π" not in names

    @pytest.mark.integration
    def test_search(self, api_client):
        """–¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ —á–µ—Ä–µ–∑ API"""
        YourModelFactory(name="–ü–æ–∏—Å–∫–æ–≤—ã–π —Ç–µ—Ä–º–∏–Ω", description="—Ç–µ—Å—Ç")
        YourModelFactory(name="–î—Ä—É–≥–æ–π –æ–±—ä–µ–∫—Ç", description="–¥—Ä—É–≥–æ–µ")
        
        response = api_client.get('/api/your-endpoint/?search=–ø–æ–∏—Å–∫–æ–≤—ã–π')
        data = response.json()
        
        assert len(data['results']) == 1
        assert data['results'][0]['name'] == "–ü–æ–∏—Å–∫–æ–≤—ã–π —Ç–µ—Ä–º–∏–Ω"

    @pytest.mark.integration
    def test_ordering(self, api_client):
        """–¢–µ—Å—Ç —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ —á–µ—Ä–µ–∑ API"""
        obj1 = YourModelFactory(name="–ê –æ–±—ä–µ–∫—Ç")
        obj2 = YourModelFactory(name="–ë –æ–±—ä–µ–∫—Ç")
        
        # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
        response = api_client.get('/api/your-endpoint/?ordering=name')
        data = response.json()
        
        names = [item['name'] for item in data['results']]
        assert names == sorted(names)

    @pytest.mark.integration
    def test_pagination(self, api_client):
        """–¢–µ—Å—Ç –ø–∞–≥–∏–Ω–∞—Ü–∏–∏"""
        YourModelFactory.create_batch(25)  # –°–æ–∑–¥–∞–µ–º –±–æ–ª—å—à–µ —á–µ–º page_size
        
        response = api_client.get('/api/your-endpoint/')
        data = response.json()
        
        assert 'count' in data
        assert 'next' in data
        assert 'previous' in data
        assert 'results' in data
        assert data['count'] == 25
        assert len(data['results']) <= 20  # –†–∞–∑–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã

    # TODO: –î–æ–±–∞–≤—å—Ç–µ —Ç–µ—Å—Ç—ã –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
    
    # @pytest.mark.integration
    # def test_custom_action(self, api_client, sample_data):
    #     """–¢–µ—Å—Ç –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è"""
    #     obj = sample_data[0]
    #     response = api_client.post(f'/api/your-endpoint/{obj.id}/custom_action/')
    #     
    #     assert response.status_code == status.HTTP_200_OK
    #     # –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–µ–π—Å—Ç–≤–∏—è


# ===== –§–ò–ö–°–¢–£–†–´ –î–õ–Ø –ü–ï–†–ï–ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø =====

@pytest.fixture
def your_model_with_relations():
    """–ú–æ–¥–µ–ª—å —Å–æ —Å–≤—è–∑–∞–Ω–Ω—ã–º–∏ –æ–±—ä–µ–∫—Ç–∞–º–∏"""
    # TODO: –°–æ–∑–¥–∞–π—Ç–µ –º–æ–¥–µ–ª—å —Å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–º–∏ —Å–≤—è–∑—è–º–∏
    # parent = ParentModelFactory()
    # obj = YourModelFactory(parent=parent)
    # tags = TagFactory.create_batch(3)
    # obj.tags.set(tags)
    # return obj
    return YourModelFactory()

@pytest.fixture
def api_client_with_auth(authenticated_user):
    """API –∫–ª–∏–µ–Ω—Ç —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π"""
    client = APIClient()
    client.force_authenticate(user=authenticated_user)
    return client


# ===== –ü–ê–†–ê–ú–ï–¢–†–ò–ó–û–í–ê–ù–ù–´–ï –¢–ï–°–¢–´ =====

@pytest.mark.parametrize("role,expected_status", [
    ('retail', status.HTTP_200_OK),
    ('wholesale_level1', status.HTTP_200_OK), 
    ('admin', status.HTTP_200_OK),
    # TODO: –î–æ–±–∞–≤—å—Ç–µ —Ç–µ—Å—Ç—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ä–æ–ª–µ–π
])
@pytest.mark.integration
def test_endpoint_access_by_role(api_client, role, expected_status):
    """–¢–µ—Å—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ endpoint –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ä–æ–ª–µ–π"""
    user = UserFactory(role=role)
    api_client.force_authenticate(user=user)
    
    response = api_client.get('/api/your-endpoint/')
    assert response.status_code == expected_status


@pytest.mark.parametrize("invalid_data,expected_error", [
    ({'name': ''}, 'name'),  # –ü—É—Å—Ç–æ–µ –∏–º—è
    ({'name': 'x' * 500}, 'name'),  # –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –∏–º—è
    # TODO: –î–æ–±–∞–≤—å—Ç–µ —Ç–µ—Å—Ç—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏
])
@pytest.mark.integration
def test_create_with_invalid_data(api_client, admin_user, invalid_data, expected_error):
    """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
    api_client.force_authenticate(user=admin_user)
    
    response = api_client.post('/api/your-endpoint/', invalid_data)
    
    assert response.status_code == status.HTTP_400_BAD_REQUEST
    errors = response.json()
    assert expected_error in errors


# ===== –¢–ï–°–¢–´ –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò =====

@pytest.mark.performance
def test_list_endpoint_performance(api_client, django_assert_num_queries):
    """–¢–µ—Å—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ SQL –∑–∞–ø—Ä–æ—Å–æ–≤ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞"""
    YourModelFactory.create_batch(20)
    
    # TODO: –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –æ–∂–∏–¥–∞–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤
    # –û–±—ã—á–Ω–æ: 1 –∑–∞–ø—Ä–æ—Å –¥–ª—è count + 1 –∑–∞–ø—Ä–æ—Å –¥–ª—è –¥–∞–Ω–Ω—ã—Ö
    with django_assert_num_queries(2):
        response = api_client.get('/api/your-endpoint/')
        assert response.status_code == status.HTTP_200_OK


# ===== –¢–ï–°–¢–´ –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò =====

@pytest.mark.security
def test_no_sensitive_data_in_response(api_client):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –ø–æ–ø–∞–¥–∞—é—Ç –≤ –æ—Ç–≤–µ—Ç"""
    obj = YourModelFactory()
    
    response = api_client.get(f'/api/your-endpoint/{obj.id}/')
    data = response.json()
    
    # TODO: –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á—Ç–æ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç—Å—è
    sensitive_fields = ['password', 'secret_key', 'private_data']
    for field in sensitive_fields:
        assert field not in data


# ===== –ú–ê–†–ö–ï–†–´ PYTEST =====

# –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–∏ –º–∞—Ä–∫–µ—Ä—ã –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤:
# pytest -m unit                 # –¢–æ–ª—å–∫–æ unit —Ç–µ—Å—Ç—ã
# pytest -m integration          # –¢–æ–ª—å–∫–æ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã  
# pytest -m "not performance"    # –ò—Å–∫–ª—é—á–∏—Ç—å —Ç–µ—Å—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏