"""
conftest.py - –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª —Ñ–∏–∫—Å—Ç—É—Ä –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è FREESPORT
–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º docs/architecture/10-testing-strategy.md
"""
import pytest
import uuid
import time
from django.core.cache import cache
from django.db import connection, transaction
from django.apps import apps
from rest_framework.test import APIClient

# ===== –°–ò–°–¢–ï–ú–ê –£–ù–ò–ö–ê–õ–¨–ù–´–• –î–ê–ù–ù–´–• =====

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å—á–µ—Ç—á–∏–∫ –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
_unique_counter = 0


def get_unique_suffix():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∞–±—Å–æ–ª—é—Ç–Ω–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Å—É—Ñ—Ñ–∏–∫—Å –ø–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º FREESPORT"""
    global _unique_counter
    _unique_counter += 1
    return f"{int(time.time() * 1000)}-{_unique_counter}-{uuid.uuid4().hex[:6]}"


# ===== –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–ï –§–ò–ö–°–¢–£–†–´ –ò–ó–û–õ–Ø–¶–ò–ò FREESPORT =====


@pytest.fixture(autouse=True)
def enable_db_access_for_all_tests(db):
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–∫–ª—é—á–∞–µ—Ç –¥–æ—Å—Ç—É–ø –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
    pass


@pytest.fixture(autouse=True)
def clear_db_before_test(transactional_db):
    """
    üî• –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –ü–æ–ª–Ω–∞—è –∏–∑–æ–ª—è—Ü–∏—è —Ç–µ—Å—Ç–æ–≤ –ø–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º FREESPORT

    –°–û–û–¢–í–ï–¢–°–¢–í–£–ï–¢ docs/architecture/10-testing-strategy.md —Å–µ–∫—Ü–∏—è 10.4.1
    """
    # –û—á–∏—â–∞–µ–º –∫—ç—à–∏ Django
    cache.clear()

    # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü –ø–µ—Ä–µ–¥ —Ç–µ—Å—Ç–æ–º
    with connection.cursor() as cursor:
        models = apps.get_models()
        for model in models:
            table_name = model._meta.db_table
            try:
                cursor.execute(
                    f'TRUNCATE TABLE "{table_name}" RESTART IDENTITY CASCADE'
                )
            except Exception:
                pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –¥–ª—è —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–æ–Ω–Ω—É—é –∏–∑–æ–ª—è—Ü–∏—é
    with transaction.atomic():
        yield


# ===== –§–ò–ö–°–¢–£–†–´ –î–õ–Ø API –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø =====


@pytest.fixture
def api_client():
    """APIClient –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Django REST API"""
    return APIClient()


@pytest.fixture
def authenticated_api_client(api_client, retail_user):
    """APIClient —Å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–º retail –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"""
    api_client.force_authenticate(user=retail_user)
    return api_client


@pytest.fixture
def b2b_api_client(api_client, wholesale_user):
    """APIClient —Å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–º B2B –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"""
    api_client.force_authenticate(user=wholesale_user)
    return api_client


@pytest.fixture
def admin_api_client(api_client, admin_user):
    """APIClient —Å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    api_client.force_authenticate(user=admin_user)
    return api_client


# ===== –§–ò–ö–°–¢–£–†–´ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô (–†–û–õ–ï–í–ê–Ø –°–ò–°–¢–ï–ú–ê) =====


@pytest.fixture
def retail_user():
    """–†–æ–∑–Ω–∏—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"""
    from tests.factories import UserFactory

    return UserFactory(role="retail", email=f"retail-{get_unique_suffix()}@example.com")


@pytest.fixture
def wholesale_user():
    """B2B –æ–ø—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"""
    from tests.factories import UserFactory

    return UserFactory(
        role="wholesale_level2",
        email=f"wholesale-{get_unique_suffix()}@example.com",
        company_name=f"–û–û–û –ö–æ–º–ø–∞–Ω–∏—è-{get_unique_suffix()}",
        tax_id=f"{get_unique_suffix()}"[:10],
        is_verified=True,
    )


@pytest.fixture
def trainer_user():
    """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å-—Ç—Ä–µ–Ω–µ—Ä"""
    from tests.factories import UserFactory

    return UserFactory(
        role="trainer", email=f"trainer-{get_unique_suffix()}@example.com"
    )


@pytest.fixture
def federation_user():
    """–ü—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—å —Ñ–µ–¥–µ—Ä–∞—Ü–∏–∏"""
    from tests.factories import UserFactory

    return UserFactory(
        role="federation_rep", email=f"federation-{get_unique_suffix()}@example.com"
    )


@pytest.fixture
def admin_user():
    """–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–∏—Å—Ç–µ–º—ã"""
    from tests.factories import UserFactory

    return UserFactory(
        role="admin",
        email=f"admin-{get_unique_suffix()}@example.com",
        is_staff=True,
        is_superuser=True,
    )


# ===== –§–ò–ö–°–¢–£–†–´ –ü–†–û–î–£–ö–¢–û–í –° –†–û–õ–ï–í–´–ú –¶–ï–ù–û–û–ë–†–ê–ó–û–í–ê–ù–ò–ï–ú =====


@pytest.fixture
def product_with_all_prices():
    """–¢–æ–≤–∞—Ä —Å–æ –≤—Å–µ–º–∏ —É—Ä–æ–≤–Ω—è–º–∏ —Ü–µ–Ω"""
    from tests.factories import ProductFactory, BrandFactory, CategoryFactory
    from decimal import Decimal

    brand = BrandFactory(name=f"Brand-{get_unique_suffix()}")
    category = CategoryFactory(name=f"Category-{get_unique_suffix()}")

    return ProductFactory(
        name=f"Product-{get_unique_suffix()}",
        brand=brand,
        category=category,
        retail_price=Decimal("1000.00"),
        opt1_price=Decimal("800.00"),
        opt2_price=Decimal("750.00"),
        opt3_price=Decimal("700.00"),
        trainer_price=Decimal("900.00"),
        federation_price=Decimal("650.00"),
        recommended_retail_price=Decimal("1200.00"),  # RRP –¥–ª—è B2B
        max_suggested_retail_price=Decimal("1300.00"),  # MSRP –¥–ª—è B2B
        stock_quantity=100,
        is_active=True,
    )


@pytest.fixture
def product_without_special_prices():
    """–¢–æ–≤–∞—Ä —Ç–æ–ª—å–∫–æ —Å —Ä–æ–∑–Ω–∏—á–Ω–æ–π —Ü–µ–Ω–æ–π (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è fallback)"""
    from tests.factories import ProductFactory, BrandFactory, CategoryFactory
    from decimal import Decimal

    brand = BrandFactory(name=f"Brand-{get_unique_suffix()}")
    category = CategoryFactory(name=f"Category-{get_unique_suffix()}")

    return ProductFactory(
        name=f"Product-{get_unique_suffix()}",
        brand=brand,
        category=category,
        retail_price=Decimal("500.00"),
        opt1_price=None,
        opt2_price=None,
        opt3_price=None,
        trainer_price=None,
        federation_price=None,
        stock_quantity=50,
        is_active=True,
    )


# ===== –§–ò–ö–°–¢–£–†–´ –î–õ–Ø –ö–û–†–ó–ò–ù–´ –ò –ó–ê–ö–ê–ó–û–í =====


@pytest.fixture
def cart_with_items(retail_user, product_with_all_prices):
    """–ö–æ—Ä–∑–∏–Ω–∞ —Å —Ç–æ–≤–∞—Ä–∞–º–∏"""
    from tests.factories import CartFactory, CartItemFactory

    cart = CartFactory(user=retail_user)
    CartItemFactory(
        cart=cart,
        product=product_with_all_prices,
        quantity=2,
        price_snapshot=product_with_all_prices.get_price_for_user(retail_user),
    )
    return cart


@pytest.fixture
def b2b_order(wholesale_user, product_with_all_prices):
    """B2B –∑–∞–∫–∞–∑"""
    from tests.factories import OrderFactory, OrderItemFactory

    order = OrderFactory(user=wholesale_user, status="pending")
    OrderItemFactory(
        order=order,
        product=product_with_all_prices,
        quantity=10,
        unit_price=product_with_all_prices.get_price_for_user(wholesale_user),
    )
    return order


# ===== –ú–û–ö–ò–ù–ì –í–ù–ï–®–ù–ò–• –°–ò–°–¢–ï–ú =====


@pytest.fixture
def mock_1c_server():
    """Mock —Å–µ—Ä–≤–µ—Ä –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ 1–° –≤ —Ç–µ—Å—Ç–∞—Ö"""
    from unittest.mock import Mock

    mock = Mock()
    mock.create_customer.return_value = {
        "status": "success",
        "onec_id": f"MOCK_CLIENT_{get_unique_suffix()}",
        "message": "Customer created successfully",
    }
    mock.get_customers.return_value = {
        "status": "success",
        "customers": [],
        "total_count": 0,
    }
    return mock


@pytest.fixture
def mock_yukassa_payment():
    """Mock –¥–ª—è YuKassa –ø–ª–∞—Ç–µ–∂–µ–π"""
    from unittest.mock import Mock

    mock = Mock()
    mock.create_payment.return_value = {
        "id": f"payment_{get_unique_suffix()}",
        "status": "pending",
        "amount": {"value": "1000.00", "currency": "RUB"},
        "confirmation": {
            "type": "redirect",
            "confirmation_url": "https://mock-payment-url.com",
        },
    }
    return mock


# ===== –§–ò–ö–°–¢–£–†–´ –î–õ–Ø –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò =====


@pytest.fixture
def django_assert_num_queries():
    """
    –§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ SQL –∑–∞–ø—Ä–æ—Å–æ–≤
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ —Ç–µ—Å—Ç–∞—Ö –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    """
    from django.test.utils import override_settings
    from django.db import connection
    from contextlib import contextmanager

    @contextmanager
    def assert_num_queries(expected_count):
        with override_settings(DEBUG=True):
            initial_queries = len(connection.queries)
            yield
            final_queries = len(connection.queries)
            actual_count = final_queries - initial_queries

            if actual_count != expected_count:
                queries = connection.queries[initial_queries:]
                raise AssertionError(
                    f"Expected {expected_count} queries, got {actual_count}:\n"
                    + "\n".join([q["sql"] for q in queries])
                )

    return assert_num_queries


# ===== –ù–ê–°–¢–†–û–ô–ö–ò PYTEST =====


def pytest_configure(config):
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è pytest –¥–ª—è FREESPORT"""
    import django
    from django.conf import settings

    if not settings.configured:
        settings.configure(
            DEBUG=True,
            DATABASES={
                "default": {
                    "ENGINE": "django.db.backends.postgresql",
                    "NAME": "freesport_test",
                    "USER": "postgres",
                    "PASSWORD": "postgres",
                    "HOST": "localhost",
                    "PORT": "5432",
                }
            },
            SECRET_KEY="test-key-for-pytest",
            USE_TZ=True,
        )

    django.setup()


def pytest_collection_modifyitems(config, items):
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –º–∞—Ä–∫–∏—Ä–æ–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤"""
    for item in items:
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è–µ–º django_db –º–∞—Ä–∫–µ—Ä –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
        if hasattr(item, "pytestmark"):
            marks = [mark.name for mark in item.pytestmark if hasattr(mark, "name")]
            if "integration" in marks and "django_db" not in marks:
                item.add_marker(pytest.mark.django_db)


# ===== –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –£–¢–ò–õ–ò–¢–´ =====


@pytest.fixture
def temp_media_root(tmp_path, settings):
    """–í—Ä–µ–º–µ–Ω–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –º–µ–¥–∏–∞ —Ñ–∞–π–ª–æ–≤ –≤ —Ç–µ—Å—Ç–∞—Ö"""
    media_root = tmp_path / "media"
    media_root.mkdir()
    settings.MEDIA_ROOT = str(media_root)
    return media_root


@pytest.fixture
def sample_image():
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"""
    from PIL import Image
    from django.core.files.uploadedfile import SimpleUploadedFile
    import io

    image = Image.new("RGB", (100, 100), color="red")
    buffer = io.BytesIO()
    image.save(buffer, format="PNG")
    buffer.seek(0)

    return SimpleUploadedFile(
        name="test_image.png", content=buffer.getvalue(), content_type="image/png"
    )
