"""
Django Model - –†–µ–∞–ª—å–Ω—ã–π –ø—Ä–∏–º–µ—Ä –∏–∑ –ø—Ä–æ–µ–∫—Ç–∞ FREESPORT
–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω—ã —Ä–æ–ª–µ–≤–æ–≥–æ —Ü–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è, –∫–∞—Å—Ç–æ–º–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã, SEO –ø–æ–ª—è
"""
from django.db import models
from django.core.validators import MinValueValidator
from django.utils.text import slugify


class Product(models.Model):
    """
    –ú–æ–¥–µ–ª—å —Ç–æ–≤–∞—Ä–∞ —Å —Ä–æ–ª–µ-–æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Ü–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ–º
    –†–µ–∞–ª—å–Ω—ã–π –ø—Ä–∏–º–µ—Ä –∏–∑ apps/products/models.py
    """

    name = models.CharField("–ù–∞–∑–≤–∞–Ω–∏–µ", max_length=300)
    slug = models.SlugField("Slug", max_length=255, unique=True)
    brand = models.ForeignKey(
        Brand, on_delete=models.CASCADE, related_name="products", verbose_name="–ë—Ä–µ–Ω–¥"
    )
    category = models.ForeignKey(
        Category,
        on_delete=models.CASCADE,
        related_name="products",
        verbose_name="–ö–∞—Ç–µ–≥–æ—Ä–∏—è",
    )
    description = models.TextField("–û–ø–∏—Å–∞–Ω–∏–µ")
    short_description = models.CharField("–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ", max_length=500, blank=True)
    specifications = models.JSONField(
        "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏", default=dict, blank=True
    )

    # ‚úÖ –ü–ê–¢–¢–ï–†–ù: –†–æ–ª–µ–≤–æ–µ —Ü–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ - –∫–ª—é—á–µ–≤–∞—è –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç—å FREESPORT
    retail_price = models.DecimalField(
        "–†–æ–∑–Ω–∏—á–Ω–∞—è —Ü–µ–Ω–∞",
        max_digits=10,
        decimal_places=2,
        validators=[MinValueValidator(0)],
    )
    opt1_price = models.DecimalField(
        "–û–ø—Ç–æ–≤–∞—è —Ü–µ–Ω–∞ —É—Ä–æ–≤–µ–Ω—å 1",
        max_digits=10,
        decimal_places=2,
        null=True,
        blank=True,
        validators=[MinValueValidator(0)],
    )
    opt2_price = models.DecimalField(
        "–û–ø—Ç–æ–≤–∞—è —Ü–µ–Ω–∞ —É—Ä–æ–≤–µ–Ω—å 2",
        max_digits=10,
        decimal_places=2,
        null=True,
        blank=True,
        validators=[MinValueValidator(0)],
    )
    opt3_price = models.DecimalField(
        "–û–ø—Ç–æ–≤–∞—è —Ü–µ–Ω–∞ —É—Ä–æ–≤–µ–Ω—å 3",
        max_digits=10,
        decimal_places=2,
        null=True,
        blank=True,
        validators=[MinValueValidator(0)],
    )
    trainer_price = models.DecimalField(
        "–¶–µ–Ω–∞ –¥–ª—è —Ç—Ä–µ–Ω–µ—Ä–∞",
        max_digits=10,
        decimal_places=2,
        null=True,
        blank=True,
        validators=[MinValueValidator(0)],
    )
    federation_price = models.DecimalField(
        "–¶–µ–Ω–∞ –¥–ª—è –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—è —Ñ–µ–¥–µ—Ä–∞—Ü–∏–∏",
        max_digits=10,
        decimal_places=2,
        null=True,
        blank=True,
        validators=[MinValueValidator(0)],
    )

    # ‚úÖ –ü–ê–¢–¢–ï–†–ù: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ü–µ–Ω—ã –¥–ª—è B2B
    recommended_retail_price = models.DecimalField(
        "–†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω–∞—è —Ä–æ–∑–Ω–∏—á–Ω–∞—è —Ü–µ–Ω–∞ (RRP)",
        max_digits=10,
        decimal_places=2,
        null=True,
        blank=True,
        validators=[MinValueValidator(0)],
    )
    max_suggested_retail_price = models.DecimalField(
        "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω–∞—è —Ü–µ–Ω–∞ (MSRP)",
        max_digits=10,
        decimal_places=2,
        null=True,
        blank=True,
        validators=[MinValueValidator(0)],
    )

    # ‚úÖ –ü–ê–¢–¢–ï–†–ù: –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø–æ–ª—è –¥–ª—è –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π
    is_active = models.BooleanField("–ê–∫—Ç–∏–≤–Ω—ã–π", default=True)
    created_at = models.DateTimeField("–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è", auto_now_add=True)
    updated_at = models.DateTimeField("–î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è", auto_now=True)

    # ‚úÖ –ü–ê–¢–¢–ï–†–ù: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å 1–°
    onec_id = models.CharField("ID –≤ 1–°", max_length=100, blank=True, null=True)

    # ‚úÖ –ü–ê–¢–¢–ï–†–ù: –ö–∞—Å—Ç–æ–º–Ω–æ–µ –∏–º—è —Ç–∞–±–ª–∏—Ü—ã –∏ –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è Meta
    class Meta:
        verbose_name = "–¢–æ–≤–∞—Ä"
        verbose_name_plural = "–¢–æ–≤–∞—Ä—ã"
        db_table = "products"  # üëà –í–ê–ñ–ù–û: –ö–∞—Å—Ç–æ–º–Ω—ã–µ –∏–º–µ–Ω–∞ —Ç–∞–±–ª–∏—Ü
        ordering = ["-created_at"]
        indexes = [  # üëà –í–ê–ñ–ù–û: –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            models.Index(fields=["is_active", "category"]),
            models.Index(fields=["brand", "is_active"]),
            models.Index(fields=["stock_quantity"]),
        ]

    def save(self, *args, **kwargs):
        """‚úÖ –ü–ê–¢–¢–ï–†–ù: –ê–≤—Ç–æ-–≥–µ–Ω–µ—Ä–∞—Ü–∏—è slug –∏ SKU"""
        if not self.slug:
            self.slug = slugify(self.name)
        if not self.sku:
            import uuid
            import time

            self.sku = f"AUTO-{int(time.time())}-{uuid.uuid4().hex[:8].upper()}"
        super().save(*args, **kwargs)

    def __str__(self):
        return f"{self.name} ({self.sku})"

    def get_price_for_user(self, user):
        """
        ‚úÖ –ü–ê–¢–¢–ï–†–ù: –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ —Ä–æ–ª–µ–≤–æ–≥–æ —Ü–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
        –ò–°–ü–û–õ–¨–ó–£–ô–¢–ï –≠–¢–û–¢ –ü–ê–¢–¢–ï–†–ù –≤–æ –≤—Å–µ—Ö –º–æ–¥–µ–ª—è—Ö —Å —Ü–µ–Ω–∞–º–∏!
        """
        if not user or not user.is_authenticated:
            return self.retail_price

        role_price_mapping = {
            "retail": self.retail_price,
            "wholesale_level1": self.opt1_price or self.retail_price,
            "wholesale_level2": self.opt2_price or self.retail_price,
            "wholesale_level3": self.opt3_price or self.retail_price,
            "trainer": self.trainer_price or self.retail_price,
            "federation_rep": self.federation_price or self.retail_price,
        }

        return role_price_mapping.get(user.role, self.retail_price)

    # ‚úÖ –ü–ê–¢–¢–ï–†–ù: Computed properties –¥–ª—è –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∏
    @property
    def is_in_stock(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ç–æ–≤–∞—Ä–∞ –Ω–∞ —Å–∫–ª–∞–¥–µ"""
        return self.stock_quantity > 0

    @property
    def can_be_ordered(self):
        """–ú–æ–∂–Ω–æ –ª–∏ –∑–∞–∫–∞–∑–∞—Ç—å —Ç–æ–≤–∞—Ä"""
        return self.is_active and self.is_in_stock


# ‚úÖ –®–ê–ë–õ–û–ù –ú–û–î–ï–õ–ò –î–õ–Ø –ù–û–í–´–• –°–£–©–ù–û–°–¢–ï–ô
class YourNewModel(models.Model):
    """
    –®–∞–±–ª–æ–Ω –Ω–æ–≤–æ–π –º–æ–¥–µ–ª–∏ –ø–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º FREESPORT
    –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∏ –∞–¥–∞–ø—Ç–∏—Ä—É–π—Ç–µ –ø–æ–¥ —Å–≤–æ–∏ –Ω—É–∂–¥—ã
    """

    # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è
    name = models.CharField("–ù–∞–∑–≤–∞–Ω–∏–µ", max_length=255)
    slug = models.SlugField("Slug", max_length=255, unique=True, blank=True)
    description = models.TextField("–û–ø–∏—Å–∞–Ω–∏–µ", blank=True)

    # SEO –ø–æ–ª—è (–µ—Å–ª–∏ –Ω—É–∂–Ω—ã)
    seo_title = models.CharField("SEO –∑–∞–≥–æ–ª–æ–≤–æ–∫", max_length=200, blank=True)
    seo_description = models.TextField("SEO –æ–ø–∏—Å–∞–Ω–∏–µ", blank=True)

    # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø–æ–ª—è (–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –≤–æ –≤—Å–µ—Ö –º–æ–¥–µ–ª—è—Ö)
    is_active = models.BooleanField("–ê–∫—Ç–∏–≤–Ω—ã–π", default=True)
    created_at = models.DateTimeField("–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è", auto_now_add=True)
    updated_at = models.DateTimeField("–î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è", auto_now=True)

    # –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å 1–° (–µ—Å–ª–∏ –Ω—É–∂–Ω–∞)
    onec_id = models.CharField("ID –≤ 1–°", max_length=100, blank=True, null=True)

    class Meta:
        verbose_name = "–í–∞—à–∞ —Å—É—â–Ω–æ—Å—Ç—å"
        verbose_name_plural = "–í–∞—à–∏ —Å—É—â–Ω–æ—Å—Ç–∏"
        db_table = "your_table_name"  # üëà –í–ê–ñ–ù–û: –ö–∞—Å—Ç–æ–º–Ω–æ–µ –∏–º—è —Ç–∞–±–ª–∏—Ü—ã
        ordering = ["-created_at"]
        indexes = [
            models.Index(fields=["is_active"]),
            # –¥–æ–±–∞–≤—å—Ç–µ –∏–Ω–¥–µ–∫—Å—ã –ø–æ –º–µ—Ä–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        ]

    def save(self, *args, **kwargs):
        """–ê–≤—Ç–æ-–≥–µ–Ω–µ—Ä–∞—Ü–∏—è slug"""
        if not self.slug:
            self.slug = slugify(self.name)
        super().save(*args, **kwargs)

    def __str__(self):
        return self.name
