"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ - –†–µ–∞–ª—å–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã –∏–∑ –ø—Ä–æ–µ–∫—Ç–∞ FREESPORT
–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω—ã –∏–∑–æ–ª—è—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤, Factory Boy, pytest –º–∞—Ä–∫–µ—Ä—ã
"""
import pytest
from decimal import Decimal
from django.contrib.auth import get_user_model
from rest_framework.test import APIClient
from rest_framework import status

from apps.products.models import Product, Brand, Category
from tests.factories import ProductFactory, UserFactory, BrandFactory, CategoryFactory

User = get_user_model()


# ===== –°–ò–°–¢–ï–ú–ê –£–ù–ò–ö–ê–õ–¨–ù–´–• –î–ê–ù–ù–´–• =====

import uuid
import time

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å—á–µ—Ç—á–∏–∫ –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
_unique_counter = 0

def get_unique_suffix():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∞–±—Å–æ–ª—é—Ç–Ω–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Å—É—Ñ—Ñ–∏–∫—Å –ø–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º FREESPORT"""
    global _unique_counter
    _unique_counter += 1
    return f"{int(time.time() * 1000)}-{_unique_counter}-{uuid.uuid4().hex[:6]}"


# ===== –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–ê–Ø –§–ò–ö–°–¢–£–†–ê –ò–ó–û–õ–Ø–¶–ò–ò =====

@pytest.fixture(autouse=True)
def enable_db_access_for_all_tests(db):
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–∫–ª—é—á–∞–µ—Ç –¥–æ—Å—Ç—É–ø –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
    pass

@pytest.fixture(autouse=True) 
def clear_db_before_test(transactional_db):
    """üî• –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –ü–æ–ª–Ω–∞—è –∏–∑–æ–ª—è—Ü–∏—è —Ç–µ—Å—Ç–æ–≤ –ø–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º FREESPORT"""
    from django.core.cache import cache
    from django.db import connection
    from django.apps import apps
    from django.db import transaction
    
    # –û—á–∏—â–∞–µ–º –∫—ç—à–∏ Django
    cache.clear()
    
    # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü –ø–µ—Ä–µ–¥ —Ç–µ—Å—Ç–æ–º
    with connection.cursor() as cursor:
        models = apps.get_models()
        for model in models:
            table_name = model._meta.db_table
            try:
                cursor.execute(f'TRUNCATE TABLE "{table_name}" RESTART IDENTITY CASCADE')
            except Exception:
                pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –¥–ª—è —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–æ–Ω–Ω—É—é –∏–∑–æ–ª—è—Ü–∏—é
    with transaction.atomic():
        yield


class TestProductModel:
    """
    ‚úÖ –†–ï–ê–õ–¨–ù–´–ô –ü–†–ò–ú–ï–†: Unit —Ç–µ—Å—Ç—ã –¥–ª—è –º–æ–¥–µ–ª–∏ Product
    –¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–æ–ª–µ–≤–æ–µ —Ü–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ - –∫–ª—é—á–µ–≤—É—é —Ñ–∏—á—É –ø—Ä–æ–µ–∫—Ç–∞
    """
    
    @pytest.mark.integration  # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –¢–µ—Å—Ç—ã —Å Factory = integration
    @pytest.mark.django_db
    def test_get_price_for_user_retail(self):
        """–†–æ–∑–Ω–∏—á–Ω–∞—è —Ü–µ–Ω–∞ –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user = UserFactory(
            role='retail',
            email=f"retail-{get_unique_suffix()}@example.com"  # ‚úÖ –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        )
        product = ProductFactory(
            name=f"Product-{get_unique_suffix()}",
            retail_price=Decimal('1000.00'),
            opt1_price=Decimal('800.00')
        )
        
        assert product.get_price_for_user(user) == Decimal('1000.00')

    @pytest.mark.integration  # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û
    @pytest.mark.django_db
    def test_get_price_for_user_wholesale(self):
        """–û–ø—Ç–æ–≤–∞—è —Ü–µ–Ω–∞ –¥–ª—è –æ–ø—Ç–æ–≤–∏–∫–∞"""
        user = UserFactory(role='wholesale_level1')
        product = ProductFactory(
            retail_price=Decimal('1000.00'),
            opt1_price=Decimal('800.00')
        )
        
        assert product.get_price_for_user(user) == Decimal('800.00')

    @pytest.mark.integration  # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û
    @pytest.mark.django_db
    def test_get_price_fallback_to_retail(self):
        """Fallback –∫ —Ä–æ–∑–Ω–∏—á–Ω–æ–π —Ü–µ–Ω–µ –µ—Å–ª–∏ –æ–ø—Ç–æ–≤–æ–π –Ω–µ—Ç"""
        user = UserFactory(role='wholesale_level1')
        product = ProductFactory(
            retail_price=Decimal('1000.00'),
            opt1_price=None  # –ù–µ—Ç –æ–ø—Ç–æ–≤–æ–π —Ü–µ–Ω—ã
        )
        
        assert product.get_price_for_user(user) == Decimal('1000.00')

    @pytest.mark.integration  # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û
    @pytest.mark.django_db
    def test_anonymous_user_gets_retail_price(self):
        """–ê–Ω–æ–Ω–∏–º–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∞–µ—Ç —Ä–æ–∑–Ω–∏—á–Ω—É—é —Ü–µ–Ω—É"""
        product = ProductFactory(
            retail_price=Decimal('1000.00'),
            opt1_price=Decimal('800.00')
        )
        
        assert product.get_price_for_user(None) == Decimal('1000.00')

    @pytest.mark.integration  # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û
    @pytest.mark.django_db
    def test_computed_properties(self):
        """–¢–µ—Å—Ç computed properties"""
        product = ProductFactory(
            is_active=True,
            stock_quantity=10
        )
        
        assert product.is_in_stock is True
        assert product.can_be_ordered is True
        
        # –¢–æ–≤–∞—Ä –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω
        product.is_active = False
        assert product.can_be_ordered is False

    @pytest.mark.integration  # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û
    @pytest.mark.django_db
    def test_auto_slug_generation(self):
        """–ê–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è slug –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏"""
        brand = BrandFactory()
        category = CategoryFactory()
        
        product = Product.objects.create(
            name="–ö—Ä–æ—Å—Å–æ–≤–∫–∏ Nike Air Max",
            brand=brand,
            category=category,
            description="–û–ø–∏—Å–∞–Ω–∏–µ",
            retail_price=Decimal('5000.00')
        )
        
        assert product.slug == "krossovki-nike-air-max"


class TestProductAPI:
    """
    ‚úÖ –†–ï–ê–õ–¨–ù–´–ô –ü–†–ò–ú–ï–†: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã API
    –¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–µ HTTP –∑–∞–ø—Ä–æ—Å—ã —á–µ—Ä–µ–∑ APIClient
    """
    
    @pytest.fixture
    def api_client(self):
        """APIClient –¥–ª—è —Ç–µ—Å—Ç–æ–≤"""
        return APIClient()

    @pytest.fixture
    def sample_products(self):
        """–ù–∞–±–æ—Ä —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤"""
        brand = BrandFactory(name="Nike")
        category = CategoryFactory(name="–ö—Ä–æ—Å—Å–æ–≤–∫–∏")
        
        return [
            ProductFactory(
                name="Nike Air Max 270",
                brand=brand,
                category=category,
                retail_price=Decimal('8000.00'),
                is_active=True,
                stock_quantity=50
            ),
            ProductFactory(
                name="Nike Air Force 1",
                brand=brand,
                category=category,
                retail_price=Decimal('6000.00'),
                is_active=True,
                stock_quantity=30
            ),
        ]

    @pytest.mark.integration
    def test_product_list_api(self, api_client, sample_products):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ —á–µ—Ä–µ–∑ API"""
        response = api_client.get('/api/v1/products/')
        
        assert response.status_code == status.HTTP_200_OK
        
        data = response.json()
        assert 'results' in data
        assert len(data['results']) == 2
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞
        product = data['results'][0]
        required_fields = ['id', 'name', 'brand', 'category', 'price']
        for field in required_fields:
            assert field in product

    @pytest.mark.integration
    def test_product_detail_api(self, api_client, sample_products):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π —Ç–æ–≤–∞—Ä–∞"""
        product = sample_products[0]
        response = api_client.get(f'/api/v1/products/{product.id}/')
        
        assert response.status_code == status.HTTP_200_OK
        
        data = response.json()
        assert data['name'] == product.name
        assert data['id'] == product.id

    @pytest.mark.integration
    def test_product_filtering_by_brand(self, api_client, sample_products):
        """–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –±—Ä–µ–Ω–¥—É"""
        brand = sample_products[0].brand
        response = api_client.get(f'/api/v1/products/?brand={brand.slug}')
        
        assert response.status_code == status.HTTP_200_OK
        
        data = response.json()
        assert len(data['results']) == 2  # –í—Å–µ —Ç–æ–≤–∞—Ä—ã Nike

    @pytest.mark.integration
    def test_product_price_for_authenticated_user(self, api_client):
        """–†–æ–ª–µ–≤–æ–µ —Ü–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è-–æ–ø—Ç–æ–≤–∏–∫–∞
        user = UserFactory(role='wholesale_level1')
        product = ProductFactory(
            retail_price=Decimal('1000.00'),
            opt1_price=Decimal('800.00')
        )
        
        # –ê–≤—Ç–æ—Ä–∏–∑—É–µ–º—Å—è
        api_client.force_authenticate(user=user)
        
        response = api_client.get(f'/api/v1/products/{product.id}/')
        data = response.json()
        
        # –î–æ–ª–∂–Ω—ã –ø–æ–ª—É—á–∏—Ç—å –æ–ø—Ç–æ–≤—É—é —Ü–µ–Ω—É
        assert Decimal(str(data['price'])) == Decimal('800.00')


# ‚úÖ –®–ê–ë–õ–û–ù –¢–ï–°–¢–û–í –î–õ–Ø –ù–û–í–´–• –ú–û–î–ï–õ–ï–ô
class TestYourNewModel:
    """–®–∞–±–ª–æ–Ω —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –Ω–æ–≤–æ–π –º–æ–¥–µ–ª–∏"""
    
    @pytest.mark.unit
    def test_model_creation(self):
        """–ë–∞–∑–æ–≤—ã–π —Ç–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –º–æ–¥–µ–ª–∏"""
        obj = YourModelFactory(name="–¢–µ—Å—Ç")
        
        assert obj.name == "–¢–µ—Å—Ç"
        assert obj.is_active is True
        assert obj.created_at is not None

    @pytest.mark.unit
    def test_model_str_representation(self):
        """–¢–µ—Å—Ç —Å—Ç—Ä–æ–∫–æ–≤–æ–≥–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è"""
        obj = YourModelFactory(name="–¢–µ—Å—Ç–æ–≤—ã–π –æ–±—ä–µ–∫—Ç")
        assert str(obj) == "–¢–µ—Å—Ç–æ–≤—ã–π –æ–±—ä–µ–∫—Ç"

    @pytest.mark.unit
    def test_model_slug_generation(self):
        """–¢–µ—Å—Ç –∞–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ slug (–µ—Å–ª–∏ –µ—Å—Ç—å)"""
        obj = YourModel.objects.create(name="–¢–µ—Å—Ç –°–ª–∞–≥")
        assert obj.slug == "test-slag"


class TestYourNewAPI:
    """–®–∞–±–ª–æ–Ω API —Ç–µ—Å—Ç–æ–≤"""
    
    @pytest.fixture
    def api_client(self):
        return APIClient()

    @pytest.mark.integration
    def test_list_endpoint(self, api_client):
        """–¢–µ—Å—Ç —Å–ø–∏—Å–∫–∞ –æ–±—ä–µ–∫—Ç–æ–≤"""
        YourModelFactory.create_batch(3)
        
        response = api_client.get('/api/v1/your-endpoint/')
        
        assert response.status_code == status.HTTP_200_OK
        data = response.json()
        assert len(data['results']) == 3

    @pytest.mark.integration
    def test_detail_endpoint(self, api_client):
        """–¢–µ—Å—Ç –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞"""
        obj = YourModelFactory()
        
        response = api_client.get(f'/api/v1/your-endpoint/{obj.id}/')
        
        assert response.status_code == status.HTTP_200_OK
        data = response.json()
        assert data['name'] == obj.name


# ‚úÖ –ü–ê–¢–¢–ï–†–ù: –§–∏–∫—Å—Ç—É—Ä—ã –¥–ª—è –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
@pytest.fixture
def authenticated_user():
    """–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–ª—è —Ç–µ—Å—Ç–æ–≤"""
    return UserFactory(role='retail')

@pytest.fixture
def wholesale_user():
    """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å-–æ–ø—Ç–æ–≤–∏–∫"""
    return UserFactory(role='wholesale_level1')

@pytest.fixture
def admin_user():
    """–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"""
    return UserFactory(role='admin', is_staff=True, is_superuser=True)