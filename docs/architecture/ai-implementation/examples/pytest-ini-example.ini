# pytest.ini - Конфигурация pytest для FREESPORT
# Соответствует требованиям docs/architecture/10-testing-strategy.md секция 10.4.3

[tool:pytest]
DJANGO_SETTINGS_MODULE = freesport.settings.test

# Опции запуска (addopts)
addopts = 
    --verbose
    --tb=short
    --create-db        # ✅ Создавать чистую БД (требование FREESPORT)
    --nomigrations     # ✅ Не выполнять миграции для скорости
    --strict-markers   # Строгая проверка маркеров
    --strict-config    # Строгая проверка конфигурации
    # --reuse-db       # ❌ НЕ переиспользовать БД между запусками (изоляция!)

# Директории для поиска тестов
testpaths = 
    tests/unit
    tests/integration
    # НЕ включаем tests/legacy - устаревшие тесты исключены

# Паттерны файлов тестов
python_files = 
    test_*.py
    *_test.py

python_classes = 
    Test*

python_functions = 
    test_*

# ===== МАРКЕРЫ ТЕСТОВ =====
# Соответствует требованиям документа 10.2.1 - 10.2.4

markers =
    # Основные типы тестов
    unit: Unit tests (fast, isolated, no DB access)
    integration: Integration tests (with DB, API testing)
    
    # Обязательный маркер для доступа к БД
    django_db: Tests requiring database access
    
    # Специализированные маркеры FREESPORT
    role_pricing: Tests for role-based pricing system
    cart_deduplication: Tests for cart deduplication logic
    onec_integration: Tests for 1C integration
    b2b_features: Tests for B2B specific features
    b2c_features: Tests for B2C specific features
    
    # Производительность и безопасность
    performance: Performance/load tests
    security: Security-related tests
    
    # Медленные тесты
    slow: Slow running tests (>5 seconds)
    
    # E2E тесты (если запускаются через pytest)
    e2e: End-to-end tests
    
    # Фиктивные тесты для разработки
    wip: Work in progress tests (skip by default)

# ===== ФИЛЬТРЫ И ИСКЛЮЧЕНИЯ =====

# Игнорировать устаревшие тесты (требование FREESPORT)
# tests/legacy НЕ запускаются в основном CI-пайплайне
collect_ignore = [
    "tests/legacy",
    "tests/deprecated"
]

# Минимальная версия pytest
minversion = 6.0

# ===== НАСТРОЙКИ ПОКРЫТИЯ =====
# Требования к покрытию из документа 10.7.1

# Целевые показатели покрытия:
# - Общее покрытие: >= 70%
# - Критические модули: >= 90%

# Для использования с pytest-cov:
# pytest --cov=apps --cov-report=html --cov-report=term

# Исключения из покрытия
addopts = 
    --cov-config=.coveragerc

# ===== НАСТРОЙКИ ДЛЯ DJANGO =====

# База данных для тестов (изоляция)
DATABASE_ENGINE = django.db.backends.postgresql
DATABASE_NAME = freesport_test

# Отключить миграции для скорости (но создавать структуру БД)
MIGRATION_MODULES = {
    'users': None,
    'products': None,
    'orders': None,
    'cart': None,
    'common': None,
}

# ===== НАСТРОЙКИ ЛОГИРОВАНИЯ В ТЕСТАХ =====

log_cli = false
log_cli_level = INFO
log_cli_format = %(asctime)s [%(levelname)8s] %(name)s: %(message)s
log_cli_date_format = %Y-%m-%d %H:%M:%S

# Логирование в файл (для отладки)
log_file = tests.log
log_file_level = DEBUG
log_file_format = %(asctime)s [%(levelname)8s] %(filename)s:%(lineno)d %(funcName)s(): %(message)s
log_file_date_format = %Y-%m-%d %H:%M:%S

# ===== ФИЛЬТРАЦИЯ ПРЕДУПРЕЖДЕНИЙ =====

filterwarnings =
    # Игнорировать deprecation warnings от внешних библиотек
    ignore::DeprecationWarning:django.*
    ignore::PendingDeprecationWarning:django.*
    
    # Но показывать наши собственные warnings
    default::DeprecationWarning:apps.*
    default::PendingDeprecationWarning:apps.*
    
    # Игнорировать предупреждения от библиотек
    ignore::UserWarning:factory.*

# ===== НАСТРОЙКИ ПАРАЛЛЕЛЬНОГО ВЫПОЛНЕНИЯ =====
# Для pytest-xdist (если используется)

# Количество процессов для параллельного выполнения
# Можно переопределить: pytest -n auto
# addopts = -n auto

# Стратегия распределения тестов
# --dist loadscope  # Распределяет тесты по классам/модулям
# --dist loadfile   # Распределяет по файлам

# ===== НАСТРОЙКИ TIMEOUT =====
# Для pytest-timeout (если используется)

# Максимальное время выполнения одного теста
# timeout = 300  # 5 минут

# Метод остановки зависших тестов
# timeout_method = thread

# ===== ДОПОЛНИТЕЛЬНЫЕ ОПЦИИ ДЛЯ РАЗРАБОТКИ =====

# Остановиться на первой ошибке (для быстрой разработки)
# addopts = -x

# Запустить последние неудачные тесты
# addopts = --lf

# Показать самые медленные тесты
# addopts = --durations=10

# ===== ПРИМЕРЫ КОМАНД ЗАПУСКА =====

# Все тесты:
# pytest

# Только unit-тесты:
# pytest -m unit

# Только интеграционные тесты:
# pytest -m integration

# Тесты с покрытием:
# pytest --cov=apps --cov-report=html

# Тесты для ролевого ценообразования:
# pytest -m role_pricing

# Исключить медленные тесты:
# pytest -m "not slow"

# Запустить конкретный файл:
# pytest tests/integration/test_products_api.py

# Запустить с определенным уровнем логирования:
# pytest --log-cli-level=DEBUG