name: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–ª–∏—è–Ω–∏–µ –≤–µ—Ç–æ–∫

on:
  # –ó–∞–ø—É—Å–∫ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é (–∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 9:00 UTC)
  schedule:
    - cron: '0 9 * * *'
  # –†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫
  workflow_dispatch:
    inputs:
      source_branch:
        description: '–ò—Å—Ö–æ–¥–Ω–∞—è –≤–µ—Ç–∫–∞ –¥–ª—è —Å–ª–∏—è–Ω–∏—è'
        required: true
        default: 'develop'
        type: choice
        options:
          - 'develop'
          - 'main'
      target_branch:
        description: '–¶–µ–ª–µ–≤–∞—è –≤–µ—Ç–∫–∞ –¥–ª—è —Å–ª–∏—è–Ω–∏—è'
        required: true
        default: 'main'
        type: choice
        options:
          - 'main'
          - 'develop'
      force_merge:
        description: '–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —Å–ª–∏—è–Ω–∏–µ (–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∏)'
        required: false
        default: false
        type: boolean

env:
  SOURCE_BRANCH: ${{ github.event.inputs.source_branch || 'develop' }}
  TARGET_BRANCH: ${{ github.event.inputs.target_branch || 'main' }}

jobs:
  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –≤–µ—Ç–æ–∫ –∫ —Å–ª–∏—è–Ω–∏—é
  check-merge-readiness:
    name: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ —Å–ª–∏—è–Ω–∏—é
    runs-on: ubuntu-latest
    outputs:
      can_merge: ${{ steps.check.outputs.can_merge }}
      merge_reason: ${{ steps.check.outputs.merge_reason }}
      
    steps:
    - name: Checkout –∫–æ–¥–∞
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # –ü–æ–ª—É—á–∞–µ–º –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
        
    - name: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤–µ—Ç–æ–∫
      id: check
      run: |
        echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –≤–µ—Ç–æ–∫ –∫ —Å–ª–∏—è–Ω–∏—é..."
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –≤–µ—Ç–æ–∫
        if ! git rev-parse --verify origin/$SOURCE_BRANCH >/dev/null 2>&1; then
          echo "‚ùå –í–µ—Ç–∫–∞ $SOURCE_BRANCH –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
          echo "can_merge=false" >> $GITHUB_OUTPUT
          echo "merge_reason=–í–µ—Ç–∫–∞ $SOURCE_BRANCH –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç" >> $GITHUB_OUTPUT
          exit 0
        fi
        
        if ! git rev-parse --verify origin/$TARGET_BRANCH >/dev/null 2>&1; then
          echo "‚ùå –í–µ—Ç–∫–∞ $TARGET_BRANCH –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
          echo "can_merge=false" >> $GITHUB_OUTPUT
          echo "merge_reason=–í–µ—Ç–∫–∞ $TARGET_BRANCH –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç" >> $GITHUB_OUTPUT
          exit 0
        fi
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∫–æ–º–º–∏—Ç—ã
        git fetch origin $SOURCE_BRANCH $TARGET_BRANCH
        SOURCE_COMMIT=$(git rev-parse origin/$SOURCE_BRANCH)
        TARGET_COMMIT=$(git rev-parse origin/$TARGET_BRANCH)
        
        echo "üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–µ—Ç–∫–∞—Ö:"
        echo "  –ò—Å—Ö–æ–¥–Ω–∞—è –≤–µ—Ç–∫–∞: $SOURCE_BRANCH (–∫–æ–º–º–∏—Ç: $SOURCE_COMMIT)"
        echo "  –¶–µ–ª–µ–≤–∞—è –≤–µ—Ç–∫–∞: $TARGET_BRANCH (–∫–æ–º–º–∏—Ç: $TARGET_COMMIT)"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–ª—è —Å–ª–∏—è–Ω–∏—è
        if git merge-base --is-ancestor origin/$SOURCE_BRANCH origin/$TARGET_BRANCH; then
          echo "‚ÑπÔ∏è –í–µ—Ç–∫–∞ $SOURCE_BRANCH —É–∂–µ –≤–∫–ª—é—á–µ–Ω–∞ –≤ $TARGET_BRANCH"
          echo "can_merge=false" >> $GITHUB_OUTPUT
          echo "merge_reason=–í–µ—Ç–∫–∞ $SOURCE_BRANCH —É–∂–µ –≤–∫–ª—é—á–µ–Ω–∞ –≤ $TARGET_BRANCH" >> $GITHUB_OUTPUT
          exit 0
        fi
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
        git checkout -b temp-merge-check origin/$TARGET_BRANCH
        if git merge --no-commit --no-ff origin/$SOURCE_BRANCH >/dev/null 2>&1; then
          echo "‚úÖ –ö–æ–Ω—Ñ–ª–∏–∫—Ç—ã —Å–ª–∏—è–Ω–∏—è –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã"
          echo "can_merge=true" >> $GITHUB_OUTPUT
          echo "merge_reason=–í–µ—Ç–∫–∏ –≥–æ—Ç–æ–≤—ã –∫ —Å–ª–∏—è–Ω–∏—é" >> $GITHUB_OUTPUT
        else
          echo "‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã —Å–ª–∏—è–Ω–∏—è"
          echo "can_merge=false" >> $GITHUB_OUTPUT
          echo "merge_reason=–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã —Å–ª–∏—è–Ω–∏—è" >> $GITHUB_OUTPUT
        fi
        git merge --abort 2>/dev/null || true
        
    - name: –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏
      run: |
        echo "üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏:"
        echo "  –ú–æ–∂–Ω–æ —Å–ª–∏—Ç—å: ${{ steps.check.outputs.can_merge }}"
        echo "  –ü—Ä–∏—á–∏–Ω–∞: ${{ steps.check.outputs.merge_reason }}"

  # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ CI/CD –¥–ª—è –∏—Å—Ö–æ–¥–Ω–æ–π –≤–µ—Ç–∫–∏
  check-ci-status:
    name: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ CI/CD
    runs-on: ubuntu-latest
    needs: check-merge-readiness
    if: needs.check-merge-readiness.outputs.can_merge == 'true'
    outputs:
      ci_passed: ${{ steps.ci-check.outputs.ci_passed }}
      
    steps:
    - name: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ CI/CD
      id: ci-check
      run: |
        echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ CI/CD –¥–ª—è –≤–µ—Ç–∫–∏ $SOURCE_BRANCH..."
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ—Å–ª–µ–¥–Ω–∏—Ö workflow –¥–ª—è –∏—Å—Ö–æ–¥–Ω–æ–π –≤–µ—Ç–∫–∏
        CI_STATUS=$(gh api repos/${{ github.repository }}/actions/runs \
          --jq ".workflow_runs[] | select(.head_branch == \"$SOURCE_BRANCH\" and .event == \"push\") | .conclusion" \
          --limit 1 | head -n1 || echo "unknown")
        
        echo "–°—Ç–∞—Ç—É—Å CI/CD: $CI_STATUS"
        
        if [[ "$CI_STATUS" == "success" || "${{ github.event.inputs.force_merge }}" == "true" ]]; then
          echo "‚úÖ CI/CD –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã"
          echo "ci_passed=true" >> $GITHUB_OUTPUT
        else
          echo "‚ùå CI/CD –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã"
          echo "ci_passed=false" >> $GITHUB_OUTPUT
        fi
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # –°–æ–∑–¥–∞–Ω–∏–µ Pull Request –¥–ª—è —Å–ª–∏—è–Ω–∏—è
  create-merge-pr:
    name: –°–æ–∑–¥–∞–Ω–∏–µ Pull Request –¥–ª—è —Å–ª–∏—è–Ω–∏—è
    runs-on: ubuntu-latest
    needs: [check-merge-readiness, check-ci-status]
    if: needs.check-merge-readiness.outputs.can_merge == 'true' && needs.check-ci-status.outputs.ci_passed == 'true'
    
    steps:
    - name: Checkout –∫–æ–¥–∞
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: –°–æ–∑–¥–∞–Ω–∏–µ Pull Request
      id: create-pr
      run: |
        echo "üîÑ –°–æ–∑–¥–∞–Ω–∏–µ Pull Request –¥–ª—è —Å–ª–∏—è–Ω–∏—è $SOURCE_BRANCH –≤ $TARGET_BRANCH..."
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π PR
        EXISTING_PR=$(gh pr list \
          --head $SOURCE_BRANCH \
          --base $TARGET_BRANCH \
          --state open \
          --json number \
          --jq '.[0].number' || echo "")
        
        if [[ -n "$EXISTING_PR" ]]; then
          echo "‚ÑπÔ∏è –ù–∞–π–¥–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π PR #$EXISTING_PR"
          echo "pr_number=$EXISTING_PR" >> $GITHUB_OUTPUT
        else
          # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π PR
          PR_TITLE="üöÄ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–ª–∏—è–Ω–∏–µ: $SOURCE_BRANCH ‚Üí $TARGET_BRANCH"
          PR_BODY="## üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–ª–∏—è–Ω–∏–∏
          
          **–ò—Å—Ç–æ—á–Ω–∏–∫:** \`$SOURCE_BRANCH\`
          **–¶–µ–ª—å:** \`$TARGET_BRANCH\`
          **–°—Ç—Ä–∞—Ç–µ–≥–∏—è:** Squash Merge
          **–ò–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω–æ:** ${{ github.event_name }}
          
          ### üîÑ –ò–∑–º–µ–Ω–µ–Ω–∏—è
          $(git log --oneline origin/$TARGET_BRANCH..origin/$SOURCE_BRANCH | sed 's/^/- /')
          
          ### ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∏
          - [x] –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ —Å–ª–∏—è–Ω–∏—è
          - [x] –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ CI/CD
          - [ ] –†—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞ (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)
          
          ---
          *–≠—Ç–æ—Ç Pull Request —Å–æ–∑–¥–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–ª—è —Å–ª–∏—è–Ω–∏—è –≤–µ—Ç–æ–∫.*"
          
          PR_NUMBER=$(gh pr create \
            --title "$PR_TITLE" \
            --body "$PR_BODY" \
            --head $SOURCE_BRANCH \
            --base $TARGET_BRANCH \
            --label "automerge" \
            --json number \
            --jq '.number')
          
          echo "‚úÖ –°–æ–∑–¥–∞–Ω PR #$PR_NUMBER"
          echo "pr_number=$PR_NUMBER" >> $GITHUB_OUTPUT
        fi
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–ª–∏—è–Ω–∏–µ Pull Request
  auto-merge-pr:
    name: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–ª–∏—è–Ω–∏–µ Pull Request
    runs-on: ubuntu-latest
    needs: [check-merge-readiness, check-ci-status, create-merge-pr]
    if: needs.check-merge-readiness.outputs.can_merge == 'true' && needs.check-ci-status.outputs.ci_passed == 'true'
    
    steps:
    - name: –û–∂–∏–¥–∞–Ω–∏–µ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –ø—Ä–æ–≤–µ—Ä–æ–∫
      run: |
        echo "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –≤—Å–µ—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫ –¥–ª—è PR #${{ needs.create-merge-pr.outputs.pr_number }}..."
        
        # –û–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫
        timeout 600 bash -c '
          while true; do
            STATUS=$(gh pr view ${{ needs.create-merge-pr.outputs.pr_number }} \
              --json mergeable,mergeStateStatus \
              --jq ".mergeable + \" \" + .mergeStateStatus")
            
            echo "–°—Ç–∞—Ç—É—Å PR: $STATUS"
            
            if [[ "$STATUS" == "true CLEAN" ]]; then
              echo "‚úÖ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã"
              break
            fi
            
            if [[ "$STATUS" == *"BLOCKED"* || "$STATUS" == *"DIRTY"* ]]; then
              echo "‚ùå PR –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∏–ª–∏ –∏–º–µ–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã"
              exit 1
            fi
            
            sleep 30
          done
        '
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: –°–ª–∏—è–Ω–∏–µ Pull Request
      run: |
        echo "üîÑ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–ª–∏—è–Ω–∏—è PR #${{ needs.create-merge-pr.outputs.pr_number }}..."
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º squash merge
        gh pr merge ${{ needs.create-merge-pr.outputs.pr_number }} \
          --squash \
          --delete-branch \
          --commit-title "üöÄ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–ª–∏—è–Ω–∏–µ: $SOURCE_BRANCH ‚Üí $TARGET_BRANCH" \
          --commit-body "–°–ª–∏—è–Ω–∏–µ –≤–µ—Ç–∫–∏ $SOURCE_BRANCH –≤ $TARGET_BRANCH –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —á–µ—Ä–µ–∑ CI/CD.
        
        –ò–∑–º–µ–Ω–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã –≤ –æ–¥–∏–Ω –∫–æ–º–º–∏—Ç –¥–ª—è —á–∏—Å—Ç–æ—Ç—ã –∏—Å—Ç–æ—Ä–∏–∏ –æ—Å–Ω–æ–≤–Ω–æ–π –≤–µ—Ç–∫–∏."
        
        echo "‚úÖ –°–ª–∏—è–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
  notify-result:
    name: –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
    runs-on: ubuntu-latest
    needs: [check-merge-readiness, check-ci-status, create-merge-pr, auto-merge-pr]
    if: always()
    
    steps:
    - name: –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
      run: |
        echo "üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å–ª–∏—è–Ω–∏—è:"
        echo "  –ò—Å—Ö–æ–¥–Ω–∞—è –≤–µ—Ç–∫–∞: $SOURCE_BRANCH"
        echo "  –¶–µ–ª–µ–≤–∞—è –≤–µ—Ç–∫–∞: $TARGET_BRANCH"
        echo "  –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ —Å–ª–∏—è–Ω–∏—é: ${{ needs.check-merge-readiness.outputs.can_merge }}"
        echo "  –ü—Ä–∏—á–∏–Ω–∞: ${{ needs.check-merge-readiness.outputs.merge_reason }}"
        
        if [[ "${{ needs.check-merge-readiness.outputs.can_merge }}" == "true" ]]; then
          echo "  –°—Ç–∞—Ç—É—Å CI/CD: ${{ needs.check-ci-status.outputs.ci_passed }}"
          
          if [[ "${{ needs.check-ci-status.outputs.ci_passed }}" == "true" ]]; then
            echo "  PR —Å–æ–∑–¥–∞–Ω: #${{ needs.create-merge-pr.outputs.pr_number }}"
            echo "  –°—Ç–∞—Ç—É—Å —Å–ª–∏—è–Ω–∏—è: ${{ needs.auto-merge-pr.result }}"
          fi
        fi
        
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ Slack, Teams –∏ —Ç.–¥.
        # TODO: –î–æ–±–∞–≤–∏—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å —Å–∏—Å—Ç–µ–º–∞–º–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π