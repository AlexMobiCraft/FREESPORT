# Docker Compose для production окружения FREESPORT Platform
# version: '3.8'

services:
  # PostgreSQL база данных
  db:
    image: postgres:15-alpine
    container_name: freesport-prod-db
    environment:
      POSTGRES_DB: ${DB_NAME:-freesport}
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d
    networks:
      - freesport-network
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-postgres} -d ${DB_NAME:-freesport}"]
      interval: 30s
      timeout: 10s
      retries: 5
    # Не экспортируем порт наружу в production

  # Redis для кеширования
  redis:
    image: redis:7-alpine
    container_name: freesport-prod-redis
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    networks:
      - freesport-network
    restart: always
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    # Не экспортируем порт наружу в production

  # Django Backend
  backend:
    build:
      context: ../backend
      dockerfile: Dockerfile
      args:
        DJANGO_SETTINGS_MODULE: freesport.settings.production
    container_name: freesport-prod-backend
    environment:
      - DJANGO_SETTINGS_MODULE=freesport.settings.production
      - SECRET_KEY=${SECRET_KEY}
      - DB_NAME=${DB_NAME:-freesport}
      - DB_USER=${DB_USER:-postgres}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_HOST=db
      - DB_PORT=5432
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      - DEBUG=0
      - ALLOWED_HOSTS=${ALLOWED_HOSTS}
      - CORS_ALLOWED_ORIGINS=${CORS_ALLOWED_ORIGINS}
    volumes:
      - backend_media:/app/media
      - backend_static:/app/staticfiles
      - ../data:/app/data
      - ../logs:/app/logs
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - freesport-network
    restart: always
    healthcheck:
      test: ["CMD", "python", "manage.py", "check", "--deploy"]
      interval: 30s
      timeout: 10s
      retries: 5
    # Не экспортируем порт наружу, доступ через nginx

  # Next.js Frontend
  frontend:
    build:
      context: ../frontend
      dockerfile: Dockerfile
      args:
        NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL}
        NODE_ENV: production
    container_name: freesport-prod-frontend
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL}
    networks:
      - freesport-network
    restart: always
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    # Не экспортируем порт наружу, доступ через nginx

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: freesport-prod-nginx
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./ssl:/etc/nginx/ssl:ro
      - backend_static:/var/www/static:ro
      - backend_media:/var/www/media:ro
      - ../logs/nginx:/var/log/nginx
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - backend
      - frontend
    networks:
      - freesport-network
    restart: always

  # Celery Worker
  celery:
    build:
      context: ../backend
      dockerfile: Dockerfile
    container_name: freesport-prod-celery-worker
    command: celery -A freesport worker -l info --concurrency=4
    environment:
      - DJANGO_SETTINGS_MODULE=freesport.settings.production
      - SECRET_KEY=${SECRET_KEY}
      - DB_NAME=${DB_NAME:-freesport}
      - DB_USER=${DB_USER:-postgres}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_HOST=db
      - DB_PORT=5432
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      - CELERY_BROKER_URL=${CELERY_BROKER_URL}
      - DEBUG=0
    volumes:
      - ../data:/app/data
      - ../logs:/app/logs
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - freesport-network
    restart: always

  # Celery Beat Scheduler
  celery-beat:
    build:
      context: ../backend
      dockerfile: Dockerfile
    container_name: freesport-prod-celery-beat
    command: celery -A freesport beat -l info
    environment:
      - DJANGO_SETTINGS_MODULE=freesport.settings.production
      - SECRET_KEY=${SECRET_KEY}
      - DB_NAME=${DB_NAME:-freesport}
      - DB_USER=${DB_USER:-postgres}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_HOST=db
      - DB_PORT=5432
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      - CELERY_BROKER_URL=${CELERY_BROKER_URL}
      - DEBUG=0
    volumes:
      - ../data:/app/data
      - ../logs:/app/logs
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - freesport-network
    restart: always

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  backend_media:
    driver: local
  backend_static:
    driver: local

networks:
  freesport-network:
    driver: bridge
    name: freesport-prod-network