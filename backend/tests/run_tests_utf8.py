#!/usr/bin/env python
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤ —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π UTF-8 –Ω–∞ Windows
"""
import os
import sys
import subprocess

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∫–∏ –¥–ª—è Windows
if sys.platform == 'win32':
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è UTF-8
    os.environ['PYTHONIOENCODING'] = 'utf-8'
    
    # –ü–æ–ø—ã—Ç–∫–∞ –∏–∑–º–µ–Ω–∏—Ç—å –∫–æ–¥–∏—Ä–æ–≤–∫—É –∫–æ–Ω—Å–æ–ª–∏
    try:
        import codecs
        sys.stdout = codecs.getwriter('utf-8')(sys.stdout.detach())
        sys.stderr = codecs.getwriter('utf-8')(sys.stderr.detach())
    except Exception:
        pass

def run_functional_tests():
    """–ó–∞–ø—É—Å–∫ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ HTTP API —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π"""
    
    # –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã HTTP API  
    functional_tests = [
        # User Management API (Story 2.2)
        ('functional/test_user_management_api.py', 'User Management API (Story 2.2)'),
        
        # Personal Cabinet API (Story 2.3)
        ('functional/test_personal_cabinet_api.py', 'Personal Cabinet API (Story 2.3)'),
        
        # Catalog API (Story 2.4)
        ('functional/test_catalog_api.py', 'Catalog API (Story 2.4)'),
        
        # Product Detail API (Story 2.5)
        ('functional/test_product_detail_api.py', 'Product Detail API (Story 2.5)'),
    ]
    
    print("=" * 80)
    print("–ó–ê–ü–£–°–ö –§–£–ù–ö–¶–ò–û–ù–ê–õ–¨–ù–´–• –¢–ï–°–¢–û–í FREESPORT —Å –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π UTF-8")
    print("=" * 80)
    
    for i, (test_file, description) in enumerate(functional_tests, 1):
        print(f"\n[{i}/{len(functional_tests)}] {description}")
        print("-" * 50)
        
        try:
            # –ó–∞–ø—É—Å–∫ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π
            result = subprocess.run(
                ['python', f'tests/{test_file}'],
                capture_output=True,
                text=True,
                encoding='utf-8',
                cwd=os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
            )
            
            if result.returncode == 0:
                print("‚úÖ –¢–µ—Å—Ç –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ")
                # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π
                print(result.stdout)
            else:
                print("‚ùå –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π")
                print("STDOUT:", result.stdout)
                print("STDERR:", result.stderr)
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–µ—Å—Ç–∞: {e}")

def run_unit_tests():
    """–ó–∞–ø—É—Å–∫ unit —Ç–µ—Å—Ç–æ–≤ Django —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π"""
    
    # –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤
    test_commands = [
        # Products API —Ç–µ—Å—Ç—ã
        ['python', 'manage.py', 'test', 'apps.products.tests', '--verbosity=2'],
        
        # Cart API —Ç–µ—Å—Ç—ã (unit)
        ['python', 'manage.py', 'test', 'apps.cart.tests.CartAPITestCase', '--verbosity=2'],
        
        # Cart API —Ç–µ—Å—Ç—ã (integration) 
        ['python', 'manage.py', 'test', 'apps.cart.tests.CartIntegrationTestCase', '--verbosity=2'],
        
        # Users API —Ç–µ—Å—Ç—ã 
        ['python', 'manage.py', 'test', 'tests.test_users', '--verbosity=2'],
        
        # Common API —Ç–µ—Å—Ç—ã (–ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∏–∑-–∑–∞ pytest –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞)
        # ['python', 'manage.py', 'test', 'tests.test_common', '--verbosity=2'],
    ]
    
    print("=" * 80)
    print("–ó–ê–ü–£–°–ö UNIT –¢–ï–°–¢–û–í FREESPORT —Å –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π UTF-8")
    print("=" * 80)
    
    for i, command in enumerate(test_commands, 1):
        app_name = command[3].split('.')[1]
        test_type = 'ALL' if len(command[3].split('.')) == 2 else command[3].split('.')[2]
        
        print(f"\n[{i}/{len(test_commands)}] –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ {app_name.upper()} API ({test_type})")
        print("-" * 50)
        
        try:
            # –ó–∞–ø—É—Å–∫ –∫–æ–º–∞–Ω–¥—ã —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π
            result = subprocess.run(
                command,
                capture_output=True,
                text=True,
                encoding='utf-8',
                cwd=os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
            )
            
            if result.returncode == 0:
                print(f"‚úÖ {app_name.upper()} —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ")
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É
                lines = result.stdout.split('\n')
                for line in lines:
                    if 'Ran' in line and 'test' in line:
                        print(f"üìä {line}")
                    elif 'OK' in line and len(line.strip()) <= 10:
                        print(f"‚úÖ {line}")
            else:
                print(f"‚ùå {app_name.upper()} —Ç–µ—Å—Ç—ã —É–ø–∞–ª–∏")
                print("STDOUT:", result.stdout[-500:])  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 500 —Å–∏–º–≤–æ–ª–æ–≤
                print("STDERR:", result.stderr[-500:])
                
        except FileNotFoundError:
            print(f"‚ùå –¢–µ—Å—Ç—ã –¥–ª—è {app_name} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–µ—Å—Ç–æ–≤ {app_name}: {e}")
    
    print("\n" + "=" * 80)
    print("UNIT –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û")
    print("=" * 80)

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å –≤—ã–±–æ—Ä–æ–º —Ç–∏–ø–∞ —Ç–µ—Å—Ç–æ–≤"""
    if len(sys.argv) > 1:
        if sys.argv[1] == '--functional':
            run_functional_tests()
        elif sys.argv[1] == '--unit':
            run_unit_tests()
        else:
            print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:")
            print("  python run_tests_utf8.py --functional  # –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã HTTP API")
            print("  python run_tests_utf8.py --unit        # Unit —Ç–µ—Å—Ç—ã Django")
            print("  python run_tests_utf8.py               # –í—Å–µ —Ç–µ—Å—Ç—ã")
    else:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Ç–µ—Å—Ç—ã
        run_functional_tests()
        print("\n")
        run_unit_tests()

if __name__ == '__main__':
    main()