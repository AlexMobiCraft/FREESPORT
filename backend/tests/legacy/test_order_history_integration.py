#!/usr/bin/env python
"""
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç –¥–ª—è OrderHistoryView
"""
import os
import sys
import django

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
os.environ.setdefault("DJANGO_SETTINGS_MODULE", "freesport.settings.test")


from django.contrib.auth import get_user_model  # noqa: E402
from rest_framework.test import APIClient  # noqa: E402
from rest_framework_simplejwt.tokens import (  # noqa: E402
    RefreshToken as JWTRefreshToken,
)

from apps.orders.models import Order  # noqa: E402

django.setup()

User = get_user_model()


def test_order_history_api():
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç API –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–∫–∞–∑–æ–≤"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º Order History API...")

    try:
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        import time

        unique_email = f"test{int(time.time())}@test.com"
        user = User.objects.create_user(
            username=unique_email,
            email=unique_email,
            password="testpass123",
            first_name="Test",
            last_name="User",
        )
        print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω: {user}")

        # –°–æ–∑–¥–∞–µ–º JWT —Ç–æ–∫–µ–Ω
        refresh = JWTRefreshToken.for_user(user)
        access_token = str(refresh)

        # –°–æ–∑–¥–∞–µ–º API –∫–ª–∏–µ–Ω—Ç
        client = APIClient()
        client.credentials(HTTP_AUTHORIZATION=f"Bearer {access_token}")
        print("‚úÖ API –∫–ª–∏–µ–Ω—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω —Å JWT —Ç–æ–∫–µ–Ω–æ–º")

        # –¢–µ—Å—Ç 1: –ü—É—Å—Ç–∞—è –∏—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤
        response = client.get("/api/v1/users/orders/")
        print(f"üìã –û—Ç–≤–µ—Ç API: —Å—Ç–∞—Ç—É—Å {response.status_code}")
        if response.status_code != 200:
            print(f"‚ùå –û—à–∏–±–∫–∞ API: {response.content}")
            print(f"‚ùå –ó–∞–≥–æ–ª–æ–≤–∫–∏: {response.headers}")
        assert response.status_code == 200
        data = response.json()
        assert data["count"] == 0
        assert data["results"] == []

        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã
        order1 = Order.objects.create(
            user=user,
            order_number="TEST-001",
            status="pending",
            total_amount=1000.00,
            delivery_address="Test Address 1",
            delivery_method="courier",
            payment_method="card",
        )

        order2 = Order.objects.create(
            user=user,
            order_number="TEST-002",
            status="delivered",
            total_amount=2000.00,
            delivery_address="Test Address 2",
            delivery_method="courier",
            payment_method="card",
        )
        print(f"‚úÖ –ó–∞–∫–∞–∑—ã —Å–æ–∑–¥–∞–Ω—ã: {Order.objects.filter(user=user).count()}")

        # –¢–µ—Å—Ç 2: –ò—Å—Ç–æ—Ä–∏—è —Å –∑–∞–∫–∞–∑–∞–º–∏
        response = client.get("/api/v1/users/orders/")
        print(f"‚úÖ –¢–µ—Å—Ç –∏—Å—Ç–æ—Ä–∏–∏ —Å –∑–∞–∫–∞–∑–∞–º–∏: {response.status_code}")
        assert response.status_code == 200
        data = response.json()
        assert data["count"] == 2
        assert len(data["results"]) == 2

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
        order_data = data["results"][0]  # –ü–µ—Ä–≤—ã–π –∑–∞–∫–∞–∑ (—Å–∞–º—ã–π –Ω–æ–≤—ã–π)
        expected_fields = [
            "id",
            "order_number",
            "status",
            "status_display",
            "payment_status",
            "payment_status_display",
            "total_amount",
            "discount_amount",
            "delivery_cost",
            "items_count",
            "customer_display_name",
            "created_at",
            "updated_at",
        ]
        for field in expected_fields:
            assert field in order_data, f"–ü–æ–ª–µ {field} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
        print("‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")

        # –¢–µ—Å—Ç 3: –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Å—Ç–∞—Ç—É—Å—É
        response = client.get("/api/v1/users/orders/?status=pending")
        print(f"‚úÖ –¢–µ—Å—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏: {response.status_code}")
        assert response.status_code == 200
        data = response.json()
        assert data["count"] == 1
        assert data["results"][0]["status"] == "pending"

        # –û—á–∏—Å—Ç–∫–∞
        order1.delete()
        order2.delete()
        user.delete()

        print("\nüéâ –í—Å–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        return True

    except Exception as e:
        print(f"\n‚ùå –û–®–ò–ë–ö–ê: {e}")
        import traceback

        traceback.print_exc()
        return False


if __name__ == "__main__":
    success = test_order_history_api()
    sys.exit(0 if success else 1)
