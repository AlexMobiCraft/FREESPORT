"""
Performance —Ç–µ—Å—Ç—ã –¥–ª—è –∫–æ–º–∞–Ω–¥—ã –∏–º–ø–æ—Ä—Ç–∞ –∫–∞—Ç–∞–ª–æ–≥–∞ –∏–∑ 1–°
"""
import tempfile
import time
from io import StringIO

import pytest
from django.core.management import call_command
from django.test import override_settings

from apps.products.models import ImportSession, Product


def generate_test_xml_with_n_products(n: int) -> bytes:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç XML —Å N —Ç–æ–≤–∞—Ä–∞–º–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    goods_items = []
    for i in range(n):
        goods_items.append(
            f"""    <–¢–æ–≤–∞—Ä>
      <–ò–¥>parent-uuid-{i:04d}</–ò–¥>
      <–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ>–¢–µ—Å—Ç–æ–≤—ã–π —Ç–æ–≤–∞—Ä {i}</–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ>
      <–ê—Ä—Ç–∏–∫—É–ª>TEST-{i:04d}</–ê—Ä—Ç–∏–∫—É–ª>
    </–¢–æ–≤–∞—Ä>"""
        )

    goods_xml = f"""<?xml version="1.0" encoding="UTF-8"?>
<–ö–∞—Ç–∞–ª–æ–≥>
  <–¢–æ–≤–∞—Ä—ã>
{chr(10).join(goods_items)}
  </–¢–æ–≤–∞—Ä—ã>
</–ö–∞—Ç–∞–ª–æ–≥>"""

    return goods_xml.encode("utf-8")


def generate_offers_xml_with_n_products(n: int) -> bytes:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç offers.xml —Å N —Ç–æ–≤–∞—Ä–∞–º–∏"""
    offer_items = []
    for i in range(n):
        offer_items.append(
            f"""    <–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ>
      <–ò–¥>parent-uuid-{i:04d}#sku-uuid-{i:04d}</–ò–¥>
      <–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ>–¢–µ—Å—Ç–æ–≤—ã–π —Ç–æ–≤–∞—Ä {i} SKU</–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ>
      <–ê—Ä—Ç–∏–∫—É–ª>TEST-{i:04d}-SKU</–ê—Ä—Ç–∏–∫—É–ª>
    </–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ>"""
        )

    offers_xml = f"""<?xml version="1.0" encoding="UTF-8"?>
<–ü–∞–∫–µ—Ç–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π>
  <–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è>
{chr(10).join(offer_items)}
  </–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è>
</–ü–∞–∫–µ—Ç–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π>"""

    return offers_xml.encode("utf-8")


def generate_prices_xml_with_n_products(n: int) -> bytes:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç prices.xml —Å N —Ç–æ–≤–∞—Ä–∞–º–∏"""
    price_items = []
    for i in range(n):
        price = 1000.00 + (i * 10)
        price_items.append(
            f"""    <–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ>
      <–ò–¥>parent-uuid-{i:04d}#sku-uuid-{i:04d}</–ò–¥>
      <–¶–µ–Ω—ã>
        <–¶–µ–Ω–∞>
          <–ò–¥–¢–∏–ø–∞–¶–µ–Ω—ã>retail-uuid</–ò–¥–¢–∏–ø–∞–¶–µ–Ω—ã>
          <–¶–µ–Ω–∞–ó–∞–ï–¥–∏–Ω–∏—Ü—É>{price:.2f}</–¶–µ–Ω–∞–ó–∞–ï–¥–∏–Ω–∏—Ü—É>
        </–¶–µ–Ω–∞>
      </–¶–µ–Ω—ã>
    </–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ>"""
        )

    prices_xml = f"""<?xml version="1.0" encoding="UTF-8"?>
<–ü–∞–∫–µ—Ç–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π>
  <–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è>
{chr(10).join(price_items)}
  </–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è>
</–ü–∞–∫–µ—Ç–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π>"""

    return prices_xml.encode("utf-8")


def generate_rests_xml_with_n_products(n: int) -> bytes:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç rests.xml —Å N —Ç–æ–≤–∞—Ä–∞–º–∏"""
    rest_items = []
    for i in range(n):
        quantity = 10 + (i % 50)
        rest_items.append(
            f"""    <–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ>
      <–ò–¥>parent-uuid-{i:04d}#sku-uuid-{i:04d}</–ò–¥>
      <–û—Å—Ç–∞—Ç–∫–∏>
        <–û—Å—Ç–∞—Ç–æ–∫>
          <–°–∫–ª–∞–¥>warehouse-1</–°–∫–ª–∞–¥>
          <–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ>{quantity}</–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ>
        </–û—Å—Ç–∞—Ç–æ–∫>
      </–û—Å—Ç–∞—Ç–∫–∏>
    </–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ>"""
        )

    rests_xml = f"""<?xml version="1.0" encoding="UTF-8"?>
<–ü–∞–∫–µ—Ç–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π>
  <–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è>
{chr(10).join(rest_items)}
  </–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è>
</–ü–∞–∫–µ—Ç–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π>"""

    return rests_xml.encode("utf-8")


@pytest.mark.django_db
@pytest.mark.slow
class TestImportPerformance:
    """Performance —Ç–µ—Å—Ç—ã –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –∫–∞—Ç–∞–ª–æ–≥–∞"""

    def setup_test_data_directory(self, tmp_path, num_products: int):
        """–°–æ–∑–¥–∞–µ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ XML —Ñ–∞–π–ª–∞–º–∏"""
        test_dir = tmp_path / "perf_test_data"
        test_dir.mkdir()

        # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        for subdir in ["goods", "offers", "prices", "rests", "priceLists"]:
            (test_dir / subdir).mkdir()

        # –°–æ–∑–¥–∞–µ–º priceLists.xml
        price_lists_xml = """<?xml version="1.0" encoding="UTF-8"?>
<–ü–∞–∫–µ—Ç–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π>
  <–¢–∏–ø—ã–¶–µ–Ω>
    <–¢–∏–ø–¶–µ–Ω—ã>
      <–ò–¥>retail-uuid</–ò–¥>
      <–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ>–†–†–¶</–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ>
      <–í–∞–ª—é—Ç–∞>RUB</–í–∞–ª—é—Ç–∞>
    </–¢–∏–ø–¶–µ–Ω—ã>
  </–¢–∏–ø—ã–¶–µ–Ω>
</–ü–∞–∫–µ—Ç–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π>"""
        (test_dir / "priceLists" / "priceLists.xml").write_bytes(
            price_lists_xml.encode("utf-8")
        )

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º XML —Ñ–∞–π–ª—ã —Å N —Ç–æ–≤–∞—Ä–∞–º–∏
        (test_dir / "goods" / "goods.xml").write_bytes(
            generate_test_xml_with_n_products(num_products)
        )
        (test_dir / "offers" / "offers.xml").write_bytes(
            generate_offers_xml_with_n_products(num_products)
        )
        (test_dir / "prices" / "prices.xml").write_bytes(
            generate_prices_xml_with_n_products(num_products)
        )
        (test_dir / "rests" / "rests.xml").write_bytes(
            generate_rests_xml_with_n_products(num_products)
        )

        return test_dir

    @override_settings(BACKUP_DIR=tempfile.gettempdir())
    def test_import_100_products_performance(self, tmp_path):
        """–¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏–º–ø–æ—Ä—Ç–∞ 100 —Ç–æ–≤–∞—Ä–æ–≤ (baseline)"""
        test_dir = self.setup_test_data_directory(tmp_path, 100)

        start_time = time.time()
        out = StringIO()

        call_command("import_catalog_from_1c", "--data-dir", str(test_dir), stdout=out)

        end_time = time.time()
        elapsed_time = end_time - start_time

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∏–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —É—Å–ø–µ—à–Ω–æ
        output = out.getvalue()
        assert "–ò–ú–ü–û–†–¢ –ó–ê–í–ï–†–®–ï–ù –£–°–ü–ï–®–ù–û" in output

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
        assert Product.objects.count() >= 100

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–µ—Å—Å–∏–∏
        session = ImportSession.objects.latest("started_at")
        assert session.status == ImportSession.ImportStatus.COMPLETED

        # Baseline: 100 —Ç–æ–≤–∞—Ä–æ–≤ –¥–æ–ª–∂–Ω—ã –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è –∑–∞ —Ä–∞–∑—É–º–Ω–æ–µ –≤—Ä–µ–º—è
        assert (
            elapsed_time < 60
        ), f"Import of 100 products took {elapsed_time:.2f}s, expected < 60s"

        print(f"\n‚úÖ Import of 100 products completed in {elapsed_time:.2f}s")

    @override_settings(BACKUP_DIR=tempfile.gettempdir())
    def test_import_1000_products_within_timeout(self, tmp_path):
        """–¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ 1000 —Ç–æ–≤–∞—Ä–æ–≤ –≤ –¥–æ–ø—É—Å—Ç–∏–º–æ–µ –≤—Ä–µ–º—è (<5 –º–∏–Ω—É—Ç) - DoD requirement"""
        test_dir = self.setup_test_data_directory(tmp_path, 1000)

        start_time = time.time()
        out = StringIO()

        call_command("import_catalog_from_1c", "--data-dir", str(test_dir), stdout=out)

        end_time = time.time()
        elapsed_time = end_time - start_time

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∏–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —É—Å–ø–µ—à–Ω–æ
        output = out.getvalue()
        assert "–ò–ú–ü–û–†–¢ –ó–ê–í–ï–†–®–ï–ù –£–°–ü–ï–®–ù–û" in output

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
        assert Product.objects.count() >= 1000

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–µ—Å—Å–∏–∏
        session = ImportSession.objects.latest("started_at")
        assert session.status == ImportSession.ImportStatus.COMPLETED

        # DoD requirement: –∏–º–ø–æ—Ä—Ç 1000+ —Ç–æ–≤–∞—Ä–æ–≤ –¥–æ–ª–∂–µ–Ω –∑–∞–≤–µ—Ä—à–∞—Ç—å—Å—è
        # –∑–∞ < 5 –º–∏–Ω—É—Ç (300 —Å–µ–∫—É–Ω–¥)
        assert elapsed_time < 300, (
            f"Import of 1000 products took {elapsed_time:.2f}s, "
            f"expected < 300s (DoD requirement)"
        )

        print(f"\n‚úÖ Import of 1000 products completed in " f"{elapsed_time:.2f}s")
        print(f"   Performance: {1000 / elapsed_time:.2f} products/second")

    @override_settings(BACKUP_DIR=tempfile.gettempdir())
    def test_import_with_chunk_size_performance(self, tmp_path):
        """–¢–µ—Å—Ç –≤–ª–∏—è–Ω–∏—è chunk-size –Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å"""
        test_dir = self.setup_test_data_directory(tmp_path, 500)

        # –¢–µ—Å—Ç —Å chunk-size=100
        Product.objects.all().delete()
        ImportSession.objects.all().delete()

        start_time = time.time()
        call_command(
            "import_catalog_from_1c",
            "--data-dir",
            str(test_dir),
            "--chunk-size",
            "100",
        )
        time_chunk_100 = time.time() - start_time

        # –¢–µ—Å—Ç —Å chunk-size=500
        Product.objects.all().delete()
        ImportSession.objects.all().delete()

        start_time = time.time()
        call_command(
            "import_catalog_from_1c",
            "--data-dir",
            str(test_dir),
            "--chunk-size",
            "500",
        )
        time_chunk_500 = time.time() - start_time

        print("\nüìä Chunk size performance comparison:")
        print(f"   chunk-size=100: {time_chunk_100:.2f}s")
        print(f"   chunk-size=500: {time_chunk_500:.2f}s")
        print(
            f"   Difference: {abs(time_chunk_100 - time_chunk_500):.2f}s "
            f"({abs(time_chunk_100 - time_chunk_500) / time_chunk_100 * 100:.1f}%)"
        )

        # –û–±–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –¥–æ–ª–∂–Ω—ã –∑–∞–≤–µ—Ä—à–∞—Ç—å—Å—è –∑–∞ —Ä–∞–∑—É–º–Ω–æ–µ –≤—Ä–µ–º—è
        assert time_chunk_100 < 180, f"chunk-size=100 took {time_chunk_100:.2f}s"
        assert time_chunk_500 < 180, f"chunk-size=500 took {time_chunk_500:.2f}s"

    @override_settings(BACKUP_DIR=tempfile.gettempdir())
    def test_import_memory_usage(self, tmp_path):
        """–¢–µ—Å—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ"""
        import tracemalloc

        test_dir = self.setup_test_data_directory(tmp_path, 500)

        tracemalloc.start()

        call_command("import_catalog_from_1c", "--data-dir", str(test_dir))

        current, peak = tracemalloc.get_traced_memory()
        tracemalloc.stop()

        memory_mb = peak / 1024 / 1024

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏ —Ä–∞–∑—É–º–Ω–æ–µ
        assert (
            memory_mb < 200
        ), f"Memory usage {memory_mb:.2f}MB exceeds 200MB limit for 500 products"

        print(f"\nüíæ Memory usage for 500 products: {memory_mb:.2f}MB")
        print(f"   Peak memory: {peak / 1024 / 1024:.2f}MB")
        print(f"   Current memory: {current / 1024 / 1024:.2f}MB")

    @override_settings(BACKUP_DIR=tempfile.gettempdir())
    def test_import_database_queries_efficiency(self, tmp_path):
        """–¢–µ—Å—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ –ë–î –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ"""
        from django.db import connection, reset_queries
        from django.test.utils import override_settings as django_override_settings

        test_dir = self.setup_test_data_directory(tmp_path, 100)

        with django_override_settings(DEBUG=True):
            reset_queries()

            call_command("import_catalog_from_1c", "--data-dir", str(test_dir))

            queries_count = len(connection.queries)

        # Bulk operations –¥–æ–ª–∂–Ω—ã –º–∏–Ω–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤
        # –î–ª—è 100 —Ç–æ–≤–∞—Ä–æ–≤ –æ–∂–∏–¥–∞–µ–º —Ä–∞–∑—É–º–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ (–Ω–µ N+1)
        queries_per_product = queries_count / 100

        print("\nüóÑÔ∏è  Database queries for 100 products:")
        print(f"   Total queries: {queries_count}")
        print(f"   Queries per product: {queries_per_product:.2f}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è bulk operations
        # ~12-15 –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ —Ç–æ–≤–∞—Ä –Ω–æ—Ä–º–∞–ª—å–Ω–æ —Å —É—á–µ—Ç–æ–º:
        # goods, offers, prices (2 —Ç–∏–ø–∞), rests, categories, brands
        assert (
            queries_per_product < 20
        ), f"Too many queries per product: {queries_per_product:.2f}"

    @override_settings(BACKUP_DIR=tempfile.gettempdir())
    def test_import_with_skip_validation_performance(self, tmp_path):
        """–¢–µ—Å—Ç –≤–ª–∏—è–Ω–∏—è --skip-validation –Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å"""
        test_dir = self.setup_test_data_directory(tmp_path, 500)

        # –¢–µ—Å—Ç —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
        Product.objects.all().delete()
        ImportSession.objects.all().delete()

        start_time = time.time()
        call_command("import_catalog_from_1c", "--data-dir", str(test_dir))
        time_with_validation = time.time() - start_time

        # –¢–µ—Å—Ç –±–µ–∑ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        Product.objects.all().delete()
        ImportSession.objects.all().delete()

        start_time = time.time()
        call_command(
            "import_catalog_from_1c", "--data-dir", str(test_dir), "--skip-validation"
        )
        time_without_validation = time.time() - start_time

        speedup = (
            (time_with_validation - time_without_validation) / time_with_validation
        ) * 100

        print("\n‚ö° Skip validation performance impact:")
        print(f"   With validation: {time_with_validation:.2f}s")
        print(f"   Without validation: {time_without_validation:.2f}s")
        print(f"   Speedup: {speedup:.1f}%")

        # Skip-validation –º–æ–∂–µ—Ç –Ω–µ –≤—Å–µ–≥–¥–∞ —É—Å–∫–æ—Ä—è—Ç—å –∏–∑-–∑–∞ overhead –∏ –¥—Ä—É–≥–∏—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤
        # –ü—Ä–æ—Å—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ–±–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –∑–∞–≤–µ—Ä—à–∞—é—Ç—Å—è –∑–∞ —Ä–∞–∑—É–º–Ω–æ–µ –≤—Ä–µ–º—è
        assert (
            time_with_validation < 30
        ), f"With validation took {time_with_validation:.2f}s, expected < 30s"
        assert (
            time_without_validation < 30
        ), f"Without validation took {time_without_validation:.2f}s, expected < 30s"
