"""
–ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø–æ–¥–≥–æ—Ç–æ–≤–∫–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
"""
import os
import sys
import redis
from django.test import TestCase
from django.core.cache import cache
from django.core.management import call_command
from rest_framework.test import APITestCase, APIClient
from rest_framework import status

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django –æ–∫—Ä—É–∂–µ–Ω–∏—è
backend_path = os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
sys.path.append(backend_path)
os.environ.setdefault("DJANGO_SETTINGS_MODULE", "freesport.settings.test")

import django
django.setup()

from apps.users.models import User


class BaseFunctionalTest(APITestCase):
    """
    –ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
    –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏:
    - –û—á–∏—â–∞–µ—Ç –∫—ç—à –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º —Ç–µ—Å—Ç–æ–º
    - –ó–∞–≥—Ä—É–∂–∞–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    - –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç API –∫–ª–∏–µ–Ω—Ç
    """
    
    @classmethod
    def setUpClass(cls):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–ª–∞—Å—Å–∞ —Ç–µ—Å—Ç–æ–≤"""
        super().setUpClass()
        cls.client = APIClient()
        print(f"\nüß™ –ó–∞–ø—É—Å–∫ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: {cls.__name__}")
    
    def setUp(self):
        """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º —Ç–µ—Å—Ç–æ–º"""
        super().setUp()
        
        # –û—á–∏—â–∞–µ–º –∫—ç—à
        self.clear_all_cache()
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –±–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        self.load_test_data()
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º API –∫–ª–∏–µ–Ω—Ç
        self.client = APIClient()
    
    def tearDown(self):
        """–û—á–∏—Å—Ç–∫–∞ –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ —Ç–µ—Å—Ç–∞"""
        super().tearDown()
        
        # –û—á–∏—â–∞–µ–º –∫—ç—à –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–∞
        self.clear_all_cache()
    
    def clear_all_cache(self):
        """–û—á–∏—â–∞–µ—Ç –≤—Å–µ –≤–∏–¥—ã –∫—ç—à–∞"""
        try:
            # –û—á–∏—â–∞–µ–º Django –∫—ç—à
            cache.clear()
            
            # –û—á–∏—â–∞–µ–º Redis –∫—ç—à
            try:
                r = redis.Redis(host='localhost', port=6379, db=1)
                r.flushdb()
            except:
                pass  # Redis –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –≤ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —Ç–µ—Å—Ç–∞—Ö
                
        except Exception as e:
            print(f"   ‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫—ç—à–∞: {e}")
    
    def load_test_data(self):
        """
        –ó–∞–≥—Ä—É–∂–∞–µ—Ç –±–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏—Ç–µ –≤ –Ω–∞—Å–ª–µ–¥—É–µ–º—ã—Ö –∫–ª–∞—Å—Å–∞—Ö –¥–ª—è —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        """
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        self.create_test_users()
    
    def create_test_users(self):
        """–°–æ–∑–¥–∞–µ—Ç –±–∞–∑–æ–≤—ã—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        # –°–æ–∑–¥–∞–µ–º retail –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if not User.objects.filter(email='retail@test.com').exists():
            self.retail_user = User.objects.create_user(
                email='retail@test.com',
                password='TestPass123!',
                first_name='–ò–≤–∞–Ω',
                last_name='–ü–µ—Ç—Ä–æ–≤',
                phone='+79001234567',
                role='retail'
            )
        else:
            self.retail_user = User.objects.get(email='retail@test.com')
        
        # –°–æ–∑–¥–∞–µ–º B2B –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if not User.objects.filter(email='b2b@test.com').exists():
            self.b2b_user = User.objects.create_user(
                email='b2b@test.com',
                password='TestPass123!',
                first_name='–ú–∞—Ä–∏—è',
                last_name='–°–∏–¥–æ—Ä–æ–≤–∞',
                phone='+79001234568',
                role='wholesale_level1',
                company_name='–û–û–û –¢–µ—Å—Ç',
                tax_id='1234567890'
            )
        else:
            self.b2b_user = User.objects.get(email='b2b@test.com')
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—è —Ñ–µ–¥–µ—Ä–∞—Ü–∏–∏
        if not User.objects.filter(email='federation@test.com').exists():
            self.federation_user = User.objects.create_user(
                email='federation@test.com',
                password='TestPass123!',
                first_name='–ê–ª–µ–∫—Å–µ–π',
                last_name='–§–µ–¥–æ—Ä–æ–≤',
                phone='+79001234569',
                role='federation_rep',
                company_name='–§–µ–¥–µ—Ä–∞—Ü–∏—è –°–ø–æ—Ä—Ç–∞'
            )
        else:
            self.federation_user = User.objects.get(email='federation@test.com')
    
    def authenticate_user(self, user):
        """–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è API –∑–∞–ø—Ä–æ—Å–æ–≤"""
        login_data = {
            'email': user.email,
            'password': 'TestPass123!'
        }
        response = self.client.post('/api/auth/login/', login_data)
        if response.status_code == 200 and 'access' in response.data:
            token = response.data['access']
            self.client.credentials(HTTP_AUTHORIZATION=f'Bearer {token}')
            return token
        return None
    
    def logout_user(self):
        """–í—ã—Ö–æ–¥–∏—Ç –∏–∑ —Å–∏—Å—Ç–µ–º—ã (—É–±–∏—Ä–∞–µ—Ç —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏)"""
        self.client.credentials()
    
    def assert_api_success(self, response, expected_status=status.HTTP_200_OK):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —É—Å–ø–µ—à–Ω–æ—Å—Ç—å API –æ—Ç–≤–µ—Ç–∞"""
        self.assertEqual(
            response.status_code, 
            expected_status,
            f"–û–∂–∏–¥–∞–ª—Å—è —Å—Ç–∞—Ç—É—Å {expected_status}, –ø–æ–ª—É—á–µ–Ω {response.status_code}. "
            f"–û—Ç–≤–µ—Ç: {response.data if hasattr(response, 'data') else response.content}"
        )
    
    def assert_api_error(self, response, expected_status=status.HTTP_400_BAD_REQUEST):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —á—Ç–æ API –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É"""
        self.assertEqual(
            response.status_code,
            expected_status,
            f"–û–∂–∏–¥–∞–ª–∞—Å—å –æ—à–∏–±–∫–∞ {expected_status}, –ø–æ–ª—É—á–µ–Ω {response.status_code}. "
            f"–û—Ç–≤–µ—Ç: {response.data if hasattr(response, 'data') else response.content}"
        )
    
    def print_test_info(self, test_name, description):
        """–í—ã–≤–æ–¥–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ—Å—Ç–µ"""
        print(f"\n   üîç {test_name}: {description}")


class UserManagementFunctionalTest(BaseFunctionalTest):
    """
    –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –±–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è —Ç–µ—Å—Ç–æ–≤ User Management API
    """
    
    def load_test_data(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–ª—è User Management —Ç–µ—Å—Ç–æ–≤"""
        super().load_test_data()
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è User Management —Ç–µ—Å—Ç–æ–≤
        # –ù–∞–ø—Ä–∏–º–µ—Ä, —Å–æ–∑–¥–∞–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ä–æ–ª–µ–π, –≥—Ä—É–ø–ø –∏ —Ç.–¥.
        pass


class CartFunctionalTest(BaseFunctionalTest):
    """
    –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –±–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è —Ç–µ—Å—Ç–æ–≤ Cart API
    """
    
    def load_test_data(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–ª—è Cart —Ç–µ—Å—Ç–æ–≤"""
        super().load_test_data()
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è Cart —Ç–µ—Å—Ç–æ–≤
        # –ù–∞–ø—Ä–∏–º–µ—Ä, —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤, –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏ —Ç.–¥.
        pass
