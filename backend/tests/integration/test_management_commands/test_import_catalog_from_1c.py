"""
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –∫–æ–º–∞–Ω–¥—ã import_catalog_from_1c
"""

import json
import tempfile
from io import StringIO
from pathlib import Path

import pytest
from django.core.management import call_command
from django.core.management.base import CommandError

from apps.products.models import Product, Brand, Category


@pytest.mark.integration
@pytest.mark.django_db
class TestImportCatalogFrom1CCommand:
    """–¢–µ—Å—Ç—ã –∫–æ–º–∞–Ω–¥—ã –∏–º–ø–æ—Ä—Ç–∞ –∫–∞—Ç–∞–ª–æ–≥–∞ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ 1–°"""
    
    def test_command_with_mock_data_success(self):
        """–¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
        out = StringIO()
        
        call_command(
            'import_catalog_from_1c',
            '--mock-data',
            '--dry-run',
            stdout=out,
            verbosity=1
        )
        
        output = out.getvalue()
        assert 'üöÄ –ó–∞–ø—É—Å–∫ –∏–º–ø–æ—Ä—Ç–∞ –∫–∞—Ç–∞–ª–æ–≥–∞ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ 1–°' in output
        assert 'üì¶ –ó–∞–≥—Ä—É–∂–µ–Ω—ã —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ: 20 —Ç–æ–≤–∞—Ä–æ–≤' in output
        assert '‚úÖ DRY-RUN –∑–∞–≤–µ—Ä—à–µ–Ω: 20 —Ç–æ–≤–∞—Ä–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ' in output
    
    def test_command_creates_products_with_mock_data(self):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
        initial_count = Product.objects.count()
        
        call_command(
            'import_catalog_from_1c',
            '--mock-data',
            verbosity=0
        )
        
        final_count = Product.objects.count()
        assert final_count > initial_count
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã
        test_products = Product.objects.filter(onec_id__startswith='1C-PRODUCT-')
        assert test_products.count() == 20
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ç–æ–≤–∞—Ä
        first_product = test_products.get(onec_id='1C-PRODUCT-00001')
        assert first_product.name == '–¢–æ–≤–∞—Ä —Ç–µ—Å—Ç–æ–≤—ã–π #1'
        assert first_product.sku == 'SKU-00001'
        assert first_product.sync_status == 'synced'
        assert first_product.retail_price > 0
    
    def test_command_creates_brands_and_categories(self):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –±—Ä–µ–Ω–¥–æ–≤ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
        initial_brands = Brand.objects.count()
        initial_categories = Category.objects.count()
        
        call_command(
            'import_catalog_from_1c',
            '--mock-data',
            verbosity=0
        )
        
        # –î–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω—ã –±—Ä–µ–Ω–¥—ã –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        assert Brand.objects.count() > initial_brands
        assert Category.objects.count() > initial_categories
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ç–æ–≤–∞—Ä—ã —Å–≤—è–∑–∞–Ω—ã —Å –±—Ä–µ–Ω–¥–∞–º–∏ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
        test_products = Product.objects.filter(onec_id__startswith='1C-PRODUCT-')
        products_with_brand = test_products.exclude(brand__isnull=True).count()
        products_with_category = test_products.exclude(category__isnull=True).count()
        
        assert products_with_brand > 0
        assert products_with_category > 0
    
    def test_command_with_json_file_success(self):
        """–¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã —Å JSON —Ñ–∞–π–ª–æ–º"""
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π JSON —Ñ–∞–π–ª
        test_data = {
            "products": [
                {
                    "onec_id": "JSON-TEST-001",
                    "name": "–¢–µ—Å—Ç–æ–≤—ã–π —Ç–æ–≤–∞—Ä –∏–∑ JSON",
                    "brand": "Test Brand",
                    "category": "Test Category",
                    "sku": "JSON-SKU-001",
                    "stock_quantity": 10,
                    "prices": {
                        "retail_price": "1000.00",
                        "opt1_price": "900.00"
                    }
                }
            ]
        }
        
        with tempfile.NamedTemporaryFile(mode='w', suffix='.json', delete=False) as f:
            json.dump(test_data, f, ensure_ascii=False)
            json_file_path = f.name
        
        try:
            call_command(
                'import_catalog_from_1c',
                f'--file={json_file_path}',
                verbosity=0
            )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ç–æ–≤–∞—Ä —Å–æ–∑–¥–∞–Ω
            product = Product.objects.get(onec_id='JSON-TEST-001')
            assert product.name == '–¢–µ—Å—Ç–æ–≤—ã–π —Ç–æ–≤–∞—Ä –∏–∑ JSON'
            assert product.sku == 'JSON-SKU-001'
            assert product.stock_quantity == 10
            assert product.retail_price == 1000
            
        finally:
            Path(json_file_path).unlink()
    
    def test_command_with_invalid_json_file_fails(self):
        """–¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º JSON —Ñ–∞–π–ª–æ–º"""
        with tempfile.NamedTemporaryFile(mode='w', suffix='.json', delete=False) as f:
            f.write('invalid json content')
            json_file_path = f.name
        
        try:
            with pytest.raises(CommandError, match='–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON'):
                call_command(
                    'import_catalog_from_1c',
                    f'--file={json_file_path}',
                    verbosity=0
                )
        finally:
            Path(json_file_path).unlink()
    
    def test_command_with_nonexistent_file_fails(self):
        """–¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã —Å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º —Ñ–∞–π–ª–æ–º"""
        with pytest.raises(CommandError, match='–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω'):
            call_command(
                'import_catalog_from_1c',
                '--file=/nonexistent/file.json',
                verbosity=0
            )
    
    def test_command_xml_not_implemented(self):
        """–¢–µ—Å—Ç —á—Ç–æ XML –ø–∞—Ä—Å–µ—Ä –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω"""
        with tempfile.NamedTemporaryFile(suffix='.xml', delete=False) as f:
            f.write(b'<xml>test</xml>')
            xml_file_path = f.name
        
        try:
            with pytest.raises(CommandError, match='XML –ø–∞—Ä—Å–µ—Ä –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω'):
                call_command(
                    'import_catalog_from_1c',
                    f'--file={xml_file_path}',
                    verbosity=0
                )
        finally:
            Path(xml_file_path).unlink()
    
    def test_command_without_parameters_fails(self):
        """–¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã –±–µ–∑ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""
        with pytest.raises(CommandError, match='–£–∫–∞–∂–∏—Ç–µ –ª–∏–±–æ --file'):
            call_command(
                'import_catalog_from_1c',
                verbosity=0
            )
    
    def test_command_dry_run_no_changes(self):
        """–¢–µ—Å—Ç —á—Ç–æ dry-run –Ω–µ —Å–æ–∑–¥–∞–µ—Ç —Ç–æ–≤–∞—Ä—ã"""
        initial_count = Product.objects.count()
        
        call_command(
            'import_catalog_from_1c',
            '--mock-data',
            '--dry-run',
            verbosity=0
        )
        
        final_count = Product.objects.count()
        assert final_count == initial_count  # –ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π
    
    def test_command_force_overwrites_existing(self):
        """–¢–µ—Å—Ç —á—Ç–æ --force –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–æ–≤–∞—Ä—ã"""
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ç–æ–≤–∞—Ä
        product = Product.objects.create(
            onec_id='1C-PRODUCT-00001',
            name='–°—Ç–∞—Ä–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ',
            sku='OLD-SKU',
            retail_price=500
        )
        
        call_command(
            'import_catalog_from_1c',
            '--mock-data',
            '--force',
            verbosity=0
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ç–æ–≤–∞—Ä –æ–±–Ω–æ–≤–∏–ª—Å—è
        product.refresh_from_db()
        assert product.name == '–¢–æ–≤–∞—Ä —Ç–µ—Å—Ç–æ–≤—ã–π #1'
        assert product.sku == 'SKU-00001'
        assert product.retail_price == 1100  # –ò–∑ mock –¥–∞–Ω–Ω—ã—Ö
    
    def test_command_without_force_skips_existing(self):
        """–¢–µ—Å—Ç —á—Ç–æ –±–µ–∑ --force —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–æ–≤–∞—Ä—ã –ø—Ä–æ–ø—É—Å–∫–∞—é—Ç—Å—è"""
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ç–æ–≤–∞—Ä
        original_name = '–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ'
        product = Product.objects.create(
            onec_id='1C-PRODUCT-00001',
            name=original_name,
            sku='ORIGINAL-SKU',
            retail_price=500
        )
        
        out = StringIO()
        call_command(
            'import_catalog_from_1c',
            '--mock-data',
            stdout=out,
            verbosity=0
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ç–æ–≤–∞—Ä –ù–ï –∏–∑–º–µ–Ω–∏–ª—Å—è
        product.refresh_from_db()
        assert product.name == original_name
        assert product.sku == 'ORIGINAL-SKU'
        assert product.retail_price == 500
    
    def test_command_with_chunk_size(self):
        """–¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π —Ä–∞–∑–º–µ—Ä–∞ –±–∞—Ç—á–∞"""
        out = StringIO()
        
        call_command(
            'import_catalog_from_1c',
            '--mock-data',
            '--chunk-size=5',
            '--dry-run',
            stdout=out,
            verbosity=1
        )
        
        output = out.getvalue()
        assert '‚úÖ DRY-RUN –∑–∞–≤–µ—Ä—à–µ–Ω: 20 —Ç–æ–≤–∞—Ä–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ' in output