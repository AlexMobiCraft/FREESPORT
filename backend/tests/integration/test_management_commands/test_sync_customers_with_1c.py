"""
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –∫–æ–º–∞–Ω–¥—ã sync_customers_with_1c
"""

from io import StringIO

import pytest
from django.core.management import call_command
from django.core.management.base import CommandError
from django.utils import timezone

from apps.users.models import User


@pytest.mark.integration
@pytest.mark.django_db
class TestSyncCustomersWith1CCommand:
    """–¢–µ—Å—Ç—ã –∫–æ–º–∞–Ω–¥—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤ —Å 1–°"""

    def test_command_export_new_success(self):
        """–¢–µ—Å—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞ –Ω–æ–≤—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –≤ 1–°"""
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–¥–∞–µ—Ç—Å—è –≤ —ç–∫—Å–ø–æ—Ä—Ç–µ
        customer = User.objects.create(
            email="test@export.com",
            first_name="–¢–µ—Å—Ç–æ–≤—ã–π",
            last_name="–≠–∫—Å–ø–æ—Ä—Ç",
            needs_1c_export=True,
            sync_status="pending",
        )

        out = StringIO()
        call_command("sync_customers_with_1c", "--export-new", stdout=out, verbosity=1)

        output = out.getvalue()
        assert "üîÑ –ó–∞–ø—É—Å–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤ —Å 1–°" in output
        assert "üì§ –≠–∫—Å–ø–æ—Ä—Ç –Ω–æ–≤—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –≤ 1–°..." in output
        assert "–ù–∞–π–¥–µ–Ω–æ –∫–ª–∏–µ–Ω—Ç–æ–≤ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞: 1" in output
        assert "‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: 1 —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ, 0 –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ" in output

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å—Ç–∞—Ç—É—Å –∫–ª–∏–µ–Ω—Ç–∞ –æ–±–Ω–æ–≤–∏–ª—Å—è
        customer.refresh_from_db()
        assert customer.needs_1c_export is False
        assert customer.sync_status == "synced"
        assert customer.onec_id is not None
        assert customer.last_sync_at is not None

    def test_command_import_updates_success(self):
        """–¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏–∑ 1–°"""
        # –°–æ–∑–¥–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
        customer = User.objects.create(
            email="test@import.com",
            first_name="–°—Ç–∞—Ä–æ–µ –∏–º—è",
            last_name="–°—Ç–∞—Ä–∞—è —Ñ–∞–º–∏–ª–∏—è",
            onec_id="1C-SYNC-001",
            sync_status="synced",
            company_name="–°—Ç–∞—Ä–∞—è –∫–æ–º–ø–∞–Ω–∏—è",
        )

        out = StringIO()
        call_command(
            "sync_customers_with_1c", "--import-updates", stdout=out, verbosity=1
        )

        output = out.getvalue()
        assert "üì• –ò–º–ø–æ—Ä—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏–∑ 1–°..." in output

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–ª–∏–µ–Ω—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω (–∑–∞–≤–∏—Å–∏—Ç –æ—Ç mock –¥–∞–Ω–Ω—ã—Ö)
        customer.refresh_from_db()
        assert customer.last_sync_at is not None

    def test_command_full_sync_success(self):
        """–¢–µ—Å—Ç –ø–æ–ª–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"""
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç–æ–≤ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –∏ –∏–º–ø–æ—Ä—Ç–∞
        export_customer = User.objects.create(
            email="export@test.com",
            first_name="–≠–∫—Å–ø–æ—Ä—Ç",
            last_name="–ö–ª–∏–µ–Ω—Ç",
            needs_1c_export=True,
        )

        import_customer = User.objects.create(
            email="import@test.com",
            first_name="–ò–º–ø–æ—Ä—Ç",
            last_name="–ö–ª–∏–µ–Ω—Ç",
            onec_id="1C-IMPORT-001",
            sync_status="synced",
        )

        out = StringIO()
        call_command("sync_customers_with_1c", "--full-sync", stdout=out, verbosity=1)

        output = out.getvalue()
        assert "üì§ –≠–∫—Å–ø–æ—Ä—Ç –Ω–æ–≤—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –≤ 1–°..." in output
        assert "üì• –ò–º–ø–æ—Ä—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏–∑ 1–°..." in output

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        export_customer.refresh_from_db()
        assert export_customer.needs_1c_export is False
        assert export_customer.sync_status == "synced"

    def test_command_without_parameters_fails(self):
        """–¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã –±–µ–∑ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""
        with pytest.raises(CommandError, match="–£–∫–∞–∂–∏—Ç–µ —Ä–µ–∂–∏–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"):
            call_command("sync_customers_with_1c", verbosity=0)

    def test_command_dry_run_no_changes(self):
        """–¢–µ—Å—Ç —á—Ç–æ dry-run –Ω–µ –∏–∑–º–µ–Ω—è–µ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤"""
        customer = User.objects.create(
            email="test@dryrun.com",
            first_name="–¢–µ—Å—Ç",
            last_name="DryRun",
            needs_1c_export=True,
            sync_status="pending",
        )

        original_status = customer.sync_status
        original_export_flag = customer.needs_1c_export

        call_command("sync_customers_with_1c", "--export-new", "--dry-run", verbosity=0)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è
        customer.refresh_from_db()
        assert customer.sync_status == original_status
        assert customer.needs_1c_export == original_export_flag
        assert customer.onec_id is None  # –ù–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞–∑–Ω–∞—á–µ–Ω

    def test_export_only_active_customers(self):
        """–¢–µ—Å—Ç —á—Ç–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã"""
        # –ê–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∏–µ–Ω—Ç
        active_customer = User.objects.create(
            email="active@test.com",
            first_name="–ê–∫—Ç–∏–≤–Ω—ã–π",
            last_name="–ö–ª–∏–µ–Ω—Ç",
            is_active=True,
            needs_1c_export=True,
        )

        # –ù–µ–∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∏–µ–Ω—Ç
        inactive_customer = User.objects.create(
            email="inactive@test.com",
            first_name="–ù–µ–∞–∫—Ç–∏–≤–Ω—ã–π",
            last_name="–ö–ª–∏–µ–Ω—Ç",
            is_active=False,
            needs_1c_export=True,
        )

        out = StringIO()
        call_command("sync_customers_with_1c", "--export-new", stdout=out, verbosity=1)

        output = out.getvalue()
        assert "–ù–∞–π–¥–µ–Ω–æ –∫–ª–∏–µ–Ω—Ç–æ–≤ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞: 1" in output

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∏–µ–Ω—Ç —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω
        active_customer.refresh_from_db()
        inactive_customer.refresh_from_db()

        assert active_customer.needs_1c_export is False
        assert active_customer.sync_status == "synced"

        assert inactive_customer.needs_1c_export is True  # –ù–µ –∏–∑–º–µ–Ω–∏–ª—Å—è
        assert inactive_customer.sync_status != "synced"

    def test_force_all_exports_all_customers(self):
        """–¢–µ—Å—Ç —á—Ç–æ --force-all —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤"""
        # –ö–ª–∏–µ–Ω—Ç –±–µ–∑ —Ñ–ª–∞–≥–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞
        customer1 = User.objects.create(
            email="customer1@test.com",
            first_name="–ö–ª–∏–µ–Ω—Ç1",
            needs_1c_export=False,
            is_active=True,
        )

        # –ö–ª–∏–µ–Ω—Ç —Å —Ñ–ª–∞–≥–æ–º —ç–∫—Å–ø–æ—Ä—Ç–∞
        customer2 = User.objects.create(
            email="customer2@test.com",
            first_name="–ö–ª–∏–µ–Ω—Ç2",
            needs_1c_export=True,
            is_active=True,
        )

        out = StringIO()
        call_command(
            "sync_customers_with_1c",
            "--export-new",
            "--force-all",
            stdout=out,
            verbosity=1,
        )

        output = out.getvalue()
        assert "–ù–∞–π–¥–µ–Ω–æ –∫–ª–∏–µ–Ω—Ç–æ–≤ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞: 2" in output

        # –û–±–∞ –∫–ª–∏–µ–Ω—Ç–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω—ã
        customer1.refresh_from_db()
        customer2.refresh_from_db()

        assert customer1.sync_status == "synced"
        assert customer2.sync_status == "synced"

    def test_chunk_size_processing(self):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–∞—Ç—á–∞–º–∏"""
        # –°–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–ª–∏–µ–Ω—Ç–æ–≤ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
        for i in range(5):
            User.objects.create(
                email=f"batch{i}@test.com",
                first_name=f"Batch{i}",
                needs_1c_export=True,
                is_active=True,
            )

        out = StringIO()
        call_command(
            "sync_customers_with_1c",
            "--export-new",
            "--chunk-size=2",
            stdout=out,
            verbosity=1,
        )

        output = out.getvalue()
        assert "–ù–∞–π–¥–µ–Ω–æ –∫–ª–∏–µ–Ω—Ç–æ–≤ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞: 5" in output
        assert "‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: 5 —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ" in output

        # –í—Å–µ –∫–ª–∏–µ–Ω—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã
        exported_count = User.objects.filter(
            email__startswith="batch", sync_status="synced"
        ).count()
        assert exported_count == 5

    def test_import_updates_existing_customers(self):
        """–¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤"""
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç–æ–≤ –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –ø–æ–ª—É—á–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        customers_data = []
        for i in range(3):
            customer = User.objects.create(
                email=f"update{i}@test.com",
                first_name=f"–ò–º—è–î–æ{i}",
                last_name="–§–∞–º–∏–ª–∏—è",
                onec_id=f"1C-UPDATE-{i:03d}",
                sync_status="synced",
                company_name=f"–ö–æ–º–ø–∞–Ω–∏—è–î–æ{i}",
            )
            customers_data.append(customer)

        call_command("sync_customers_with_1c", "--import-updates", verbosity=0)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–ª–∏–µ–Ω—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã (–µ—Å–ª–∏ –æ–Ω–∏ –ø–æ–ø–∞–ª–∏ –≤ mock –¥–∞–Ω–Ω—ã–µ)
        for customer in customers_data:
            customer.refresh_from_db()
            # last_sync_at –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–æ –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
            assert customer.last_sync_at is not None

    def test_export_assigns_onec_id(self):
        """–¢–µ—Å—Ç —á—Ç–æ —ç–∫—Å–ø–æ—Ä—Ç –Ω–∞–∑–Ω–∞—á–∞–µ—Ç onec_id"""
        customer = User.objects.create(
            email="test@onecid.com",
            first_name="–¢–µ—Å—Ç",
            last_name="OneCID",
            needs_1c_export=True,
            onec_id=None,
        )

        call_command("sync_customers_with_1c", "--export-new", verbosity=0)

        customer.refresh_from_db()
        assert customer.onec_id is not None
        assert customer.onec_id.startswith("1C-")

    def test_sync_status_tracking(self):
        """–¢–µ—Å—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"""
        customer = User.objects.create(
            email="status@test.com",
            first_name="–°—Ç–∞—Ç—É—Å",
            last_name="–¢–µ—Å—Ç",
            needs_1c_export=True,
            sync_status="pending",
        )

        call_command("sync_customers_with_1c", "--export-new", verbosity=0)

        customer.refresh_from_db()
        assert customer.sync_status == "synced"
        assert customer.sync_error_message == ""
        assert customer.last_sync_at is not None
        assert (timezone.now() - customer.last_sync_at).seconds < 60  # –ù–µ–¥–∞–≤–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω
