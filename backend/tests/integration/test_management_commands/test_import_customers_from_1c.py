"""
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –∫–æ–º–∞–Ω–¥—ã import_customers_from_1c
"""

import json
import tempfile
from io import StringIO
from pathlib import Path

import pytest
from django.core.management import call_command
from django.core.management.base import CommandError

from apps.users.models import User


@pytest.mark.integration
@pytest.mark.django_db
class TestImportCustomersFrom1CCommand:
    """–¢–µ—Å—Ç—ã –∫–æ–º–∞–Ω–¥—ã –∏–º–ø–æ—Ä—Ç–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏–∑ 1–°"""

    def test_command_with_mock_data_success(self):
        """–¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
        out = StringIO()

        call_command(
            "import_customers_from_1c",
            "--mock-data",
            "--dry-run",
            stdout=out,
            verbosity=1,
        )

        output = out.getvalue()
        assert "üöÄ –ó–∞–ø—É—Å–∫ –∏–º–ø–æ—Ä—Ç–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏–∑ 1–°" in output
        assert "üì¶ –ó–∞–≥—Ä—É–∂–µ–Ω—ã —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ: 15 –∫–ª–∏–µ–Ω—Ç–æ–≤" in output
        assert "‚úÖ DRY-RUN –∑–∞–≤–µ—Ä—à–µ–Ω: 15 –∫–ª–∏–µ–Ω—Ç–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ" in output

    def test_command_creates_customers_with_mock_data(self):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤ —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
        initial_count = User.objects.count()

        call_command("import_customers_from_1c", "--mock-data", verbosity=0)

        final_count = User.objects.count()
        assert final_count > initial_count

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
        test_customers = User.objects.filter(onec_id__startswith="1C-CUSTOMER-")
        assert test_customers.count() == 15

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
        first_customer = test_customers.first()
        assert first_customer.first_name == "–ò–º—è1"
        assert first_customer.last_name == "–§–∞–º–∏–ª–∏—è1"
        assert first_customer.email == "customer1@test-1c.ru"
        assert first_customer.sync_status == "synced"
        assert first_customer.created_in_1c is True

    def test_command_with_json_file_success(self):
        """–¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã —Å JSON —Ñ–∞–π–ª–æ–º"""
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π JSON —Ñ–∞–π–ª
        test_data = {
            "customers": [
                {
                    "onec_id": "JSON-CUSTOMER-001",
                    "email": "test@example.com",
                    "first_name": "–¢–µ—Å—Ç–æ–≤—ã–π",
                    "last_name": "–ö–ª–∏–µ–Ω—Ç",
                    "role": "wholesale_level1",
                    "phone_number": "+79991234567",
                    "company_name": "–û–û–û –¢–µ—Å—Ç",
                    "is_active": True,
                    "created_in_1c": True,
                }
            ]
        }

        with tempfile.NamedTemporaryFile(mode="w", suffix=".json", delete=False) as f:
            json.dump(test_data, f, ensure_ascii=False)
            json_file_path = f.name

        try:
            call_command(
                "import_customers_from_1c", f"--file={json_file_path}", verbosity=0
            )

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–ª–∏–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω
            customer = User.objects.get(onec_id="JSON-CUSTOMER-001")
            assert customer.email == "test@example.com"
            assert customer.first_name == "–¢–µ—Å—Ç–æ–≤—ã–π"
            assert customer.last_name == "–ö–ª–∏–µ–Ω—Ç"
            assert customer.role == "wholesale_level1"
            assert customer.phone == "+79991234567"
            assert customer.company_name == "–û–û–û –¢–µ—Å—Ç"
            assert customer.is_active is True

        finally:
            Path(json_file_path).unlink()

    def test_command_with_invalid_json_file_fails(self):
        """–¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º JSON —Ñ–∞–π–ª–æ–º"""
        with tempfile.NamedTemporaryFile(mode="w", suffix=".json", delete=False) as f:
            f.write("invalid json content")
            json_file_path = f.name

        try:
            with pytest.raises(CommandError, match="–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON"):
                call_command(
                    "import_customers_from_1c", f"--file={json_file_path}", verbosity=0
                )
        finally:
            Path(json_file_path).unlink()

    def test_command_with_nonexistent_file_fails(self):
        """–¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã —Å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º —Ñ–∞–π–ª–æ–º"""
        with pytest.raises(CommandError, match="–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω"):
            call_command(
                "import_customers_from_1c", "--file=/nonexistent/file.json", verbosity=0
            )

    def test_command_xml_not_implemented(self):
        """–¢–µ—Å—Ç —á—Ç–æ XML –ø–∞—Ä—Å–µ—Ä –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω"""
        with tempfile.NamedTemporaryFile(suffix=".xml", delete=False) as f:
            f.write(b"<xml>test</xml>")
            xml_file_path = f.name

        try:
            with pytest.raises(CommandError, match="XML –ø–∞—Ä—Å–µ—Ä –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω"):
                call_command(
                    "import_customers_from_1c", f"--file={xml_file_path}", verbosity=0
                )
        finally:
            Path(xml_file_path).unlink()

    def test_command_without_parameters_fails(self):
        """–¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã –±–µ–∑ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""
        with pytest.raises(CommandError, match="–£–∫–∞–∂–∏—Ç–µ –ª–∏–±–æ --file"):
            call_command("import_customers_from_1c", verbosity=0)

    def test_command_dry_run_no_changes(self):
        """–¢–µ—Å—Ç —á—Ç–æ dry-run –Ω–µ —Å–æ–∑–¥–∞–µ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤"""
        initial_count = User.objects.count()

        call_command(
            "import_customers_from_1c", "--mock-data", "--dry-run", verbosity=0
        )

        final_count = User.objects.count()
        assert final_count == initial_count  # –ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π

    def test_command_force_overwrites_existing(self):
        """–¢–µ—Å—Ç —á—Ç–æ --force –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤"""
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
        customer = User.objects.create(
            onec_id="1C-CUSTOMER-00001",
            email="old@test.com",
            first_name="–°—Ç–∞—Ä–æ–µ",
            last_name="–ò–º—è",
            role="retail",
        )

        call_command("import_customers_from_1c", "--mock-data", "--force", verbosity=0)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–ª–∏–µ–Ω—Ç –æ–±–Ω–æ–≤–∏–ª—Å—è
        customer.refresh_from_db()
        assert customer.first_name == "–ò–º—è1"
        assert customer.last_name == "–§–∞–º–∏–ª–∏—è1"
        assert customer.email == "customer1@test-1c.ru"

    def test_command_without_force_skips_existing(self):
        """–¢–µ—Å—Ç —á—Ç–æ –±–µ–∑ --force —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–ª–∏–µ–Ω—Ç—ã –ø—Ä–æ–ø—É—Å–∫–∞—é—Ç—Å—è"""
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
        original_email = "original@test.com"
        customer = User.objects.create(
            onec_id="1C-CUSTOMER-00001",
            email=original_email,
            first_name="–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ",
            last_name="–ò–º—è",
            role="retail",
        )

        call_command("import_customers_from_1c", "--mock-data", verbosity=0)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–ª–∏–µ–Ω—Ç –ù–ï –∏–∑–º–µ–Ω–∏–ª—Å—è
        customer.refresh_from_db()
        assert customer.email == original_email
        assert customer.first_name == "–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ"
        assert customer.last_name == "–ò–º—è"

    def test_command_with_chunk_size(self):
        """–¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π —Ä–∞–∑–º–µ—Ä–∞ –±–∞—Ç—á–∞"""
        out = StringIO()

        call_command(
            "import_customers_from_1c",
            "--mock-data",
            "--chunk-size=5",
            "--dry-run",
            stdout=out,
            verbosity=1,
        )

        output = out.getvalue()
        assert "‚úÖ DRY-RUN –∑–∞–≤–µ—Ä—à–µ–Ω: 15 –∫–ª–∏–µ–Ω—Ç–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ" in output

    def test_customer_role_assignment(self):
        """–¢–µ—Å—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Ä–æ–ª–µ–π –∫–ª–∏–µ–Ω—Ç–∞–º"""
        call_command("import_customers_from_1c", "--mock-data", verbosity=0)

        test_customers = User.objects.filter(onec_id__startswith="1C-CUSTOMER-")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–æ–∑–¥–∞–Ω—ã –∫–ª–∏–µ–Ω—Ç—ã —Ä–∞–∑–Ω—ã—Ö —Ä–æ–ª–µ–π
        roles_created = set(test_customers.values_list("role", flat=True))
        expected_roles = {
            "retail",
            "wholesale_level1",
            "wholesale_level2",
            "wholesale_level3",
            "trainer",
        }

        # –î–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ —Ä–æ–ª—å –∏–∑ –æ–∂–∏–¥–∞–µ–º—ã—Ö
        assert roles_created.intersection(expected_roles)

    def test_company_data_assignment(self):
        """–¢–µ—Å—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        call_command("import_customers_from_1c", "--mock-data", verbosity=0)

        test_customers = User.objects.filter(onec_id__startswith="1C-CUSTOMER-")

        # –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∫–ª–∏–µ–Ω—Ç—ã –¥–æ–ª–∂–Ω—ã –∏–º–µ—Ç—å –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        customers_with_company = test_customers.exclude(company_name="")
        customers_with_tax_id = test_customers.exclude(tax_id="")

        assert customers_with_company.exists()
        assert customers_with_tax_id.exists()
