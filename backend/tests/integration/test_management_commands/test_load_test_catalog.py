"""
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –∫–æ–º–∞–Ω–¥—ã load_test_catalog
"""

from io import StringIO

import pytest
from django.core.management import call_command

from apps.products.models import Brand, Category, Product


@pytest.mark.integration
@pytest.mark.django_db
class TestLoadTestCatalogCommand:
    """–¢–µ—Å—Ç—ã –∫–æ–º–∞–Ω–¥—ã –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫–∞—Ç–∞–ª–æ–≥–∞ —Ç–æ–≤–∞—Ä–æ–≤"""

    def test_command_default_count_success(self):
        """–¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        out = StringIO()

        call_command("load_test_catalog", stdout=out, verbosity=1)

        output = out.getvalue()
        assert "üöÄ –ó–∞–ø—É—Å–∫ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫–∞—Ç–∞–ª–æ–≥–∞ —Ç–æ–≤–∞—Ä–æ–≤" in output
        assert "‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –∫–∞—Ç–∞–ª–æ–≥ –∑–∞–≥—Ä—É–∂–µ–Ω: 50 —Ç–æ–≤–∞—Ä–æ–≤ —Å–æ–∑–¥–∞–Ω–æ" in output

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ç–æ–≤–∞—Ä—ã —Å–æ–∑–¥–∞–Ω—ã
        test_products = Product.objects.filter(onec_id__startswith="TEST-PRODUCT-")
        assert test_products.count() == 50

    def test_command_custom_count(self):
        """–¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã —Å –∑–∞–¥–∞–Ω–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Ç–æ–≤–∞—Ä–æ–≤"""
        call_command("load_test_catalog", "--count=25", verbosity=0)

        test_products = Product.objects.filter(onec_id__startswith="TEST-PRODUCT-")
        assert test_products.count() == 25

    def test_command_with_brands_creation(self):
        """–¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã —Å —Å–æ–∑–¥–∞–Ω–∏–µ–º –±—Ä–µ–Ω–¥–æ–≤"""
        initial_brands_count = Brand.objects.count()

        call_command("load_test_catalog", "--with-brands", "--count=10", verbosity=0)

        # –î–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω—ã –Ω–æ–≤—ã–µ –±—Ä–µ–Ω–¥—ã
        final_brands_count = Brand.objects.count()
        assert final_brands_count > initial_brands_count

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –µ—Å—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –±—Ä–µ–Ω–¥—ã
        test_brands = Brand.objects.filter(name__endswith="Test")
        assert test_brands.count() >= 10

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ç–æ–≤–∞—Ä—ã —Å–≤—è–∑–∞–Ω—ã —Å –±—Ä–µ–Ω–¥–∞–º–∏
        test_products = Product.objects.filter(onec_id__startswith="TEST-PRODUCT-")
        products_with_brand = test_products.exclude(brand__isnull=True)
        assert products_with_brand.count() > 0

    def test_command_with_categories_creation(self):
        """–¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã —Å —Å–æ–∑–¥–∞–Ω–∏–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
        initial_categories_count = Category.objects.count()

        call_command(
            "load_test_catalog", "--with-categories", "--count=10", verbosity=0
        )

        # –î–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω—ã –Ω–æ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        final_categories_count = Category.objects.count()
        assert final_categories_count > initial_categories_count

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –µ—Å—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        test_categories = Category.objects.filter(name__endswith="—Ç–µ—Å—Ç–æ–≤–∞—è")
        assert test_categories.count() >= 8

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ç–æ–≤–∞—Ä—ã —Å–≤—è–∑–∞–Ω—ã —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
        test_products = Product.objects.filter(onec_id__startswith="TEST-PRODUCT-")
        products_with_category = test_products.exclude(category__isnull=True)
        assert products_with_category.count() > 0

    def test_command_clear_existing_data(self):
        """–¢–µ—Å—Ç –æ—á–∏—Å—Ç–∫–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        test_brand = Brand.objects.create(name="–¢–µ—Å—Ç–æ–≤—ã–π –±—Ä–µ–Ω–¥ OLD")
        test_category = Category.objects.create(name="–¢–µ—Å—Ç–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è OLD")
        
        Product.objects.create(
            onec_id="TEST-PRODUCT-OLD-001",
            name="–°—Ç–∞—Ä—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π —Ç–æ–≤–∞—Ä",
            sku="OLD-SKU",
            retail_price=100,
            brand=test_brand,
            category=test_category,
        )

        out = StringIO()
        call_command(
            "load_test_catalog",
            "--clear-existing",
            "--count=5",
            stdout=out,
            verbosity=1,
        )

        output = out.getvalue()
        assert "üßπ –û—á–∏—Å—Ç–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö..." in output
        assert "–£–¥–∞–ª–µ–Ω–æ:" in output

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã
        assert not Product.objects.filter(onec_id="TEST-PRODUCT-OLD-001").exists()
        assert not Brand.objects.filter(name="–¢–µ—Å—Ç–æ–≤—ã–π –±—Ä–µ–Ω–¥ OLD").exists()
        assert not Category.objects.filter(name="–¢–µ—Å—Ç–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è OLD").exists()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω—ã
        new_products = Product.objects.filter(onec_id__startswith="TEST-PRODUCT-")
        assert new_products.count() == 5

    def test_command_dry_run_no_changes(self):
        """–¢–µ—Å—Ç —á—Ç–æ dry-run –Ω–µ —Å–æ–∑–¥–∞–µ—Ç —Ç–æ–≤–∞—Ä—ã"""
        initial_count = Product.objects.count()
        initial_brands = Brand.objects.count()
        initial_categories = Category.objects.count()

        call_command(
            "load_test_catalog",
            "--dry-run",
            "--with-brands",
            "--with-categories",
            "--count=10",
            verbosity=0,
        )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –Ω–∏—á–µ–≥–æ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
        assert Product.objects.count() == initial_count
        assert Brand.objects.count() == initial_brands
        assert Category.objects.count() == initial_categories

    def test_product_data_structure(self):
        """–¢–µ—Å—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤"""
        call_command("load_test_catalog", "--count=5", verbosity=0)

        product = Product.objects.filter(onec_id__startswith="TEST-PRODUCT-").first()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        assert product.name
        assert product.onec_id
        assert product.sku
        assert product.description
        assert product.short_description

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–Ω—ã
        assert product.retail_price > 0
        assert product.opt1_price > 0
        assert product.opt2_price > 0
        assert product.opt3_price > 0
        assert product.trainer_price > 0
        assert product.federation_price > 0
        assert product.recommended_retail_price > 0
        assert product.max_suggested_retail_price > 0

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–µ—Ä–∞—Ä—Ö–∏—é —Ü–µ–Ω (–æ–ø—Ç–æ–≤—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –º–µ–Ω—å—à–µ —Ä–æ–∑–Ω–∏—á–Ω–æ–π)
        assert product.opt1_price <= product.retail_price
        assert product.opt2_price <= product.opt1_price
        assert product.opt3_price <= product.opt2_price
        assert product.federation_price <= product.trainer_price

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏
        assert isinstance(product.specifications, dict)
        assert "material" in product.specifications
        assert "color" in product.specifications
        assert "size" in product.specifications

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å—Ç–∞—Ç–∫–∏
        assert product.stock_quantity >= 0
        assert product.reserved_quantity >= 0
        assert product.min_order_quantity > 0

    def test_product_variety(self):
        """–¢–µ—Å—Ç —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤"""
        call_command("load_test_catalog", "--count=20", verbosity=0)

        products = Product.objects.filter(onec_id__startswith="TEST-PRODUCT-")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –µ—Å—Ç—å —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ –≤ –Ω–∞–∑–≤–∞–Ω–∏—è—Ö
        names = set(products.values_list("name", flat=True))
        assert len(names) > 1  # –†–∞–∑–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ —Ü–µ–Ω
        prices = set(products.values_list("retail_price", flat=True))
        assert len(prices) > 5  # –†–∞–∑–Ω—ã–µ —Ü–µ–Ω—ã

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ –æ—Å—Ç–∞—Ç–∫–æ–≤
        quantities = set(products.values_list("stock_quantity", flat=True))
        assert len(quantities) > 5  # –†–∞–∑–Ω—ã–µ –æ—Å—Ç–∞—Ç–∫–∏

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –Ω–µ –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –∞–∫—Ç–∏–≤–Ω—ã (80% –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∞–∫—Ç–∏–≤–Ω—ã)
        active_count = products.filter(is_active=True).count()
        inactive_count = products.filter(is_active=False).count()
        assert active_count > inactive_count  # –ë–æ–ª—å—à–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö
        assert inactive_count > 0  # –ï—Å—Ç—å –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ

    def test_command_with_existing_brands_categories(self):
        """–¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –±—Ä–µ–Ω–¥–∞–º–∏ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏"""
        # –°–æ–∑–¥–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –±—Ä–µ–Ω–¥—ã –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        existing_brand = Brand.objects.create(name="–°—É—â–µ—Å—Ç–≤—É—é—â–∏–π –±—Ä–µ–Ω–¥", is_active=True)
        existing_category = Category.objects.create(
            name="–°—É—â–µ—Å—Ç–≤—É—é—â–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è", is_active=True
        )

        call_command("load_test_catalog", "--count=10", verbosity=0)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ç–æ–≤–∞—Ä—ã –º–æ–≥—É—Ç –±—ã—Ç—å —Å–≤—è–∑–∞–Ω—ã —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –±—Ä–µ–Ω–¥–∞–º–∏/–∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
        products = Product.objects.filter(onec_id__startswith="TEST-PRODUCT-")

        # –•–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ç–æ–≤–∞—Ä –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
        # (—ç—Ç–æ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Å–ª—É—á–∞–π–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞ –≤ –∫–æ–º–∞–Ω–¥–µ)
        assert products.count() == 10

    def test_large_catalog_creation(self):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –±–æ–ª—å—à–æ–≥–æ –∫–∞—Ç–∞–ª–æ–≥–∞"""
        call_command(
            "load_test_catalog",
            "--count=100",
            "--with-brands",
            "--with-categories",
            verbosity=0,
        )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ —Ç–æ–≤–∞—Ä—ã —Å–æ–∑–¥–∞–Ω—ã
        products = Product.objects.filter(onec_id__startswith="TEST-PRODUCT-")
        assert products.count() == 100

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å SKU
        skus = list(products.values_list("sku", flat=True))
        assert len(set(skus)) == len(skus)  # –í—Å–µ SKU —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å onec_id
        onec_ids = list(products.values_list("onec_id", flat=True))
        assert len(set(onec_ids)) == len(onec_ids)  # –í—Å–µ onec_id —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ
