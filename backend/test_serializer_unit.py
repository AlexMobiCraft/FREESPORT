#!/usr/bin/env python
"""
Unit —Ç–µ—Å—Ç –¥–ª—è OrderHistorySerializer –±–µ–∑ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
"""
import os
import sys
import django
from unittest.mock import Mock

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
os.environ.setdefault("DJANGO_SETTINGS_MODULE", "freesport.settings.development")
django.setup()

from apps.users.serializers import OrderHistorySerializer
from apps.orders.models import Order


def test_serializer_fields():
    """–¢–µ—Å—Ç –ø–æ–ª–µ–π —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ç–æ—Ä–∞"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—è OrderHistorySerializer...")

    # –°–æ–∑–¥–∞–µ–º mock –æ–±—ä–µ–∫—Ç –∑–∞–∫–∞–∑–∞
    mock_order = Mock(spec=Order)
    mock_order.id = 1
    mock_order.order_number = "TEST-001"
    mock_order.status = "delivered"
    mock_order.get_status_display.return_value = "–î–æ—Å—Ç–∞–≤–ª–µ–Ω"
    mock_order.payment_status = "paid"
    mock_order.get_payment_status_display.return_value = "–û–ø–ª–∞—á–µ–Ω"
    mock_order.total_amount = 15000.00
    mock_order.discount_amount = 500.00
    mock_order.delivery_cost = 300.00
    mock_order.customer_display_name = "–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤"
    mock_order.created_at = "2025-09-29T10:00:00Z"
    mock_order.updated_at = "2025-09-29T10:00:00Z"
    mock_order.total_items = 3  # –î–ª—è –º–µ—Ç–æ–¥–∞ get_items_count

    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ç–æ—Ä
    serializer = OrderHistorySerializer(mock_order)
    data = serializer.data

    print(f"üìã –î–∞–Ω–Ω—ã–µ —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ç–æ—Ä–∞: {data}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è
    expected_fields = [
        "id",
        "order_number",
        "status",
        "status_display",
        "payment_status",
        "payment_status_display",
        "total_amount",
        "discount_amount",
        "delivery_cost",
        "items_count",
        "customer_display_name",
        "created_at",
        "updated_at",
    ]

    for field in expected_fields:
        assert field in data, f"–ü–æ–ª–µ {field} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –¥–∞–Ω–Ω—ã—Ö"
        print(f"  ‚úÖ {field}: {data[field]}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    assert data["order_number"] == "TEST-001"
    assert data["status"] == "delivered"
    assert data["status_display"] == "–î–æ—Å—Ç–∞–≤–ª–µ–Ω"
    assert data["payment_status"] == "paid"
    assert data["payment_status_display"] == "–û–ø–ª–∞—á–µ–Ω"
    assert float(data["total_amount"]) == 15000.00
    assert float(data["discount_amount"]) == 500.00
    assert float(data["delivery_cost"]) == 300.00
    assert data["items_count"] == 3
    assert data["customer_display_name"] == "–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤"

    print("‚úÖ –í—Å–µ –ø–æ–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Å–µ—Ä–∏–∞–ª–∏–∑—É—é—Ç—Å—è!")
    return True


def test_serializer_method_fields():
    """–¢–µ—Å—Ç SerializerMethodField"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º SerializerMethodField...")

    mock_order = Mock(spec=Order)
    mock_order.total_items = 5

    serializer = OrderHistorySerializer(mock_order)

    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–µ—Ç–æ–¥ get_items_count
    items_count = serializer.get_items_count(mock_order)
    assert items_count == 5, f"–û–∂–∏–¥–∞–ª–∏ 5, –ø–æ–ª—É—á–∏–ª–∏ {items_count}"

    print("‚úÖ SerializerMethodField —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
    return True


def test_readonly_fields():
    """–¢–µ—Å—Ç —á—Ç–æ –≤—Å–µ –ø–æ–ª—è —Ç–æ–ª—å–∫–æ –¥–ª—è —á—Ç–µ–Ω–∏—è"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º readonly –ø–æ–ª—è...")

    serializer = OrderHistorySerializer()
    readonly_fields = serializer.Meta.read_only_fields
    expected_fields = [
        "id",
        "order_number",
        "status",
        "status_display",
        "payment_status",
        "payment_status_display",
        "total_amount",
        "discount_amount",
        "delivery_cost",
        "items_count",
        "customer_display_name",
        "created_at",
        "updated_at",
    ]

    assert set(readonly_fields) == set(expected_fields), "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ readonly –ø–æ–ª—è"
    print("‚úÖ –í—Å–µ –ø–æ–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø–æ–º–µ—á–µ–Ω—ã –∫–∞–∫ readonly!")
    return True


def main():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
    print("üöÄ –ó–∞–ø—É—Å–∫ unit —Ç–µ—Å—Ç–æ–≤ –¥–ª—è OrderHistorySerializer\n")

    try:
        test_serializer_fields()
        test_serializer_method_fields()
        test_readonly_fields()

        print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!")
        print("OrderHistorySerializer –ø–æ–ª–Ω–æ—Å—Ç—å—é –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")

    except Exception as e:
        print(f"\n‚ùå –¢–ï–°–¢ –ü–†–û–í–ê–õ–ï–ù: {e}")
        import traceback

        traceback.print_exc()
        return False

    return True


if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
