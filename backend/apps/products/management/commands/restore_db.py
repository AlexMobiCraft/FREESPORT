"""
Management –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏–∑ backup (Story 3.1.2)
"""
import os
import subprocess
from pathlib import Path

from django.conf import settings
from django.core.management.base import BaseCommand, CommandError


class Command(BaseCommand):
    """
    –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö PostgreSQL –∏–∑ backup —Ñ–∞–π–ª–∞

    –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
        python manage.py restore_db --backup-file=/path/to/backup.sql
        python manage.py restore_db --backup-file=/path/to/backup.sql --confirm

    –í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–∞ –æ–ø–µ—Ä–∞—Ü–∏—è –ü–ï–†–ï–ó–ê–ü–ò–®–ï–¢ —Ç–µ–∫—É—â—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö!
    """

    help = "–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏–∑ backup —Ñ–∞–π–ª–∞"

    def add_arguments(self, parser):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥—ã"""
        parser.add_argument(
            "--backup-file",
            type=str,
            required=True,
            help="–ü—É—Ç—å –∫ backup —Ñ–∞–π–ª—É –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è",
        )
        parser.add_argument(
            "--confirm",
            action="store_true",
            help="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ (–¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏)",
        )

    def handle(self, *args, **options):
        """–û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –∫–æ–º–∞–Ω–¥—ã"""
        backup_file = options["backup_file"]
        confirm = options.get("confirm", False)

        # –í–∞–ª–∏–¥–∞—Ü–∏—è backup —Ñ–∞–π–ª–∞
        backup_path = Path(backup_file)
        if not backup_path.exists():
            raise CommandError(f"Backup —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {backup_file}")

        if not backup_path.is_file():
            raise CommandError(f"–ü—É—Ç—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ñ–∞–π–ª–æ–º: {backup_file}")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ñ–∞–π–ª–∞
        if backup_path.suffix not in [".sql", ".gpg"]:
            self.stdout.write(
                self.style.WARNING(
                    f"‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞: {backup_path.suffix}"
                )
            )

        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        db_settings = settings.DATABASES["default"]

        if db_settings["ENGINE"] != "django.db.backends.postgresql":
            raise CommandError(
                f"Unsupported database engine: {db_settings['ENGINE']}. "
                "Only PostgreSQL is supported."
            )

        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
        if not confirm:
            self.stdout.write(
                self.style.WARNING(
                    "\n‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–∞ –æ–ø–µ—Ä–∞—Ü–∏—è –ü–ï–†–ï–ó–ê–ü–ò–®–ï–¢ —Ç–µ–∫—É—â—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö!"
                )
            )
            self.stdout.write(f"–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {db_settings['NAME']}")
            self.stdout.write(f"Backup —Ñ–∞–π–ª: {backup_path}")
            user_confirm = input("\n–í—ã —É–≤–µ—Ä–µ–Ω—ã? –í–≤–µ–¥–∏—Ç–µ 'yes' –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: ")

            if user_confirm.lower() != "yes":
                self.stdout.write(self.style.ERROR("‚ùå –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ"))
                return

        self.stdout.write(f"\nüíæ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –∏–∑: {backup_path}")

        # –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ GPG —Ñ–∞–π–ª–∞ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        actual_backup = backup_path
        if backup_path.suffix == ".gpg":
            actual_backup = self._decrypt_backup(backup_path)

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
        cmd = [
            "psql",
            "--host",
            db_settings.get("HOST", "localhost"),
            "--port",
            str(db_settings.get("PORT", 5432)),
            "--username",
            db_settings["USER"],
            "--dbname",
            db_settings["NAME"],
            "--no-password",
            "--file",
            str(actual_backup),
        ]

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –ø–∞—Ä–æ–ª—è
        env = os.environ.copy()
        env["PGPASSWORD"] = db_settings["PASSWORD"]

        try:
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É
            result = subprocess.run(
                cmd, env=env, capture_output=True, text=True, check=True
            )

            if result.returncode == 0:
                self.stdout.write(
                    self.style.SUCCESS("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
                )

                # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–∞–π–ª
                if actual_backup != backup_path and actual_backup.exists():
                    actual_backup.unlink()

            else:
                raise CommandError(f"psql failed: {result.stderr}")

        except subprocess.CalledProcessError as e:
            raise CommandError(f"Restore failed: {e.stderr}")
        except FileNotFoundError:
            raise CommandError(
                "psql not found. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ PostgreSQL client —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω."
            )
        finally:
            # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
            if (
                actual_backup != backup_path
                and actual_backup.exists()
                and actual_backup.suffix == ".tmp"
            ):
                actual_backup.unlink()

    def _decrypt_backup(self, encrypted_file: Path) -> Path:
        """
        –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ GPG backup —Ñ–∞–π–ª–∞

        Story 3.1.2: –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã—Ö backup —Ñ–∞–π–ª–æ–≤
        """
        try:
            import gnupg

            gpg = gnupg.GPG()
            decrypted_file = encrypted_file.with_suffix(".sql.tmp")

            with open(encrypted_file, "rb") as ef:
                decrypted = gpg.decrypt_file(ef, output=str(decrypted_file))

            if decrypted.ok:
                self.stdout.write(self.style.SUCCESS("üîì Backup —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω"))
                return decrypted_file
            else:
                raise CommandError(
                    f"–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å: {decrypted.status}. "
                    "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á—Ç–æ —É –≤–∞—Å –µ—Å—Ç—å –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á."
                )

        except ImportError:
            raise CommandError(
                "python-gnupg –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. "
                "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ backup —Ñ–∞–π–ª–∞–º–∏."
            )
        except Exception as e:
            raise CommandError(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏: {e}")
