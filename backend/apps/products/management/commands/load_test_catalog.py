"""
Django management –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫–∞—Ç–∞–ª–æ–≥–∞ —Ç–æ–≤–∞—Ä–æ–≤

–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
    python manage.py load_test_catalog --count=100
    python manage.py load_test_catalog --count=50 --with-categories --with-brands
    python manage.py load_test_catalog --clear-existing
"""

import random
from decimal import Decimal
from typing import Dict, List

from django.core.management.base import BaseCommand, CommandError
from django.db import transaction
from django.utils import timezone
from tqdm import tqdm

from apps.products.models import Brand, Category, Product


class Command(BaseCommand):
    """
    –ö–æ–º–∞–Ω–¥–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫–∞—Ç–∞–ª–æ–≥–∞ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    """

    help = "–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫–∞—Ç–∞–ª–æ–≥–∞ —Ç–æ–≤–∞—Ä–æ–≤ —Å —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"

    def add_arguments(self, parser):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥—ã"""
        parser.add_argument(
            "--count",
            type=int,
            default=50,
            help="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 50)",
        )

        parser.add_argument(
            "--with-categories", action="store_true", help="–°–æ–∑–¥–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤"
        )

        parser.add_argument(
            "--with-brands", action="store_true", help="–°–æ–∑–¥–∞—Ç—å –±—Ä–µ–Ω–¥—ã —Ç–æ–≤–∞—Ä–æ–≤"
        )

        parser.add_argument(
            "--clear-existing",
            action="store_true",
            help="–û—á–∏—Å—Ç–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π",
        )

        parser.add_argument(
            "--dry-run",
            action="store_true",
            help="–¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—É—Å–∫ –±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö",
        )

    def handle(self, *args, **options):
        """–û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –∫–æ–º–∞–Ω–¥—ã"""

        self.count = options["count"]
        self.with_categories = options["with_categories"]
        self.with_brands = options["with_brands"]
        self.clear_existing = options["clear_existing"]
        self.dry_run = options["dry_run"]

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        self.stdout.write(
            self.style.SUCCESS("üöÄ –ó–∞–ø—É—Å–∫ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫–∞—Ç–∞–ª–æ–≥–∞ —Ç–æ–≤–∞—Ä–æ–≤")  # type: ignore
        )

        if self.dry_run:
            self.stdout.write(
                self.style.WARNING("‚ö†Ô∏è  –†–ï–ñ–ò–ú DRY-RUN: –∏–∑–º–µ–Ω–µ–Ω–∏—è –ù–ï –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")  # type: ignore
            )

        try:
            with transaction.atomic():
                if self.dry_run:
                    savepoint = transaction.savepoint()

                # –û—á–∏—Å—Ç–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
                if self.clear_existing:
                    self._clear_existing_data()

                # –°–æ–∑–¥–∞–Ω–∏–µ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤
                brands = self._create_brands() if self.with_brands else []
                categories = self._create_categories() if self.with_categories else []

                # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤
                created_count = self._create_products(brands, categories)

                if self.dry_run:
                    transaction.savepoint_rollback(savepoint)
                    self.stdout.write(
                        self.style.SUCCESS(  # type: ignore
                            f"‚úÖ DRY-RUN –∑–∞–≤–µ—Ä—à–µ–Ω: {created_count} —Ç–æ–≤–∞—Ä–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ"
                        )
                    )
                else:
                    self.stdout.write(
                        self.style.SUCCESS(  # type: ignore
                            f"‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –∫–∞—Ç–∞–ª–æ–≥ –∑–∞–≥—Ä—É–∂–µ–Ω: {created_count} "
                            f"—Ç–æ–≤–∞—Ä–æ–≤ —Å–æ–∑–¥–∞–Ω–æ"
                        )
                    )

        except Exception as e:
            self.stdout.write(self.style.ERROR(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–∞–ª–æ–≥–∞: {str(e)}"))  # type: ignore
            raise

    def _clear_existing_data(self):
        """–û—á–∏—Å—Ç–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        self.stdout.write("üßπ –û—á–∏—Å—Ç–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")

        # –£–¥–∞–ª—è–µ–º —Ç–æ–≤–∞—Ä—ã —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ onec_id
        deleted_products = Product.objects.filter(  # type: ignore
            onec_id__startswith="TEST-PRODUCT-"
        ).delete()[0]

        # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –±—Ä–µ–Ω–¥—ã
        deleted_brands = Brand.objects.filter(  # type: ignore
            name__startswith="–¢–µ—Å—Ç–æ–≤—ã–π –±—Ä–µ–Ω–¥"
        ).delete()[0]

        # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        deleted_categories = Category.objects.filter(  # type: ignore
            name__startswith="–¢–µ—Å—Ç–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è"
        ).delete()[0]

        self.stdout.write(
            f"üìä –£–¥–∞–ª–µ–Ω–æ: {deleted_products} —Ç–æ–≤–∞—Ä–æ–≤, "
            f"{deleted_brands} –±—Ä–µ–Ω–¥–æ–≤, {deleted_categories} –∫–∞—Ç–µ–≥–æ—Ä–∏–π"
        )

    def _create_brands(self) -> List[Brand]:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –±—Ä–µ–Ω–¥–æ–≤"""
        self.stdout.write("üè∑Ô∏è  –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –±—Ä–µ–Ω–¥–æ–≤...")

        brand_names = [
            "Nike Test",
            "Adidas Test",
            "Puma Test",
            "Reebok Test",
            "Under Armour Test",
            "New Balance Test",
            "ASICS Test",
            "Wilson Test",
            "Head Test",
            "Babolat Test",
        ]

        brands = []
        for name in brand_names:
            brand, created = Brand.objects.get_or_create(  # type: ignore
                name=name, defaults={"is_active": True}
            )
            brands.append(brand)
            if created:
                self.stdout.write(f"  ‚úÖ –°–æ–∑–¥–∞–Ω –±—Ä–µ–Ω–¥: {name}")

        return brands

    def _create_categories(self) -> List[Category]:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
        self.stdout.write("üìÇ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π...")

        category_names = [
            "–û–±—É–≤—å —Ç–µ—Å—Ç–æ–≤–∞—è",
            "–û–¥–µ–∂–¥–∞ —Ç–µ—Å—Ç–æ–≤–∞—è",
            "–ê–∫—Å–µ—Å—Å—É–∞—Ä—ã —Ç–µ—Å—Ç–æ–≤–∞—è",
            "–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å —Ç–µ—Å—Ç–æ–≤–∞—è",
            "–ú—è—á–∏ —Ç–µ—Å—Ç–æ–≤–∞—è",
            "–†–∞–∫–µ—Ç–∫–∏ —Ç–µ—Å—Ç–æ–≤–∞—è",
            "–ó–∞—â–∏—Ç–∞ —Ç–µ—Å—Ç–æ–≤–∞—è",
            "–¢—Ä–µ–Ω–∞–∂–µ—Ä—ã —Ç–µ—Å—Ç–æ–≤–∞—è",
        ]

        categories = []
        for name in category_names:
            category, created = Category.objects.get_or_create(  # type: ignore
                name=name, defaults={"is_active": True}
            )
            categories.append(category)
            if created:
                self.stdout.write(f"  ‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {name}")

        return categories

    def _create_products(self, brands: List[Brand], categories: List[Category]) -> int:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤"""
        self.stdout.write(f"üì¶ –°–æ–∑–¥–∞–Ω–∏–µ {self.count} —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤...")

        # –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –±—Ä–µ–Ω–¥—ã –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –µ—Å–ª–∏ –Ω–µ —Å–æ–∑–¥–∞–≤–∞–ª–∏ –Ω–æ–≤—ã–µ
        if not brands:
            brands = list(Brand.objects.filter(is_active=True)[:10])  # type: ignore
            # –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ï—Å–ª–∏ –Ω–µ—Ç –±—Ä–µ–Ω–¥–æ–≤, —Å–æ–∑–¥–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π
            if not brands:
                default_brand, _ = Brand.objects.get_or_create(  # type: ignore
                    name="–¢–µ—Å—Ç–æ–≤—ã–π –±—Ä–µ–Ω–¥",
                    defaults={
                        "slug": "testovyj-brend",
                        "description": "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–Ω–Ω—ã–π –±—Ä–µ–Ω–¥ –¥–ª—è —Ç–µ—Å—Ç–æ–≤",
                        "is_active": True,
                    },
                )
                brands = [default_brand]

        if not categories:
            categories = list(Category.objects.filter(is_active=True)[:10])  # type: ignore
            # –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ï—Å–ª–∏ –Ω–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π, —Å–æ–∑–¥–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—É—é
            if not categories:
                default_category, _ = Category.objects.get_or_create(  # type: ignore
                    name="–¢–µ—Å—Ç–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è",
                    defaults={
                        "slug": "testovaya-kategoriya",
                        "description": "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–Ω–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è –¥–ª—è —Ç–µ—Å—Ç–æ–≤",
                        "is_active": True,
                    },
                )
                categories = [default_category]

        created_count = 0

        # Progress bar
        progress_bar = tqdm(
            range(self.count),
            desc="–°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤",
            unit="—Ç–æ–≤–∞—Ä–æ–≤",
            ncols=100,
            leave=True,
        )

        for i in progress_bar:
            try:
                product_data = self._generate_product_data(i + 1, brands, categories)

                product, created = Product.objects.get_or_create(  # type: ignore
                    onec_id=product_data["onec_id"], defaults=product_data
                )

                if created:
                    created_count += 1

            except Exception as e:
                self.stdout.write(
                    self.style.ERROR(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ #{i + 1}: {str(e)}")  # type: ignore
                )
                continue

        progress_bar.close()
        return created_count

    def _generate_product_data(
        self, index: int, brands: List[Brand], categories: List[Category]
    ) -> Dict:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–¥–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞"""

        # –ë–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        base_price = Decimal(random.randint(500, 5000))

        # –°–ª—É—á–∞–π–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
        materials = [
            "Cotton",
            "Polyester",
            "Nylon",
            "Leather",
            "Synthetic",
            "Mesh",
            "Canvas",
        ]
        colors = [
            "Black",
            "White",
            "Blue",
            "Red",
            "Green",
            "Yellow",
            "Gray",
            "Navy",
            "Pink",
        ]
        sizes = ["XS", "S", "M", "L", "XL", "XXL"]

        product_types = [
            "–ö—Ä–æ—Å—Å–æ–≤–∫–∏",
            "–§—É—Ç–±–æ–ª–∫–∞",
            "–®–æ—Ä—Ç—ã",
            "–ö—É—Ä—Ç–∫–∞",
            "–ú—è—á",
            "–†–∞–∫–µ—Ç–∫–∞",
            "–ü–µ—Ä—á–∞—Ç–∫–∏",
            "–û—á–∫–∏",
            "–°—É–º–∫–∞",
            "–ë—É—Ç—ã–ª–∫–∞",
        ]

        product_type = random.choice(product_types)

        return {
            "onec_id": f"TEST-PRODUCT-{index:05d}",
            "name": f"{product_type} —Ç–µ—Å—Ç–æ–≤—ã–π #{index}",
            "brand": random.choice(brands) if brands else None,
            "category": random.choice(categories) if categories else None,
            "description": f"–û–ø–∏—Å–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ {product_type} #{index} "
            f"–¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –∫–∞—Ç–∞–ª–æ–≥–∞",
            "short_description": f"–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ {product_type} #{index}",
            "sku": f"TEST-SKU-{index:05d}",
            "stock_quantity": random.randint(0, 200),
            "reserved_quantity": random.randint(0, 10),
            "min_order_quantity": random.choice(
                [1, 1, 1, 5, 10]
            ),  # 60% - —à—Ç—É—á–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã
            "specifications": {
                "material": random.choice(materials),
                "color": random.choice(colors),
                "size": random.choice(sizes),
                "weight": f"{random.randint(100, 2000)}g",
                "country": random.choice(["–ö–∏—Ç–∞–π", "–í—å–µ—Ç–Ω–∞–º", "–ò–Ω–¥–æ–Ω–µ–∑–∏—è", "–¢—É—Ä—Ü–∏—è"]),
                "gender": random.choice(["–ú—É–∂—Å–∫–æ–π", "–ñ–µ–Ω—Å–∫–∏–π", "–£–Ω–∏—Å–µ–∫—Å"]),
            },
            # –¶–µ–Ω—ã –¥–ª—è –≤—Å–µ—Ö —Ä–æ–ª–µ–π
            "retail_price": base_price,
            "opt1_price": base_price * Decimal("0.90"),  # 10% —Å–∫–∏–¥–∫–∞
            "opt2_price": base_price * Decimal("0.85"),  # 15% —Å–∫–∏–¥–∫–∞
            "opt3_price": base_price * Decimal("0.80"),  # 20% —Å–∫–∏–¥–∫–∞
            "trainer_price": base_price * Decimal("0.75"),  # 25% —Å–∫–∏–¥–∫–∞
            "federation_price": base_price * Decimal("0.70"),  # 30% —Å–∫–∏–¥–∫–∞
            "recommended_retail_price": base_price * Decimal("1.20"),  # +20% RRP
            "max_suggested_retail_price": base_price * Decimal("1.50"),  # +50% MSRP
            "is_active": random.choice([True, True, True, True, False]),  # 80% –∞–∫—Ç–∏–≤–Ω—ã—Ö
            "sync_status": random.choice(
                ["synced", "synced", "pending"]
            ),  # 70% —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö
            "last_sync_at": timezone.now(),
            "error_message": "",
        }
