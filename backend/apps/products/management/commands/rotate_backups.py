"""
Management –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ä–æ—Ç–∞—Ü–∏–∏ backup —Ñ–∞–π–ª–æ–≤ (Story 3.1.2)
"""
from datetime import datetime
from pathlib import Path

from django.conf import settings
from django.core.management.base import BaseCommand


class Command(BaseCommand):
    """
    –†–æ—Ç–∞—Ü–∏—è backup —Ñ–∞–π–ª–æ–≤ - —É–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö –∫–æ–ø–∏–π

    –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
        python manage.py rotate_backups
        python manage.py rotate_backups --keep=5
        python manage.py rotate_backups --dry-run
    
    –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 backup —Ñ–∞–π–ª–∞
    """

    help = "–†–æ—Ç–∞—Ü–∏—è backup —Ñ–∞–π–ª–æ–≤ (—É–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö –∫–æ–ø–∏–π)"

    def add_arguments(self, parser):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥—ã"""
        parser.add_argument(
            "--keep",
            type=int,
            default=3,
            help="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö backup —Ñ–∞–π–ª–æ–≤ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è (default: 3)",
        )
        parser.add_argument(
            "--dry-run",
            action="store_true",
            help="–ü–æ–∫–∞–∑–∞—Ç—å —á—Ç–æ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ –±–µ–∑ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è",
        )

    def handle(self, *args, **options):
        """–û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –∫–æ–º–∞–Ω–¥—ã"""
        keep = options.get("keep", 3)
        dry_run = options.get("dry_run", False)

        if keep < 1:
            self.stdout.write(
                self.style.ERROR("‚ùå –ü–∞—Ä–∞–º–µ—Ç—Ä --keep –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å >= 1")
            )
            return

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —Å –±—ç–∫–∞–ø–∞–º–∏
        backup_dir = getattr(settings, "BACKUP_DIR", "backend/backup_db")
        backup_path = Path(backup_dir)

        if not backup_path.exists():
            self.stdout.write(
                self.style.WARNING(f"‚ö†Ô∏è –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è backup –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {backup_dir}")
            )
            return

        # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ backup —Ñ–∞–π–ª—ã
        backup_patterns = ["backup_*.sql", "backup_*.sql.gpg"]
        all_backups = []

        for pattern in backup_patterns:
            all_backups.extend(backup_path.glob(pattern))

        if not all_backups:
            self.stdout.write(
                self.style.WARNING(f"‚ö†Ô∏è Backup —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ {backup_dir}")
            )
            return

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ (–Ω–æ–≤—ã–µ –ø–µ—Ä–≤—ã–µ)
        sorted_backups = sorted(
            all_backups, key=lambda p: p.stat().st_mtime, reverse=True
        )

        total_count = len(sorted_backups)
        to_keep = sorted_backups[:keep]
        to_delete = sorted_backups[keep:]

        # –í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        self.stdout.write("\n" + "=" * 50)
        self.stdout.write(f"üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê BACKUP –§–ê–ô–õ–û–í:")
        self.stdout.write(f"   –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: {total_count}")
        self.stdout.write(f"   –°–æ—Ö—Ä–∞–Ω–∏—Ç—å: {len(to_keep)}")
        self.stdout.write(f"   –£–¥–∞–ª–∏—Ç—å: {len(to_delete)}")
        self.stdout.write("=" * 50)

        if dry_run:
            self.stdout.write(
                self.style.WARNING("\nüîç DRY RUN MODE: –§–∞–π–ª—ã –Ω–µ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã")
            )

        # –í—ã–≤–æ–¥–∏–º —Ñ–∞–π–ª—ã –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã
        if to_keep:
            self.stdout.write("\n‚úÖ –°–û–•–†–ê–ù–ò–¢–¨ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ):")
            for backup in to_keep:
                file_time = datetime.fromtimestamp(backup.stat().st_mtime)
                file_size = backup.stat().st_size / (1024 * 1024)  # MB
                self.stdout.write(
                    f"   ‚Ä¢ {backup.name} ({file_time.strftime('%Y-%m-%d %H:%M:%S')}, "
                    f"{file_size:.2f} MB)"
                )

        # –í—ã–≤–æ–¥–∏–º –∏ —É–¥–∞–ª—è–µ–º —Ñ–∞–π–ª—ã
        if to_delete:
            self.stdout.write("\nüóëÔ∏è  –£–î–ê–õ–ò–¢–¨ (—Å—Ç–∞—Ä—ã–µ):")
            deleted_count = 0
            errors = 0

            for backup in to_delete:
                file_time = datetime.fromtimestamp(backup.stat().st_mtime)
                file_size = backup.stat().st_size / (1024 * 1024)  # MB
                
                if dry_run:
                    self.stdout.write(
                        f"   ‚Ä¢ {backup.name} ({file_time.strftime('%Y-%m-%d %H:%M:%S')}, "
                        f"{file_size:.2f} MB)"
                    )
                else:
                    try:
                        backup.unlink()
                        deleted_count += 1
                        self.stdout.write(
                            f"   ‚úì {backup.name} ({file_time.strftime('%Y-%m-%d %H:%M:%S')}, "
                            f"{file_size:.2f} MB)"
                        )
                    except Exception as e:
                        errors += 1
                        self.stdout.write(
                            self.style.ERROR(f"   ‚úó {backup.name}: {e}")
                        )

            # –ò—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            self.stdout.write("\n" + "=" * 50)
            if dry_run:
                self.stdout.write(
                    self.style.SUCCESS(
                        f"‚úÖ DRY RUN –ó–ê–í–ï–†–®–ï–ù: –ë—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ {len(to_delete)} —Ñ–∞–π–ª–æ–≤"
                    )
                )
            else:
                if errors == 0:
                    self.stdout.write(
                        self.style.SUCCESS(
                            f"‚úÖ –†–û–¢–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê: –£–¥–∞–ª–µ–Ω–æ {deleted_count} —Ñ–∞–π–ª–æ–≤"
                        )
                    )
                else:
                    self.stdout.write(
                        self.style.WARNING(
                            f"‚ö†Ô∏è –†–û–¢–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê –° –û–®–ò–ë–ö–ê–ú–ò: "
                            f"–£–¥–∞–ª–µ–Ω–æ {deleted_count}, –æ—à–∏–±–æ–∫ {errors}"
                        )
                    )
            self.stdout.write("=" * 50)
        else:
            self.stdout.write(
                self.style.SUCCESS(
                    f"\n‚úÖ –§–∞–π–ª–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –Ω–µ—Ç (–≤—Å–µ–≥–æ {total_count}, —Ö—Ä–∞–Ω–∏—Ç—å {keep})"
                )
            )
