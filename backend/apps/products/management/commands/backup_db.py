"""
Management –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (Story 3.1.2)
"""
import glob
import os
import subprocess
from datetime import datetime
from pathlib import Path

from django.conf import settings
from django.core.management.base import BaseCommand, CommandError


class Command(BaseCommand):
    """
    –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö PostgreSQL

    –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
        python manage.py backup_db
        python manage.py backup_db --encrypt
    
    Backup —Ñ–∞–π–ª—ã —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ BACKUP_DIR (default: backend/backup_db/)
    –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –∫–æ–ø–∏–∏ (—Ä–æ—Ç–∞—Ü–∏—è)
    """

    help = "–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"

    def add_arguments(self, parser):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥—ã"""
        parser.add_argument(
            "--encrypt",
            action="store_true",
            help="–®–∏—Ñ—Ä–æ–≤–∞—Ç—å backup —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º GPG (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)",
        )
        parser.add_argument(
            "--output",
            type=str,
            help="–ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è backup —Ñ–∞–π–ª–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)",
        )

    def handle(self, *args, **options):
        """–û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –∫–æ–º–∞–Ω–¥—ã"""
        encrypt = options.get("encrypt", False)
        custom_output = options.get("output")

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –±—ç–∫–∞–ø–æ–≤
        backup_dir = getattr(settings, "BACKUP_DIR", "backend/backup_db")
        backup_path = Path(backup_dir)
        backup_path.mkdir(parents=True, exist_ok=True)

        # –°–æ–∑–¥–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –±—ç–∫–∞–ø–∞
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        if custom_output:
            backup_file = Path(custom_output)
        else:
            backup_file = backup_path / f"backup_{timestamp}.sql"

        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        db_settings = settings.DATABASES["default"]

        if db_settings["ENGINE"] != "django.db.backends.postgresql":
            raise CommandError(
                f"Unsupported database engine: {db_settings['ENGINE']}. "
                "Only PostgreSQL is supported."
            )

        self.stdout.write(f"üíæ –°–æ–∑–¥–∞–Ω–∏–µ backup: {backup_file}")

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±—ç–∫–∞–ø–∞
        cmd = [
            "pg_dump",
            "--host",
            db_settings.get("HOST", "localhost"),
            "--port",
            str(db_settings.get("PORT", 5432)),
            "--username",
            db_settings["USER"],
            "--dbname",
            db_settings["NAME"],
            "--no-password",
            "--file",
            str(backup_file),
            "--format=plain",
            "--no-owner",
            "--no-privileges",
        ]

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –ø–∞—Ä–æ–ª—è
        env = os.environ.copy()
        env["PGPASSWORD"] = db_settings["PASSWORD"]

        try:
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É
            result = subprocess.run(
                cmd, env=env, capture_output=True, text=True, check=True
            )

            if result.returncode == 0:
                file_size = backup_file.stat().st_size / (1024 * 1024)  # MB
                self.stdout.write(
                    self.style.SUCCESS(
                        f"‚úÖ Backup —Å–æ–∑–¥–∞–Ω: {backup_file} ({file_size:.2f} MB)"
                    )
                )

                # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ (Story 3.1.2)
                if encrypt:
                    self._encrypt_backup(backup_file)

                # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–æ—Ç–∞—Ü–∏—è (—Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –∫–æ–ø–∏–∏)
                if not custom_output:
                    self._rotate_backups(backup_path, keep=3)

            else:
                raise CommandError(f"pg_dump failed: {result.stderr}")

        except subprocess.CalledProcessError as e:
            raise CommandError(f"Backup failed: {e.stderr}")
        except FileNotFoundError:
            raise CommandError(
                "pg_dump not found. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ PostgreSQL client —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω."
            )

    def _encrypt_backup(self, backup_file: Path) -> None:
        """
        –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ backup —Ñ–∞–π–ª–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º GPG (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        
        Story 3.1.2: –î–æ–±–∞–≤–ª–µ–Ω–æ –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ backup-—Ñ–∞–π–ª–æ–≤
        """
        try:
            import gnupg

            gpg = gnupg.GPG()
            encrypted_file = backup_file.with_suffix(".sql.gpg")

            with open(backup_file, "rb") as f:
                encrypted = gpg.encrypt_file(
                    f,
                    recipients=[getattr(settings, "BACKUP_GPG_RECIPIENT", "backup@freesport.com")],
                    output=str(encrypted_file),
                    armor=False,
                )

            if encrypted.ok:
                # –£–¥–∞–ª—è–µ–º –Ω–µ–∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—É—é –∫–æ–ø–∏—é
                backup_file.unlink()
                self.stdout.write(
                    self.style.SUCCESS(f"üîê Backup –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω: {encrypted_file}")
                )
            else:
                self.stdout.write(
                    self.style.WARNING(
                        f"‚ö†Ô∏è –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å: {encrypted.status}. "
                        "–°–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –Ω–µ–∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–∞—è –∫–æ–ø–∏—è."
                    )
                )

        except ImportError:
            self.stdout.write(
                self.style.WARNING(
                    "‚ö†Ô∏è python-gnupg –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ."
                )
            )
        except Exception as e:
            self.stdout.write(
                self.style.WARNING(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è: {e}. Backup —Å–æ—Ö—Ä–∞–Ω–µ–Ω.")
            )

    def _rotate_backups(self, backup_dir: Path, keep: int = 3) -> None:
        """
        –†–æ—Ç–∞—Ü–∏—è backup —Ñ–∞–π–ª–æ–≤ - —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö N –∫–æ–ø–∏–π
        
        Story 3.1.2: –•—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 3 backup –∫–æ–ø–∏–π
        """
        # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ backup —Ñ–∞–π–ª—ã
        backup_files = sorted(
            backup_dir.glob("backup_*.sql*"), key=lambda p: p.stat().st_mtime, reverse=True
        )

        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –±—ç–∫–∞–ø—ã, –æ—Å—Ç–∞–≤–ª—è—è —Ç–æ–ª—å–∫–æ keep –ø–æ—Å–ª–µ–¥–Ω–∏—Ö
        for old_backup in backup_files[keep:]:
            try:
                old_backup.unlink()
                self.stdout.write(f"üóëÔ∏è  –£–¥–∞–ª–µ–Ω —Å—Ç–∞—Ä—ã–π backup: {old_backup.name}")
            except Exception as e:
                self.stdout.write(
                    self.style.WARNING(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å {old_backup}: {e}")
                )
