"""
Management –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –∫–∞—Ç–∞–ª–æ–≥–∞ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ 1–°
"""
import os
from pathlib import Path
from typing import cast

from django.core.management.base import BaseCommand, CommandError

from apps.products.models import ImportSession
from apps.products.services.parser import XMLDataParser
from apps.products.services.processor import ProductDataProcessor


class Command(BaseCommand):
    """
    –ò–º–ø–æ—Ä—Ç –∫–∞—Ç–∞–ª–æ–≥–∞ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ XML —Ñ–∞–π–ª–æ–≤ 1–° (CommerceML 3.1)

    –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
        python manage.py import_catalog_from_1c --data-dir /path/to/1c/data
        python manage.py import_catalog_from_1c --data-dir /path --dry-run
    """

    help = "–ò–º–ø–æ—Ä—Ç –∫–∞—Ç–∞–ª–æ–≥–∞ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ —Ñ–∞–π–ª–æ–≤ 1–° (CommerceML 3.1)"

    def add_arguments(self, parser):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥—ã"""
        parser.add_argument(
            "--data-dir",
            type=str,
            required=True,
            help="–ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å XML —Ñ–∞–π–ª–∞–º–∏ –∏–∑ 1–°",
        )
        parser.add_argument(
            "--dry-run",
            action="store_true",
            help="–¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—É—Å–∫ –±–µ–∑ –∑–∞–ø–∏—Å–∏ –≤ –ë–î",
        )

    def handle(self, *args, **options):
        """–û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –∫–æ–º–∞–Ω–¥—ã"""
        data_dir = options["data_dir"]
        dry_run = options.get("dry_run", False)

        # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        if not os.path.exists(data_dir):
            raise CommandError(f"–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {data_dir}")

        if not os.path.isdir(data_dir):
            raise CommandError(f"–ü—É—Ç—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–µ–π: {data_dir}")

        # –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        required_subdirs = ["goods", "offers", "prices", "rests", "priceLists"]
        for subdir in required_subdirs:
            subdir_path = os.path.join(data_dir, subdir)
            if not os.path.exists(subdir_path):
                raise CommandError(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è –ø–æ–¥–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {subdir}")

        if dry_run:
            self.stdout.write(
                self.style.WARNING("üîç DRY RUN MODE: –ò–∑–º–µ–Ω–µ–Ω–∏—è –Ω–µ –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ë–î")
            )
            return self._dry_run_import(data_dir)

        # –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –∏–º–ø–æ—Ä—Ç–∞
        session = ImportSession.objects.create(
            import_type=ImportSession.ImportType.CATALOG,
            status=ImportSession.ImportStatus.STARTED,
        )
        session_id = cast(int, session.pk)

        self.stdout.write(
            self.style.SUCCESS(
                "‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Å–µ—Å—Å–∏—è –∏–º–ø–æ—Ä—Ç–∞ ID: {session_id}".format(
                    session_id=session_id
                )
            )
        )

        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞—Ä—Å–µ—Ä–∞ –∏ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
            parser = XMLDataParser()
            processor = ProductDataProcessor(session_id=session_id)

            # –®–ê–ì 1: –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–∏–ø–æ–≤ —Ü–µ–Ω –∏–∑ priceLists*.xml
            self.stdout.write("\nüìã –®–∞–≥ 1: –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–∏–ø–æ–≤ —Ü–µ–Ω...")
            price_list_files = self._collect_xml_files(
                data_dir, "priceLists", "priceLists.xml"
            )
            if price_list_files:
                total_price_types = 0
                for file_path in price_list_files:
                    price_types_data = parser.parse_price_lists_xml(file_path)
                    processed = processor.process_price_types(price_types_data)
                    total_price_types += processed
                    self.stdout.write(
                        f"   ‚Ä¢ {Path(file_path).name}: —Ç–∏–ø–æ–≤ —Ü–µ–Ω {processed}"
                    )
                self.stdout.write(
                    self.style.SUCCESS(
                        f"   ‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ç–∏–ø–æ–≤ —Ü–µ–Ω (–≤—Å–µ–≥–æ): {total_price_types}"
                    )
                )
            else:
                self.stdout.write(
                    self.style.WARNING("   ‚ö†Ô∏è –§–∞–π–ª—ã priceLists*.xml –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                )

            # –®–ê–ì 2: –ü–∞—Ä—Å–∏–Ω–≥ goods*.xml - —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–≥–æ—Ç–æ–≤–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤
            self.stdout.write("\nüì¶ –®–∞–≥ 2: –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–≥–æ—Ç–æ–≤–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ goods.xml...")
            goods_files = self._collect_xml_files(data_dir, "goods", "goods.xml")
            if not goods_files:
                raise CommandError("–§–∞–π–ª—ã goods.xml –∏–ª–∏ goods_*.xml –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")

            for file_path in goods_files:
                goods_data = parser.parse_goods_xml(file_path)
                for goods_item in goods_data:
                    processor.create_product_placeholder(goods_item)
                self.stdout.write(
                    f"   ‚Ä¢ {Path(file_path).name}: —Ç–æ–≤–∞—Ä–æ–≤ {len(goods_data)}"
                )

            self.stdout.write(
                self.style.SUCCESS(
                    f"   ‚úÖ –°–æ–∑–¥–∞–Ω–æ –∑–∞–≥–æ—Ç–æ–≤–æ–∫: {processor.stats['created']}"
                )
            )

            # –®–ê–ì 3: –ü–∞—Ä—Å–∏–Ω–≥ offers*.xml - –æ–±–æ–≥–∞—â–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤
            self.stdout.write("\nüéÅ –®–∞–≥ 3: –û–±–æ–≥–∞—â–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ offers.xml...")
            offers_files = self._collect_xml_files(data_dir, "offers", "offers.xml")
            if not offers_files:
                raise CommandError("–§–∞–π–ª—ã offers.xml –∏–ª–∏ offers_*.xml –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")

            for file_path in offers_files:
                offers_data = parser.parse_offers_xml(file_path)
                for offer_item in offers_data:
                    processor.enrich_product_from_offer(offer_item)
                self.stdout.write(
                    f"   ‚Ä¢ {Path(file_path).name}: –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π {len(offers_data)}"
                )

            self.stdout.write(
                self.style.SUCCESS(
                    f"   ‚úÖ –û–±–æ–≥–∞—â–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {processor.stats['updated']}"
                )
            )

            # –®–ê–ì 4: –ü–∞—Ä—Å–∏–Ω–≥ prices*.xml - –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω
            self.stdout.write("\nüí∞ –®–∞–≥ 4: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω –∏–∑ prices.xml...")
            prices_files = self._collect_xml_files(data_dir, "prices", "prices.xml")
            if not prices_files:
                self.stdout.write(
                    self.style.WARNING(
                        "   ‚ö†Ô∏è –§–∞–π–ª—ã prices.xml –∏–ª–∏ prices_*.xml –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
                    )
                )
            else:
                for file_path in prices_files:
                    prices_data = parser.parse_prices_xml(file_path)
                    for price_item in prices_data:
                        processor.update_product_prices(price_item)
                    self.stdout.write(
                        "   ‚Ä¢ {name}: –∑–∞–ø–∏—Å–µ–π —Ü–µ–Ω {count}".format(
                            name=Path(file_path).name, count=len(prices_data)
                        )
                    )

                self.stdout.write(
                    self.style.SUCCESS(
                        f"   ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ —Ü–µ–Ω: {processor.stats['updated']}"
                    )
                )

            # –®–ê–ì 5: –ü–∞—Ä—Å–∏–Ω–≥ rests*.xml - –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–æ–≤
            self.stdout.write("\nüìä –®–∞–≥ 5: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–æ–≤ –∏–∑ rests.xml...")
            rests_files = self._collect_xml_files(data_dir, "rests", "rests.xml")
            if not rests_files:
                self.stdout.write(
                    self.style.WARNING(
                        "   ‚ö†Ô∏è –§–∞–π–ª—ã rests.xml –∏–ª–∏ rests_*.xml –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
                    )
                )
            else:
                for file_path in rests_files:
                    rests_data = parser.parse_rests_xml(file_path)
                    for rest_item in rests_data:
                        processor.update_product_stock(rest_item)
                    self.stdout.write(
                        "   ‚Ä¢ {name}: –∑–∞–ø–∏—Å–µ–π –æ—Å—Ç–∞—Ç–∫–æ–≤ {count}".format(
                            name=Path(file_path).name, count=len(rests_data)
                        )
                    )

                self.stdout.write(
                    self.style.SUCCESS(
                        f"   ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ –æ—Å—Ç–∞—Ç–∫–æ–≤: {processor.stats['updated']}"
                    )
                )

            # –§–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Å—Å–∏–∏
            processor.finalize_session(status=ImportSession.ImportStatus.COMPLETED)

            # –í—ã–≤–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            self.stdout.write("\n" + "=" * 50)
            self.stdout.write(self.style.SUCCESS("‚úÖ –ò–ú–ü–û–†–¢ –ó–ê–í–ï–†–®–ï–ù –£–°–ü–ï–®–ù–û"))
            self.stdout.write("=" * 50)
            self.stdout.write(f"–°–æ–∑–¥–∞–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤:   {processor.stats['created']}")
            self.stdout.write(f"–û–±–Ω–æ–≤–ª–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {processor.stats['updated']}")
            self.stdout.write(f"–ü—Ä–æ–ø—É—â–µ–Ω–æ:         {processor.stats['skipped']}")
            self.stdout.write(f"–û—à–∏–±–æ–∫:            {processor.stats['errors']}")
            self.stdout.write("=" * 50)

        except Exception as e:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
            self.stdout.write(self.style.ERROR(f"\n‚ùå –û–®–ò–ë–ö–ê –ò–ú–ü–û–†–¢–ê: {e}"))

            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Å—Å–∏–∏
            session.status = ImportSession.ImportStatus.FAILED
            session.error_message = str(e)
            session.save()

            raise CommandError(f"–ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π: {e}")

    def _collect_xml_files(
        self, base_dir: str, subdir: str, filename: str
    ) -> list[str]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —É–ø–æ—Ä—è–¥–æ—á–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ XML —Ñ–∞–π–ª–æ–≤,
        –≤–∫–ª—é—á–∞—è —Å–µ–≥–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤—ã–≥—Ä—É–∑–∫–∏.
        """

        base_path = Path(base_dir) / subdir
        if not base_path.exists():
            return []

        collected: list[Path] = []
        prefix = filename.replace(".xml", "")

        direct_file = base_path / filename
        if direct_file.exists():
            collected.append(direct_file)

        for segmented_file in sorted(base_path.glob(f"{prefix}_*.xml")):
            if segmented_file not in collected:
                collected.append(segmented_file)

        legacy_file = base_path / "import_files" / filename
        if legacy_file.exists() and legacy_file not in collected:
            collected.append(legacy_file)

        return [str(path) for path in collected]

    def _dry_run_import(self, data_dir: str) -> None:
        """–¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—É—Å–∫ –∏–º–ø–æ—Ä—Ç–∞ –±–µ–∑ –∑–∞–ø–∏—Å–∏ –≤ –ë–î"""
        parser = XMLDataParser()

        self.stdout.write("\nüìã –ü—Ä–æ–≤–µ—Ä–∫–∞ priceLists.xml...")
        price_list_files = self._collect_xml_files(
            data_dir, "priceLists", "priceLists.xml"
        )
        if price_list_files:
            total_price_types = 0
            for file_path in price_list_files:
                price_types = parser.parse_price_lists_xml(file_path)
                total_price_types += len(price_types)
                self.stdout.write(
                    f"   ‚Ä¢ {Path(file_path).name}: –∑–∞–ø–∏—Å–µ–π {len(price_types)}"
                )
            self.stdout.write(f"   ‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ç–∏–ø–æ–≤ —Ü–µ–Ω (–≤—Å–µ–≥–æ): {total_price_types}")
        else:
            self.stdout.write("   ‚ö†Ô∏è –§–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")

        self.stdout.write("\nüì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ goods.xml...")
        goods_files = self._collect_xml_files(data_dir, "goods", "goods.xml")
        if goods_files:
            total_goods = 0
            for file_path in goods_files:
                goods_data = parser.parse_goods_xml(file_path)
                total_goods += len(goods_data)
                self.stdout.write(
                    f"   ‚Ä¢ {Path(file_path).name}: —Ç–æ–≤–∞—Ä–æ–≤ {len(goods_data)}"
                )
            self.stdout.write(f"   ‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤ (–≤—Å–µ–≥–æ): {total_goods}")
        else:
            self.stdout.write("   ‚ùå –§–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")

        self.stdout.write("\nüéÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ offers.xml...")
        offers_files = self._collect_xml_files(data_dir, "offers", "offers.xml")
        if offers_files:
            total_offers = 0
            for file_path in offers_files:
                offers_data = parser.parse_offers_xml(file_path)
                total_offers += len(offers_data)
                self.stdout.write(
                    f"   ‚Ä¢ {Path(file_path).name}: –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π {len(offers_data)}"
                )
            self.stdout.write(f"   ‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π (–≤—Å–µ–≥–æ): {total_offers}")
        else:
            self.stdout.write("   ‚ùå –§–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")

        self.stdout.write("\nüí∞ –ü—Ä–æ–≤–µ—Ä–∫–∞ prices.xml...")
        prices_files = self._collect_xml_files(data_dir, "prices", "prices.xml")
        if prices_files:
            total_prices = 0
            for file_path in prices_files:
                prices_data = parser.parse_prices_xml(file_path)
                total_prices += len(prices_data)
                self.stdout.write(
                    f"   ‚Ä¢ {Path(file_path).name}: –∑–∞–ø–∏—Å–µ–π —Ü–µ–Ω {len(prices_data)}"
                )
            self.stdout.write(f"   ‚úÖ –ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π —Ü–µ–Ω (–≤—Å–µ–≥–æ): {total_prices}")
        else:
            self.stdout.write("   ‚ö†Ô∏è –§–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")

        self.stdout.write("\nüìä –ü—Ä–æ–≤–µ—Ä–∫–∞ rests.xml...")
        rests_files = self._collect_xml_files(data_dir, "rests", "rests.xml")
        if rests_files:
            total_rests = 0
            for file_path in rests_files:
                rests_data = parser.parse_rests_xml(file_path)
                total_rests += len(rests_data)
                self.stdout.write(
                    f"   ‚Ä¢ {Path(file_path).name}: –∑–∞–ø–∏—Å–µ–π –æ—Å—Ç–∞—Ç–∫–æ–≤ {len(rests_data)}"
                )
            self.stdout.write(f"   ‚úÖ –ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π –æ—Å—Ç–∞—Ç–∫–æ–≤ (–≤—Å–µ–≥–æ): {total_rests}")
        else:
            self.stdout.write("   ‚ö†Ô∏è –§–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")

        self.stdout.write("\n" + "=" * 50)
        self.stdout.write(
            self.style.SUCCESS("‚úÖ DRY RUN –ó–ê–í–ï–†–®–ï–ù: –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ñ–∞–π–ª–æ–≤ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
        )
        self.stdout.write("=" * 50)
