"""
Django management –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –∫–∞—Ç–∞–ª–æ–≥–∞ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ 1–°

–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
    python manage.py import_catalog_from_1c --file=catalog.xml
    python manage.py import_catalog_from_1c --file=catalog.json --dry-run
    python manage.py import_catalog_from_1c --mock-data --chunk-size=100
"""

import json
import time
from decimal import Decimal
from pathlib import Path
from typing import Dict, List, Optional

from django.core.management.base import BaseCommand, CommandError
from django.db import transaction
from django.utils import timezone
from tqdm import tqdm

from apps.products.models import Brand, Category, Product


class Command(BaseCommand):
    """
    –ö–æ–º–∞–Ω–¥–∞ –∏–º–ø–æ—Ä—Ç–∞ –∫–∞—Ç–∞–ª–æ–≥–∞ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ 1–°
    """

    help = "–ò–º–ø–æ—Ä—Ç –∫–∞—Ç–∞–ª–æ–≥–∞ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ 1–° (XML/JSON)"

    def add_arguments(self, parser):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥—ã"""
        parser.add_argument(
            "--file", type=str, help="–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –¥–∞–Ω–Ω—ã—Ö 1–° (XML –∏–ª–∏ JSON)"
        )

        parser.add_argument(
            "--dry-run",
            action="store_true",
            help="–¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—É—Å–∫ –±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö",
        )

        parser.add_argument(
            "--chunk-size",
            type=int,
            default=50,
            help="–†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 50)",
        )

        parser.add_argument(
            "--mock-data",
            action="store_true",
            help="–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≤–º–µ—Å—Ç–æ —Ñ–∞–π–ª–∞",
        )

        parser.add_argument(
            "--force",
            action="store_true",
            help="–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–æ–≤–∞—Ä—ã",
        )

    def handle(self, *args, **options):
        """–û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –∫–æ–º–∞–Ω–¥—ã"""

        self.dry_run = options["dry_run"]
        self.chunk_size = options["chunk_size"]
        self.force = options["force"]
        self.file_path = options["file"]
        self.use_mock_data = options["mock_data"]

        # –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        if not self.file_path and not self.use_mock_data:
            raise CommandError(
                "–£–∫–∞–∂–∏—Ç–µ –ª–∏–±–æ --file –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ —Ñ–∞–π–ª–∞, –ª–∏–±–æ --mock-data –¥–ª—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö"
            )

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        self.stdout.write(self.style.SUCCESS("üöÄ –ó–∞–ø—É—Å–∫ –∏–º–ø–æ—Ä—Ç–∞ –∫–∞—Ç–∞–ª–æ–≥–∞ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ 1–°"))

        if self.dry_run:
            self.stdout.write(
                self.style.WARNING("‚ö†Ô∏è  –†–ï–ñ–ò–ú DRY-RUN: –∏–∑–º–µ–Ω–µ–Ω–∏—è –ù–ï –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
            )

        try:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
            if self.use_mock_data:
                products_data = self._get_mock_products_data()
                self.stdout.write(
                    f"üì¶ –ó–∞–≥—Ä—É–∂–µ–Ω—ã —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ: {len(products_data)} —Ç–æ–≤–∞—Ä–æ–≤"
                )
            else:
                products_data = self._load_data_from_file()
                self.stdout.write(f"üìÅ –ó–∞–≥—Ä—É–∂–µ–Ω —Ñ–∞–π–ª: {len(products_data)} —Ç–æ–≤–∞—Ä–æ–≤")

            # –ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö
            imported_count = self._import_products(products_data)

            # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            if self.dry_run:
                self.stdout.write(
                    self.style.SUCCESS(
                        f"‚úÖ DRY-RUN –∑–∞–≤–µ—Ä—à–µ–Ω: {imported_count} —Ç–æ–≤–∞—Ä–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ"
                    )
                )
            else:
                self.stdout.write(
                    self.style.SUCCESS(
                        f"‚úÖ –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ: {imported_count} —Ç–æ–≤–∞—Ä–æ–≤ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ"
                    )
                )

        except Exception as e:
            self.stdout.write(self.style.ERROR(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {str(e)}"))
            raise

    def _load_data_from_file(self) -> List[Dict]:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞"""

        if not Path(self.file_path).exists():
            raise CommandError(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {self.file_path}")

        file_path = Path(self.file_path)

        if file_path.suffix.lower() == ".json":
            return self._parse_json_file(file_path)
        elif file_path.suffix.lower() in [".xml"]:
            return self._parse_xml_file(file_path)
        else:
            raise CommandError(
                f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞: {file_path.suffix}. "
                "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è: .json, .xml"
            )

    def _parse_json_file(self, file_path: Path) -> List[Dict]:
        """–ü–∞—Ä—Å–∏–Ω–≥ JSON —Ñ–∞–π–ª–∞"""
        try:
            with open(file_path, "r", encoding="utf-8") as f:
                data = json.load(f)

            if isinstance(data, dict) and "products" in data:
                return data["products"]
            elif isinstance(data, list):
                return data
            else:
                raise CommandError("–ù–µ–≤–µ—Ä–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ JSON —Ñ–∞–π–ª–∞")

        except json.JSONDecodeError as e:
            raise CommandError(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {str(e)}")

    def _parse_xml_file(self, file_path: Path) -> List[Dict]:
        """–ü–∞—Ä—Å–∏–Ω–≥ XML —Ñ–∞–π–ª–∞ (–∑–∞–≥–ª—É—à–∫–∞)"""
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å XML –ø–∞—Ä—Å–µ—Ä –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—Ä–∞–∑—Ü–æ–≤ –æ—Ç 1–°
        raise CommandError(
            "XML –ø–∞—Ä—Å–µ—Ä –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—Ä–∞–∑—Ü–æ–≤ —Ñ–∞–π–ª–æ–≤ –æ—Ç 1–°. "
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ --mock-data –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."
        )

    def _get_mock_products_data(self) -> List[Dict]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤"""

        mock_brands = ["Nike", "Adidas", "Puma", "Reebok", "Under Armour"]
        mock_categories = ["–û–±—É–≤—å", "–û–¥–µ–∂–¥–∞", "–ê–∫—Å–µ—Å—Å—É–∞—Ä—ã", "–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å"]

        products = []

        for i in range(1, 21):  # 20 —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
            product = {
                "onec_id": f"1C-PRODUCT-{i:05d}",
                "name": f"–¢–æ–≤–∞—Ä —Ç–µ—Å—Ç–æ–≤—ã–π #{i}",
                "brand": mock_brands[i % len(mock_brands)],
                "category": mock_categories[i % len(mock_categories)],
                "description": f"–û–ø–∏—Å–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ #{i} –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –∏–º–ø–æ—Ä—Ç–∞ –∏–∑ 1–°",
                "short_description": f"–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ #{i}",
                "sku": f"SKU-{i:05d}",
                "stock_quantity": (i * 5) % 100,
                "specifications": {
                    "material": "Synthetic" if i % 2 == 0 else "Cotton",
                    "color": "Blue" if i % 3 == 0 else "Red",
                    "size": ["S", "M", "L", "XL"][i % 4],
                },
                "prices": {
                    "retail_price": str(Decimal("1000.00") + Decimal(i * 100)),
                    "opt1_price": str(Decimal("800.00") + Decimal(i * 80)),
                    "opt2_price": str(Decimal("700.00") + Decimal(i * 70)),
                    "opt3_price": str(Decimal("600.00") + Decimal(i * 60)),
                    "trainer_price": str(Decimal("750.00") + Decimal(i * 75)),
                    "federation_price": str(Decimal("500.00") + Decimal(i * 50)),
                    "recommended_retail_price": str(
                        Decimal("1200.00") + Decimal(i * 120)
                    ),
                    "max_suggested_retail_price": str(
                        Decimal("1500.00") + Decimal(i * 150)
                    ),
                },
                "is_active": i % 10 != 0,  # 90% –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
                "min_order_quantity": 1 if i % 5 != 0 else 5,
            }
            products.append(product)

        return products

    def _import_products(self, products_data: List[Dict]) -> int:
        """–ò–º–ø–æ—Ä—Ç —Ç–æ–≤–∞—Ä–æ–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""

        imported_count = 0

        # Progress bar
        progress_bar = tqdm(
            products_data, desc="–ò–º–ø–æ—Ä—Ç —Ç–æ–≤–∞—Ä–æ–≤", unit="—Ç–æ–≤–∞—Ä–æ–≤", ncols=100, leave=True
        )

        with transaction.atomic():
            if self.dry_run:
                # –°–æ–∑–¥–∞–µ–º savepoint –¥–ª—è rollback –≤ dry-run —Ä–µ–∂–∏–º–µ
                savepoint = transaction.savepoint()

            try:
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –±–∞—Ç—á–∞–º
                for i in range(0, len(products_data), self.chunk_size):
                    chunk = products_data[i : i + self.chunk_size]
                    imported_count += self._process_products_chunk(chunk, progress_bar)

                if self.dry_run:
                    # Rollback –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ dry-run —Ä–µ–∂–∏–º–µ
                    transaction.savepoint_rollback(savepoint)

            except Exception as e:
                if not self.dry_run:
                    raise
                else:
                    transaction.savepoint_rollback(savepoint)
                    raise

        progress_bar.close()
        return imported_count

    def _process_products_chunk(self, chunk: List[Dict], progress_bar) -> int:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –±–∞—Ç—á–∞ —Ç–æ–≤–∞—Ä–æ–≤"""

        processed_count = 0

        for product_data in chunk:
            try:
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
                self._process_single_product(product_data)
                processed_count += 1

            except Exception as e:
                self.stdout.write(
                    self.style.ERROR(
                        f'‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–æ–≤–∞—Ä–∞ {product_data.get("onec_id", "UNKNOWN")}: {str(e)}'
                    )
                )
                if not self.force:
                    raise

            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ progress bar
            progress_bar.update(1)

            # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
            if self.use_mock_data:
                time.sleep(0.01)

        return processed_count

    def _process_single_product(self, product_data: Dict):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞"""

        onec_id = product_data.get("onec_id")
        if not onec_id:
            raise ValueError("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç onec_id —Ç–æ–≤–∞—Ä–∞")

        # –ü–æ–∏—Å–∫ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –±—Ä–µ–Ω–¥–∞
        brand_name = product_data.get("brand")
        if brand_name:
            brand, _ = Brand.objects.get_or_create(
                name=brand_name, defaults={"is_active": True}
            )
        else:
            # –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: —Å–æ–∑–¥–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π –±—Ä–µ–Ω–¥ –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω
            brand, _ = Brand.objects.get_or_create(
                name="–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –±—Ä–µ–Ω–¥",
                defaults={
                    "slug": "neizvestnyj-brend",
                    "description": "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–Ω–Ω—ã–π –±—Ä–µ–Ω–¥ –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤ –±–µ–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –±—Ä–µ–Ω–¥–∞",
                    "is_active": True,
                },
            )

        # –ü–æ–∏—Å–∫ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        category_name = product_data.get("category")
        if category_name:
            category, _ = Category.objects.get_or_create(
                name=category_name, defaults={"is_active": True}
            )
        else:
            # –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: —Å–æ–∑–¥–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–∞
            category, _ = Category.objects.get_or_create(
                name="–†–∞–∑–Ω–æ–µ",
                defaults={
                    "slug": "raznoe",
                    "description": "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–Ω–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤ –±–µ–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏",
                    "is_active": True,
                },
            )

        # –î–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–∞
        product_defaults = {
            "name": product_data.get("name", "–¢–æ–≤–∞—Ä –±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"),
            "brand": brand,
            "category": category,
            "description": product_data.get("description", ""),
            "short_description": product_data.get("short_description", ""),
            "sku": product_data.get("sku", ""),
            "stock_quantity": product_data.get("stock_quantity", 0),
            "min_order_quantity": product_data.get("min_order_quantity", 1),
            "specifications": product_data.get("specifications", {}),
            "is_active": product_data.get("is_active", True),
            "sync_status": "synced",
            "last_sync_at": timezone.now(),
            "error_message": "",
        }

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω
        prices = product_data.get("prices", {})
        for price_field in [
            "retail_price",
            "opt1_price",
            "opt2_price",
            "opt3_price",
            "trainer_price",
            "federation_price",
            "recommended_retail_price",
            "max_suggested_retail_price",
        ]:
            if price_field in prices:
                try:
                    product_defaults[price_field] = Decimal(prices[price_field])
                except (ValueError, TypeError):
                    self.stdout.write(
                        self.style.WARNING(
                            f"‚ö†Ô∏è  –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ü–µ–Ω–∞ {price_field} –¥–ª—è —Ç–æ–≤–∞—Ä–∞ {onec_id}"
                        )
                    )

        # –°–æ–∑–¥–∞–Ω–∏–µ –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
        if self.force:
            product, created = Product.objects.update_or_create(
                onec_id=onec_id, defaults=product_defaults
            )
            action = "—Å–æ–∑–¥–∞–Ω" if created else "–æ–±–Ω–æ–≤–ª–µ–Ω"
        else:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º
            if Product.objects.filter(onec_id=onec_id).exists():
                if not self.dry_run:
                    self.stdout.write(
                        self.style.WARNING(
                            f"‚ö†Ô∏è  –¢–æ–≤–∞—Ä {onec_id} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º"
                        )
                    )
                return
            else:
                product = Product.objects.create(onec_id=onec_id, **product_defaults)
                action = "—Å–æ–∑–¥–∞–Ω"

        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ (—Ç–æ–ª—å–∫–æ –≤ verbose —Ä–µ–∂–∏–º–µ)
        if getattr(self, "verbosity", 1) >= 2:
            self.stdout.write(f"‚úÖ –¢–æ–≤–∞—Ä {onec_id} ({product.name}) {action}")
