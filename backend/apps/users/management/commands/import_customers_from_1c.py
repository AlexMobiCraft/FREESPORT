"""
Django management –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏–∑ 1–°

–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
    python manage.py import_customers_from_1c --file=customers.xml
    python manage.py import_customers_from_1c --file=customers.json --dry-run
    python manage.py import_customers_from_1c --mock-data --chunk-size=50
"""

import json
import time
from pathlib import Path
from typing import Any, Dict, List

from django.core.management.base import BaseCommand, CommandError
from django.db import transaction
from django.utils import timezone
from tqdm import tqdm

from apps.users.models import User


class Command(BaseCommand):
    """
    –ö–æ–º–∞–Ω–¥–∞ –∏–º–ø–æ—Ä—Ç–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏–∑ 1–° (–∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è –±—É–¥—É—â–µ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏)
    """

    help = "–ò–º–ø–æ—Ä—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏–∑ 1–° (XML/JSON) - –∑–∞–≥–ª—É—à–∫–∞"

    def add_arguments(self, parser):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥—ã"""
        parser.add_argument(
            "--file", type=str, help="–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –¥–∞–Ω–Ω—ã—Ö 1–° (XML –∏–ª–∏ JSON)"
        )

        parser.add_argument(
            "--dry-run",
            action="store_true",
            help="–¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—É—Å–∫ –±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö",
        )

        parser.add_argument(
            "--chunk-size",
            type=int,
            default=30,
            help="–†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 30)",
        )

        parser.add_argument(
            "--mock-data",
            action="store_true",
            help="–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≤–º–µ—Å—Ç–æ —Ñ–∞–π–ª–∞",
        )

        parser.add_argument(
            "--force",
            action="store_true",
            help="–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤",
        )

    def handle(self, *args, **options):
        """–û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –∫–æ–º–∞–Ω–¥—ã"""

        self.dry_run = options["dry_run"]
        self.chunk_size = options["chunk_size"]
        self.force = options["force"]
        self.file_path = options["file"]
        self.use_mock_data = options["mock_data"]

        # –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        if not self.file_path and not self.use_mock_data:
            raise CommandError(
                (
                    "–£–∫–∞–∂–∏—Ç–µ –ª–∏–±–æ --file –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ —Ñ–∞–π–ª–∞, "
                    "–ª–∏–±–æ --mock-data –¥–ª—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö"
                )
            )

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        self.stdout.write(self.style.SUCCESS("üöÄ –ó–∞–ø—É—Å–∫ –∏–º–ø–æ—Ä—Ç–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏–∑ 1–°"))
        if self.dry_run:
            self.stdout.write(
                self.style.WARNING("‚ö†Ô∏è  –†–ï–ñ–ò–ú DRY-RUN: –∏–∑–º–µ–Ω–µ–Ω–∏—è –ù–ï –±—É–¥—É—Ç " "—Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
            )

        try:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
            if self.use_mock_data:
                customers_data = self._get_mock_customers_data()
                self.stdout.write(
                    f"üì¶ –ó–∞–≥—Ä—É–∂–µ–Ω—ã —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ: " f"{len(customers_data)} –∫–ª–∏–µ–Ω—Ç–æ–≤"
                )
            else:
                customers_data = self._load_data_from_file()
                self.stdout.write(f"üìÅ –ó–∞–≥—Ä—É–∂–µ–Ω —Ñ–∞–π–ª: {len(customers_data)} –∫–ª–∏–µ–Ω—Ç–æ–≤")

            # –ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö
            imported_count = self._import_customers(customers_data)

            # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            if self.dry_run:
                self.stdout.write(
                    self.style.SUCCESS(
                        f"‚úÖ DRY-RUN –∑–∞–≤–µ—Ä—à–µ–Ω: {imported_count} " f"–∫–ª–∏–µ–Ω—Ç–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ"
                    )
                )
            else:
                self.stdout.write(
                    self.style.SUCCESS(
                        f"‚úÖ –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ: {imported_count} "
                        f"–∫–ª–∏–µ–Ω—Ç–æ–≤ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ"
                    )
                )

        except Exception as e:
            self.stdout.write(self.style.ERROR(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {str(e)}"))
            raise

    def _load_data_from_file(self) -> List[Dict]:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞"""

        if not Path(self.file_path).exists():
            raise CommandError(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {self.file_path}")

        file_path = Path(self.file_path)

        if file_path.suffix.lower() == ".json":
            return self._parse_json_file(file_path)
        elif file_path.suffix.lower() in [".xml"]:
            return self._parse_xml_file(file_path)
        else:
            raise CommandError(
                f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞: {file_path.suffix}. "
                "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è: .json, .xml"
            )

    def _parse_json_file(self, file_path: Path) -> List[Dict]:
        """–ü–∞—Ä—Å–∏–Ω–≥ JSON —Ñ–∞–π–ª–∞"""
        try:
            with open(file_path, "r", encoding="utf-8") as f:
                data = json.load(f)

            if isinstance(data, dict) and "customers" in data:
                customers_data = data["customers"]
                if isinstance(customers_data, list):
                    return customers_data
                return []
            elif isinstance(data, list):
                return data
            else:
                raise CommandError("–ù–µ–≤–µ—Ä–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ JSON —Ñ–∞–π–ª–∞")

        except json.JSONDecodeError as e:
            raise CommandError(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {str(e)}")

    def _parse_xml_file(self, file_path: Path) -> List[Dict]:
        """–ü–∞—Ä—Å–∏–Ω–≥ XML —Ñ–∞–π–ª–∞ (–∑–∞–≥–ª—É—à–∫–∞)"""
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å XML –ø–∞—Ä—Å–µ—Ä –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—Ä–∞–∑—Ü–æ–≤ –æ—Ç 1–°
        raise CommandError(
            "XML –ø–∞—Ä—Å–µ—Ä –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—Ä–∞–∑—Ü–æ–≤ "
            "—Ñ–∞–π–ª–æ–≤ –æ—Ç 1–°. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ --mock-data –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."
        )

    def _get_mock_customers_data(self) -> List[Dict]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤"""

        mock_roles = [
            "retail",
            "wholesale_level1",
            "wholesale_level2",
            "wholesale_level3",
            "trainer",
        ]
        mock_companies = [
            "–°–ø–æ—Ä—Ç –ú–∞—Ä–∫–µ—Ç –û–û–û",
            "–ê—Ç–ª–µ—Ç –°–ø–æ—Ä—Ç",
            "–§–∏—Ç–Ω–µ—Å –ö–ª—É–± –≠–Ω–µ—Ä–≥–∏—è",
            "–°–ø–æ—Ä—Ç–∏–≤–Ω–∞—è –ë–∞–∑–∞",
            "–û–ª–∏–º–ø –°–ø–æ—Ä—Ç",
            "–î–∏–Ω–∞–º–æ –°–Ω–∞–±",
            "–ß–µ–º–ø–∏–æ–Ω –¢—Ä–µ–π–¥",
        ]

        customers = []

        for i in range(1, 16):  # 15 —Ç–µ—Å—Ç–æ–≤—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
            customer = {
                "onec_id": f"1C-CUSTOMER-{i:05d}",
                "email": f"customer{i}@test-1c.ru",
                "first_name": f"–ò–º—è{i}",
                "last_name": f"–§–∞–º–∏–ª–∏—è{i}",
                "role": mock_roles[i % len(mock_roles)],
                "is_active": i % 8 != 0,  # 87% –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
                "phone_number": f"+7{900 + i % 99}{1000000 + i * 123:07d}",
                "company_name": mock_companies[i % len(mock_companies)]
                if i % 3 == 0
                else "",
                "tax_id": f"{7000000000 + i * 123456}" if i % 3 == 0 else "",
                "address": f"–≥. –ú–æ—Å–∫–≤–∞, —É–ª. –¢–µ—Å—Ç–æ–≤–∞—è, –¥. {i}",
                "created_in_1c": True,
                "sync_status": "synced" if i % 6 != 0 else "pending",
            }
            customers.append(customer)

        return customers

    def _import_customers(self, customers_data: List[Dict]) -> int:
        """–ò–º–ø–æ—Ä—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""

        imported_count = 0

        # Progress bar
        progress_bar = tqdm(
            customers_data,
            desc="–ò–º–ø–æ—Ä—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤",
            unit="–∫–ª–∏–µ–Ω—Ç–æ–≤",
            ncols=100,
            leave=True,
        )

        with transaction.atomic():
            if self.dry_run:
                # –°–æ–∑–¥–∞–µ–º savepoint –¥–ª—è rollback –≤ dry-run —Ä–µ–∂–∏–º–µ
                savepoint = transaction.savepoint()

            try:
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø–æ –±–∞—Ç—á–∞–º
                for i in range(0, len(customers_data), self.chunk_size):
                    chunk = customers_data[i : i + self.chunk_size]
                    imported_count += self._process_customers_chunk(chunk, progress_bar)

                if self.dry_run:
                    # Rollback –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ dry-run —Ä–µ–∂–∏–º–µ
                    transaction.savepoint_rollback(savepoint)

            except Exception:
                if not self.dry_run:
                    raise
                else:
                    transaction.savepoint_rollback(savepoint)
                    raise

        progress_bar.close()
        return imported_count

    def _process_customers_chunk(self, chunk: List[Dict], progress_bar: Any) -> int:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –±–∞—Ç—á–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤"""

        processed_count = 0

        for customer_data in chunk:
            try:
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
                self._process_single_customer(customer_data)
                processed_count += 1

            except Exception as e:
                self.stdout.write(
                    self.style.ERROR(
                        f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–ª–∏–µ–Ω—Ç–∞ "
                        f'{customer_data.get("onec_id", "UNKNOWN")}: {e}'
                    )
                )
                if not self.force:
                    raise

            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ progress bar
            progress_bar.update(1)

            # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
            if self.use_mock_data:
                time.sleep(0.01)

        return processed_count

    def _process_single_customer(self, customer_data: Dict) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞"""

        onec_id = customer_data.get("onec_id")
        if not onec_id:
            raise ValueError("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç onec_id –∫–ª–∏–µ–Ω—Ç–∞")

        # –î–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞ (–º–∞–ø–ø–∏–Ω–≥ –ø–æ–ª–µ–π –Ω–∞ –ø–æ–ª—è –º–æ–¥–µ–ª–∏ User)
        customer_defaults = {
            "email": customer_data.get("email", ""),
            "first_name": customer_data.get("first_name", ""),
            "last_name": customer_data.get("last_name", ""),
            "phone": customer_data.get("phone_number", ""),
            "role": customer_data.get("role", "retail"),
            "is_active": customer_data.get("is_active", True),
            "company_name": customer_data.get("company_name", ""),
            "tax_id": customer_data.get("tax_id", ""),
            # address –ø–æ–ª–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ User –º–æ–¥–µ–ª–∏ - –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
            "created_in_1c": customer_data.get("created_in_1c", True),
            "sync_status": customer_data.get("sync_status", "synced"),
            "last_sync_at": timezone.now(),
            "sync_error_message": "",
        }

        # –°–æ–∑–¥–∞–Ω–∏–µ –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞
        if self.force:
            # –î–ª—è update_or_create –Ω—É–∂–Ω–æ –æ—Ç–¥–µ–ª—å–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –ø–∞—Ä–æ–ª—å
            # –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏
            try:
                customer = User.objects.get(onec_id=onec_id)
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ
                for key, value in customer_defaults.items():
                    setattr(customer, key, value)
                customer.save()
                action = "–æ–±–Ω–æ–≤–ª–µ–Ω"
            except User.DoesNotExist:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ —Å –ø–∞—Ä–æ–ª–µ–º
                customer = User.objects.create_user(
                    password="temp_password_1c_sync",
                    onec_id=onec_id,
                    **customer_defaults,
                )
                action = "—Å–æ–∑–¥–∞–Ω"
        else:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º
            if User.objects.filter(onec_id=onec_id).exists():
                if not self.dry_run:
                    self.stdout.write(
                        self.style.WARNING(
                            f"‚ö†Ô∏è  –ö–ª–∏–µ–Ω—Ç {onec_id} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, " f"–ø—Ä–æ–ø—É—Å–∫–∞–µ–º"
                        )
                    )
                return
            elif User.objects.filter(email=customer_defaults["email"]).exists():
                if not self.dry_run:
                    self.stdout.write(
                        self.style.WARNING(
                            f"‚ö†Ô∏è  –ö–ª–∏–µ–Ω—Ç —Å email "
                            f"{customer_defaults['email']} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, "
                            f"–ø—Ä–æ–ø—É—Å–∫–∞–µ–º"
                        )
                    )
                return
            else:
                customer = User.objects.create_user(
                    password="temp_password_1c_sync",
                    onec_id=onec_id,
                    **customer_defaults,
                )
                action = "—Å–æ–∑–¥–∞–Ω"

        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ (—Ç–æ–ª—å–∫–æ –≤ verbose —Ä–µ–∂–∏–º–µ)
        if getattr(self, "verbosity", 1) >= 2:
            self.stdout.write(
                f"‚úÖ –ö–ª–∏–µ–Ω—Ç {onec_id} ({customer.first_name} "
                f"{customer.last_name}) {action}"
            )
