"""
Django management –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤ —Å 1–°

–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
    python manage.py sync_customers_with_1c --export-new
    python manage.py sync_customers_with_1c --import-updates --dry-run
    python manage.py sync_customers_with_1c --full-sync --chunk-size=100
"""

import time
from typing import Dict, List

from django.core.management.base import BaseCommand, CommandError
from django.db import transaction
from django.utils import timezone
from tqdm import tqdm

from apps.users.models import User


class Command(BaseCommand):
    """
    –ö–æ–º–∞–Ω–¥–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤ —Å 1–° (–¥–≤—É—Å—Ç–æ—Ä–æ–Ω–Ω—è—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è)
    """

    help = "–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤ —Å 1–° (—ç–∫—Å–ø–æ—Ä—Ç –Ω–æ–≤—ã—Ö, –∏–º–ø–æ—Ä—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π)"

    def add_arguments(self, parser):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥—ã"""
        parser.add_argument(
            "--export-new",
            action="store_true",
            help="–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –≤ 1–°",
        )

        parser.add_argument(
            "--import-updates",
            action="store_true",
            help="–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏–∑ 1–°",
        )

        parser.add_argument(
            "--full-sync",
            action="store_true",
            help="–ü–æ–ª–Ω–∞—è –¥–≤—É—Å—Ç–æ—Ä–æ–Ω–Ω—è—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è (—ç–∫—Å–ø–æ—Ä—Ç + –∏–º–ø–æ—Ä—Ç)",
        )

        parser.add_argument(
            "--dry-run",
            action="store_true",
            help="–¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—É—Å–∫ –±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö",
        )

        parser.add_argument(
            "--chunk-size",
            type=int,
            default=50,
            help="–†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 50)",
        )

        parser.add_argument(
            "--force-all",
            action="store_true",
            help="–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤",
        )

    def handle(self, *args, **options):
        """–û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –∫–æ–º–∞–Ω–¥—ã"""

        self.dry_run = options["dry_run"]
        self.chunk_size = options["chunk_size"]
        self.force_all = options["force_all"]
        self.export_new = options["export_new"]
        self.import_updates = options["import_updates"]
        self.full_sync = options["full_sync"]

        # –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        if not any([self.export_new, self.import_updates, self.full_sync]):
            raise CommandError(
                (
                    "–£–∫–∞–∂–∏—Ç–µ —Ä–µ–∂–∏–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: --export-new, "
                    "--import-updates –∏–ª–∏ --full-sync"
                )
            )

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        self.stdout.write(
            self.style.SUCCESS("üîÑ –ó–∞–ø—É—Å–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤ —Å 1–°")
        )

        if self.dry_run:
            self.stdout.write(
                self.style.WARNING(
                    "‚ö†Ô∏è  –†–ï–ñ–ò–ú DRY-RUN: –∏–∑–º–µ–Ω–µ–Ω–∏—è –ù–ï –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã"
                )
            )

        try:
            exported_count = 0
            imported_count = 0

            with transaction.atomic():
                if self.dry_run:
                    savepoint = transaction.savepoint()

                # –≠–∫—Å–ø–æ—Ä—Ç –Ω–æ–≤—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –≤ 1–°
                if self.export_new or self.full_sync:
                    exported_count = self._export_new_customers()

                # –ò–º–ø–æ—Ä—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏–∑ 1–°
                if self.import_updates or self.full_sync:
                    imported_count = self._import_customer_updates()

                if self.dry_run:
                    transaction.savepoint_rollback(savepoint)
                    self.stdout.write(
                        self.style.SUCCESS(
                            f"‚úÖ DRY-RUN –∑–∞–≤–µ—Ä—à–µ–Ω: {exported_count} "
                            f"—ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ, {imported_count} –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ"
                        )
                    )
                else:
                    self.stdout.write(
                        self.style.SUCCESS(
                            f"‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {exported_count} "
                            f"—ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ, {imported_count} –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ"
                        )
                    )

        except Exception as e:
            self.stdout.write(
                self.style.ERROR(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {str(e)}")
            )
            raise

    def _export_new_customers(self) -> int:
        """–≠–∫—Å–ø–æ—Ä—Ç –Ω–æ–≤—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –≤ 1–°"""
        self.stdout.write("üì§ –≠–∫—Å–ø–æ—Ä—Ç –Ω–æ–≤—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –≤ 1–°...")

        # –ü–æ–∏—Å–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å
        if self.force_all:
            customers_to_export = User.objects.filter(is_active=True)
        else:
            customers_to_export = User.objects.filter(
                needs_1c_export=True, is_active=True
            )

        total_count = customers_to_export.count()
        self.stdout.write(f"üìä –ù–∞–π–¥–µ–Ω–æ –∫–ª–∏–µ–Ω—Ç–æ–≤ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞: {total_count}")

        if total_count == 0:
            return 0

        # Progress bar
        progress_bar = tqdm(
            customers_to_export.iterator(chunk_size=self.chunk_size),
            total=total_count,
            desc="–≠–∫—Å–ø–æ—Ä—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤",
            unit="–∫–ª–∏–µ–Ω—Ç–æ–≤",
            ncols=100,
            leave=True,
        )

        exported_count = 0

        for customer in progress_bar:
            try:
                # –ò–º–∏—Ç–∞—Ü–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ 1–° (–∑–∞–≥–ª—É—à–∫–∞)
                export_result = self._export_customer_to_1c(customer)

                if export_result["success"]:
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —ç–∫—Å–ø–æ—Ä—Ç–∞
                    customer.onec_id = export_result.get(
                        "onec_id", customer.onec_id
                    )
                    customer.needs_1c_export = False
                    customer.sync_status = "synced"
                    customer.last_sync_at = timezone.now()
                    customer.sync_error_message = ""
                    customer.save(
                        update_fields=[
                            "onec_id",
                            "needs_1c_export",
                            "sync_status",
                            "last_sync_at",
                            "sync_error_message",
                        ]
                    )
                    exported_count += 1
                else:
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å –æ—à–∏–±–∫–æ–π
                    customer.sync_status = "error"
                    customer.sync_error_message = export_result.get(
                        "error", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"
                    )
                    customer.save(
                        update_fields=["sync_status", "sync_error_message"]
                    )

            except Exception as e:
                self.stdout.write(
                    self.style.ERROR(
                        f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –∫–ª–∏–µ–Ω—Ç–∞ {customer.id}: {e}"
                    )
                )
                customer.sync_status = "error"
                customer.sync_error_message = str(e)
                customer.save(
                    update_fields=["sync_status", "sync_error_message"]
                )

            # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
            time.sleep(0.01)

        progress_bar.close()
        return exported_count

    def _export_customer_to_1c(self, customer: User) -> Dict:
        """–≠–∫—Å–ø–æ—Ä—Ç –æ–¥–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ –≤ 1–° (–∑–∞–≥–ª—É—à–∫–∞)"""
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç —á–µ—Ä–µ–∑ API 1–°

        # –ò–º–∏—Ç–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ–≥–æ —ç–∫—Å–ø–æ—Ä—Ç–∞
        import uuid

        return {
            "success": True,
            "onec_id": customer.onec_id
            or f"1C-EXPORTED-{uuid.uuid4().hex[:8].upper()}",
            "message": "–ö–ª–∏–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –≤ 1–°",
        }

        # –ü—Ä–∏–º–µ—Ä –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–∫–∏:
        # return {
        #     'success': False,
        #     'error': '–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å 1–°'
        # }

    def _import_customer_updates(self) -> int:
        """–ò–º–ø–æ—Ä—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏–∑ 1–°"""
        self.stdout.write("üì• –ò–º–ø–æ—Ä—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏–∑ 1–°...")

        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –∏–∑ 1–° (–∑–∞–≥–ª—É—à–∫–∞)
        customer_updates = self._fetch_customer_updates_from_1c()

        total_count = len(customer_updates)
        self.stdout.write(f"üìä –ù–∞–π–¥–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –æ—Ç 1–°: {total_count}")

        if total_count == 0:
            return 0

        # Progress bar
        progress_bar = tqdm(
            customer_updates,
            desc="–ò–º–ø–æ—Ä—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π",
            unit="–æ–±–Ω–æ–≤–ª–µ–Ω–∏–π",
            ncols=100,
            leave=True,
        )

        imported_count = 0

        for update_data in progress_bar:
            try:
                # –ò–º–ø–æ—Ä—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞
                if self._import_customer_update(update_data):
                    imported_count += 1

            except Exception as e:
                self.stdout.write(
                    self.style.ERROR(
                        f'‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è '
                        f'{update_data.get("onec_id", "UNKNOWN")}: {str(e)}'
                    )
                )

            # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
            time.sleep(0.01)

        progress_bar.close()
        return imported_count

    def _fetch_customer_updates_from_1c(self) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏–∑ 1–° (–∑–∞–≥–ª—É—à–∫–∞)"""
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ API 1–°

        # –ò–º–∏—Ç–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –æ—Ç 1–°
        mock_updates = []

        # –ù–∞—Ö–æ–¥–∏–º –∫–ª–∏–µ–Ω—Ç–æ–≤ —Å onec_id –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
        synced_customers = User.objects.filter(
            onec_id__isnull=False, sync_status="synced"
        )[
            :5
        ]  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 5 –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞

        for customer in synced_customers:
            mock_updates.append(
                {
                    "onec_id": customer.onec_id,
                    "email": customer.email,
                    "first_name": customer.first_name + " (–æ–±–Ω–æ–≤–ª–µ–Ω–æ)",
                    "phone_number": customer.phone,
                    "company_name": customer.company_name + " (–æ–±–Ω–æ–≤–ª–µ–Ω–æ)"
                    if customer.company_name
                    else "",
                    "is_active": customer.is_active,
                    "last_updated_in_1c": timezone.now().isoformat(),
                }
            )

        return mock_updates

    def _import_customer_update(self, update_data: Dict) -> bool:
        """–ò–º–ø–æ—Ä—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ–¥–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞"""
        onec_id = update_data.get("onec_id")
        if not onec_id:
            return False

        try:
            customer = User.objects.get(onec_id=onec_id)

            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–µ –ø–æ–ª—è
            updated_fields = []

            if update_data.get("first_name") != customer.first_name:
                customer.first_name = update_data.get(
                    "first_name", customer.first_name
                )
                updated_fields.append("first_name")

            if update_data.get("phone_number") != customer.phone:
                customer.phone = update_data.get(
                    "phone_number", customer.phone
                )
                updated_fields.append("phone")

            if update_data.get("company_name") != customer.company_name:
                customer.company_name = update_data.get(
                    "company_name", customer.company_name
                )
                updated_fields.append("company_name")

            if update_data.get("is_active") != customer.is_active:
                customer.is_active = update_data.get(
                    "is_active", customer.is_active
                )
                updated_fields.append("is_active")

            if updated_fields:
                # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
                customer.last_sync_at = timezone.now()
                customer.sync_status = "synced"
                customer.sync_error_message = ""
                updated_fields.extend(
                    ["last_sync_at", "sync_status", "sync_error_message"]
                )

                customer.save(update_fields=updated_fields)

                if getattr(self, "verbosity", 1) >= 2:
                    self.stdout.write(
                        f'‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω –∫–ª–∏–µ–Ω—Ç {onec_id}: '
                        f'{", ".join(updated_fields)}'
                    )

                return True

            return False  # –ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π

        except User.DoesNotExist:
            self.stdout.write(
                self.style.WARNING(
                    f"‚ö†Ô∏è  –ö–ª–∏–µ–Ω—Ç —Å onec_id {onec_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ"
                )
            )
            return False
