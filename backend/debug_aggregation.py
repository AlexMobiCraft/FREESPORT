#!/usr/bin/env python
"""
–û—Ç–ª–∞–¥–∫–∞ –ø—Ä–æ–±–ª–µ–º—ã —Å –∞–≥—Ä–µ–≥–∞—Ü–∏–µ–π Order –º–æ–¥–µ–ª–∏
"""
import os
import sys
import django

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
os.environ.setdefault("DJANGO_SETTINGS_MODULE", "freesport.settings.development")
django.setup()

from django.db.models import Avg, Count, Sum
from apps.orders.models import Order
from django.contrib.auth import get_user_model

User = get_user_model()


def test_aggregation():
    """–¢–µ—Å—Ç –∞–≥—Ä–µ–≥–∞—Ü–∏–∏ –∑–∞–∫–∞–∑–æ–≤"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–≥—Ä–µ–≥–∞—Ü–∏—é Order –º–æ–¥–µ–ª–∏...")

    try:
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = User.objects.create_user(
            email="test@test.com",
            password="testpass123",
            first_name="Test",
            last_name="User",
        )
        print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω: {user}")

        # –°–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–∫–∞–∑–æ–≤
        order1 = Order.objects.create(
            user=user,
            order_number="TEST-001",
            status="pending",
            total_amount=1000.00,
            delivery_address="Test Address 1",
            delivery_method="courier",
            payment_method="card",
        )
        print(f"‚úÖ –ó–∞–∫–∞–∑ 1 —Å–æ–∑–¥–∞–Ω: {order1}")

        order2 = Order.objects.create(
            user=user,
            order_number="TEST-002",
            status="delivered",
            total_amount=2000.00,
            delivery_address="Test Address 2",
            delivery_method="courier",
            payment_method="card",
        )
        print(f"‚úÖ –ó–∞–∫–∞–∑ 2 —Å–æ–∑–¥–∞–Ω: {order2}")

        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–≥—Ä–µ–≥–∞—Ü–∏—é
        print("\nüîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–≥—Ä–µ–≥–∞—Ü–∏—é...")

        # –ü—Ä–æ—Å—Ç–æ–π QuerySet
        user_orders = Order.objects.filter(user=user)
        print(f"‚úÖ QuerySet —Å–æ–∑–¥–∞–Ω: {user_orders.count()} –∑–∞–∫–∞–∑–æ–≤")

        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é –∞–≥—Ä–µ–≥–∞—Ü–∏—é –æ—Ç–¥–µ–ª—å–Ω–æ
        count_result = user_orders.aggregate(count=Count("id"))
        print(f"‚úÖ Count –∞–≥—Ä–µ–≥–∞—Ü–∏—è: {count_result}")

        sum_result = user_orders.aggregate(total=Sum("total_amount"))
        print(f"‚úÖ Sum –∞–≥—Ä–µ–≥–∞—Ü–∏—è: {sum_result}")

        avg_result = user_orders.aggregate(avg=Avg("total_amount"))
        print(f"‚úÖ Avg –∞–≥—Ä–µ–≥–∞—Ü–∏—è: {avg_result}")

        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∞–≥—Ä–µ–≥–∞—Ü–∏—é
        combined_result = user_orders.aggregate(
            count=Count("id"),
            total_amount=Sum("total_amount"),
            avg_amount=Avg("total_amount"),
        )
        print(f"‚úÖ –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∞–≥—Ä–µ–≥–∞—Ü–∏—è: {combined_result}")

        # –û—á–∏—Å—Ç–∫–∞
        order1.delete()
        order2.delete()
        user.delete()

        print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –∞–≥—Ä–µ–≥–∞—Ü–∏–∏ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        return True

    except Exception as e:
        print(f"\n‚ùå –û–®–ò–ë–ö–ê –∞–≥—Ä–µ–≥–∞—Ü–∏–∏: {e}")
        import traceback

        traceback.print_exc()
        return False


if __name__ == "__main__":
    success = test_aggregation()
    sys.exit(0 if success else 1)
